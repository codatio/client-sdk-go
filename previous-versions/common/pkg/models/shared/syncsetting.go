// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// SyncSetting - Describes how often, and how much history, should be fetched for the given data type when a pull operation is queued.
type SyncSetting struct {
	// Available data types
	DataType DataType `json:"dataType"`
	// Whether this data type should be queued after a company has authorized a connection.
	FetchOnFirstLink bool `json:"fetchOnFirstLink"`
	// `True` if the [sync setting](https://docs.codat.io/knowledge-base/advanced-sync-settings) is locked.
	IsLocked *bool `json:"isLocked,omitempty"`
	// Months of data to fetch, for report data types (`balanceSheet` & `profitAndLoss`) only.
	MonthsToSync *int64 `json:"monthsToSync,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	SyncFromUtc *string `json:"syncFromUtc,omitempty"`
	// Number of months of data to be fetched. Set this *or* `syncFromUTC`.
	SyncFromWindow *int64 `json:"syncFromWindow,omitempty"`
	// The sync in which data types are queued for a sync.
	SyncOrder int64 `json:"syncOrder"`
	// Number of hours after which this data type should be refreshed.
	SyncSchedule int64 `json:"syncSchedule"`
}

func (o *SyncSetting) GetDataType() DataType {
	if o == nil {
		return DataType("")
	}
	return o.DataType
}

func (o *SyncSetting) GetFetchOnFirstLink() bool {
	if o == nil {
		return false
	}
	return o.FetchOnFirstLink
}

func (o *SyncSetting) GetIsLocked() *bool {
	if o == nil {
		return nil
	}
	return o.IsLocked
}

func (o *SyncSetting) GetMonthsToSync() *int64 {
	if o == nil {
		return nil
	}
	return o.MonthsToSync
}

func (o *SyncSetting) GetSyncFromUtc() *string {
	if o == nil {
		return nil
	}
	return o.SyncFromUtc
}

func (o *SyncSetting) GetSyncFromWindow() *int64 {
	if o == nil {
		return nil
	}
	return o.SyncFromWindow
}

func (o *SyncSetting) GetSyncOrder() int64 {
	if o == nil {
		return 0
	}
	return o.SyncOrder
}

func (o *SyncSetting) GetSyncSchedule() int64 {
	if o == nil {
		return 0
	}
	return o.SyncSchedule
}
