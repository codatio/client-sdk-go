// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/codatio/client-sdk-go/previous-versions/common/pkg/models/shared"
	"net/http"
)

// PathParamDataType - Data types that support supplemental data
type PathParamDataType string

const (
	PathParamDataTypeChartOfAccounts           PathParamDataType = "chartOfAccounts"
	PathParamDataTypeBills                     PathParamDataType = "bills"
	PathParamDataTypeCompany                   PathParamDataType = "company"
	PathParamDataTypeCreditNotes               PathParamDataType = "creditNotes"
	PathParamDataTypeCustomers                 PathParamDataType = "customers"
	PathParamDataTypeInvoices                  PathParamDataType = "invoices"
	PathParamDataTypeItems                     PathParamDataType = "items"
	PathParamDataTypeJournalEntries            PathParamDataType = "journalEntries"
	PathParamDataTypeSuppliers                 PathParamDataType = "suppliers"
	PathParamDataTypeTaxRates                  PathParamDataType = "taxRates"
	PathParamDataTypeCommerceCompanyInfo       PathParamDataType = "commerce-companyInfo"
	PathParamDataTypeCommerceCustomers         PathParamDataType = "commerce-customers"
	PathParamDataTypeCommerceDisputes          PathParamDataType = "commerce-disputes"
	PathParamDataTypeCommerceLocations         PathParamDataType = "commerce-locations"
	PathParamDataTypeCommerceOrders            PathParamDataType = "commerce-orders"
	PathParamDataTypeCommercePayments          PathParamDataType = "commerce-payments"
	PathParamDataTypeCommercePaymentMethods    PathParamDataType = "commerce-paymentMethods"
	PathParamDataTypeCommerceProducts          PathParamDataType = "commerce-products"
	PathParamDataTypeCommerceProductCategories PathParamDataType = "commerce-productCategories"
	PathParamDataTypeCommerceTaxComponents     PathParamDataType = "commerce-taxComponents"
	PathParamDataTypeCommerceTransactions      PathParamDataType = "commerce-transactions"
)

func (e PathParamDataType) ToPointer() *PathParamDataType {
	return &e
}
func (e *PathParamDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chartOfAccounts":
		fallthrough
	case "bills":
		fallthrough
	case "company":
		fallthrough
	case "creditNotes":
		fallthrough
	case "customers":
		fallthrough
	case "invoices":
		fallthrough
	case "items":
		fallthrough
	case "journalEntries":
		fallthrough
	case "suppliers":
		fallthrough
	case "taxRates":
		fallthrough
	case "commerce-companyInfo":
		fallthrough
	case "commerce-customers":
		fallthrough
	case "commerce-disputes":
		fallthrough
	case "commerce-locations":
		fallthrough
	case "commerce-orders":
		fallthrough
	case "commerce-payments":
		fallthrough
	case "commerce-paymentMethods":
		fallthrough
	case "commerce-products":
		fallthrough
	case "commerce-productCategories":
		fallthrough
	case "commerce-taxComponents":
		fallthrough
	case "commerce-transactions":
		*e = PathParamDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PathParamDataType: %v", v)
	}
}

type GetSupplementalDataConfigurationRequest struct {
	// Supported supplemental data data type.
	DataType PathParamDataType `pathParam:"style=simple,explode=false,name=dataType"`
	// A unique 4-letter key to represent a platform in each integration.
	PlatformKey string `pathParam:"style=simple,explode=false,name=platformKey"`
}

func (o *GetSupplementalDataConfigurationRequest) GetDataType() PathParamDataType {
	if o == nil {
		return PathParamDataType("")
	}
	return o.DataType
}

func (o *GetSupplementalDataConfigurationRequest) GetPlatformKey() string {
	if o == nil {
		return ""
	}
	return o.PlatformKey
}

type GetSupplementalDataConfigurationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	SupplementalDataConfiguration *shared.SupplementalDataConfiguration
}

func (o *GetSupplementalDataConfigurationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSupplementalDataConfigurationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSupplementalDataConfigurationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSupplementalDataConfigurationResponse) GetSupplementalDataConfiguration() *shared.SupplementalDataConfiguration {
	if o == nil {
		return nil
	}
	return o.SupplementalDataConfiguration
}
