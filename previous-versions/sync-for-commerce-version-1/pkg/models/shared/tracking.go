// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type AccountingProjectReference struct {
	// Unique identifier to the project reference.
	ID string `json:"id"`
	// The project's name.
	Name *string `json:"name,omitempty"`
}

func (o *AccountingProjectReference) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccountingProjectReference) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// RecordReference - Links the current record to the underlying record or data type that created it.
//
// For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
type RecordReference struct {
	// Allowed name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

func (o *RecordReference) GetDataType() *string {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *RecordReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Tracking - Categories, and a project and customer, against which the item is tracked.
type Tracking struct {
	CategoryRefs []TrackingCategoryRefItems `json:"categoryRefs"`
	CustomerRef  *AccountingCustomerRef     `json:"customerRef,omitempty"`
	// Defines if the bill or bill credit note is billed/rebilled to a project.
	IsBilledTo BilledToType `json:"isBilledTo"`
	// Defines if the bill or bill credit note is billed/rebilled to a project.
	IsRebilledTo BilledToType                `json:"isRebilledTo"`
	ProjectRef   *AccountingProjectReference `json:"projectRef,omitempty"`
	// Links the current record to the underlying record or data type that created it.
	//
	// For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
	RecordRef *RecordReference `json:"recordRef,omitempty"`
}

func (o *Tracking) GetCategoryRefs() []TrackingCategoryRefItems {
	if o == nil {
		return []TrackingCategoryRefItems{}
	}
	return o.CategoryRefs
}

func (o *Tracking) GetCustomerRef() *AccountingCustomerRef {
	if o == nil {
		return nil
	}
	return o.CustomerRef
}

func (o *Tracking) GetIsBilledTo() BilledToType {
	if o == nil {
		return BilledToType("")
	}
	return o.IsBilledTo
}

func (o *Tracking) GetIsRebilledTo() BilledToType {
	if o == nil {
		return BilledToType("")
	}
	return o.IsRebilledTo
}

func (o *Tracking) GetProjectRef() *AccountingProjectReference {
	if o == nil {
		return nil
	}
	return o.ProjectRef
}

func (o *Tracking) GetRecordRef() *RecordReference {
	if o == nil {
		return nil
	}
	return o.RecordRef
}
