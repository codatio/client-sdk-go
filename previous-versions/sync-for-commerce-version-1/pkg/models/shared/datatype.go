// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataType - Available Data types
type DataType string

const (
	DataTypeAccountTransactions          DataType = "accountTransactions"
	DataTypeBalanceSheet                 DataType = "balanceSheet"
	DataTypeBankAccounts                 DataType = "bankAccounts"
	DataTypeBankTransactions             DataType = "bankTransactions"
	DataTypeBillCreditNotes              DataType = "billCreditNotes"
	DataTypeBillPayments                 DataType = "billPayments"
	DataTypeBills                        DataType = "bills"
	DataTypeCashFlowStatement            DataType = "cashFlowStatement"
	DataTypeChartOfAccounts              DataType = "chartOfAccounts"
	DataTypeCompany                      DataType = "company"
	DataTypeCreditNotes                  DataType = "creditNotes"
	DataTypeCustomers                    DataType = "customers"
	DataTypeDirectCosts                  DataType = "directCosts"
	DataTypeDirectIncomes                DataType = "directIncomes"
	DataTypeInvoices                     DataType = "invoices"
	DataTypeItemReceipts                 DataType = "itemReceipts"
	DataTypeItems                        DataType = "items"
	DataTypeJournalEntries               DataType = "journalEntries"
	DataTypeJournals                     DataType = "journals"
	DataTypePaymentMethods               DataType = "paymentMethods"
	DataTypePayments                     DataType = "payments"
	DataTypeProfitAndLoss                DataType = "profitAndLoss"
	DataTypePurchaseOrders               DataType = "purchaseOrders"
	DataTypeSalesOrders                  DataType = "salesOrders"
	DataTypeSuppliers                    DataType = "suppliers"
	DataTypeTaxRates                     DataType = "taxRates"
	DataTypeTrackingCategories           DataType = "trackingCategories"
	DataTypeTransfers                    DataType = "transfers"
	DataTypeBankingAccountBalances       DataType = "banking-accountBalances"
	DataTypeBankingAccounts              DataType = "banking-accounts"
	DataTypeBankingTransactionCategories DataType = "banking-transactionCategories"
	DataTypeBankingTransactions          DataType = "banking-transactions"
	DataTypeCommerceCompanyInfo          DataType = "commerce-companyInfo"
	DataTypeCommerceCustomers            DataType = "commerce-customers"
	DataTypeCommerceDisputes             DataType = "commerce-disputes"
	DataTypeCommerceLocations            DataType = "commerce-locations"
	DataTypeCommerceOrders               DataType = "commerce-orders"
	DataTypeCommercePaymentMethods       DataType = "commerce-paymentMethods"
	DataTypeCommercePayments             DataType = "commerce-payments"
	DataTypeCommerceProductCategories    DataType = "commerce-productCategories"
	DataTypeCommerceProducts             DataType = "commerce-products"
	DataTypeCommerceTaxComponents        DataType = "commerce-taxComponents"
	DataTypeCommerceTransactions         DataType = "commerce-transactions"
)

func (e DataType) ToPointer() *DataType {
	return &e
}

func (e *DataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accountTransactions":
		fallthrough
	case "balanceSheet":
		fallthrough
	case "bankAccounts":
		fallthrough
	case "bankTransactions":
		fallthrough
	case "billCreditNotes":
		fallthrough
	case "billPayments":
		fallthrough
	case "bills":
		fallthrough
	case "cashFlowStatement":
		fallthrough
	case "chartOfAccounts":
		fallthrough
	case "company":
		fallthrough
	case "creditNotes":
		fallthrough
	case "customers":
		fallthrough
	case "directCosts":
		fallthrough
	case "directIncomes":
		fallthrough
	case "invoices":
		fallthrough
	case "itemReceipts":
		fallthrough
	case "items":
		fallthrough
	case "journalEntries":
		fallthrough
	case "journals":
		fallthrough
	case "paymentMethods":
		fallthrough
	case "payments":
		fallthrough
	case "profitAndLoss":
		fallthrough
	case "purchaseOrders":
		fallthrough
	case "salesOrders":
		fallthrough
	case "suppliers":
		fallthrough
	case "taxRates":
		fallthrough
	case "trackingCategories":
		fallthrough
	case "transfers":
		fallthrough
	case "banking-accountBalances":
		fallthrough
	case "banking-accounts":
		fallthrough
	case "banking-transactionCategories":
		fallthrough
	case "banking-transactions":
		fallthrough
	case "commerce-companyInfo":
		fallthrough
	case "commerce-customers":
		fallthrough
	case "commerce-disputes":
		fallthrough
	case "commerce-locations":
		fallthrough
	case "commerce-orders":
		fallthrough
	case "commerce-paymentMethods":
		fallthrough
	case "commerce-payments":
		fallthrough
	case "commerce-productCategories":
		fallthrough
	case "commerce-products":
		fallthrough
	case "commerce-taxComponents":
		fallthrough
	case "commerce-transactions":
		*e = DataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataType: %v", v)
	}
}
