// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/codatio/client-sdk-go/previous-versions/sync-for-commerce-version-1/pkg/utils"
	"github.com/ericlagergren/decimal"
)

type OrderLineItem struct {
	DiscountAllocations []OrderDiscountAllocation `json:"discountAllocations,omitempty"`
	// A unique, persistent identifier for this record
	ID string `json:"id"`
	// Reference that links the line item to the correct product details.
	ProductRef *ProductRef `json:"productRef,omitempty"`
	// Reference that links the line item to the specific version of product that has been ordered.
	ProductVariantRef *ProductVariantRef `json:"productVariantRef,omitempty"`
	// Number of units of the product sold.
	// For refunds, quantity is negative.
	//
	Quantity *decimal.Big `decimal:"number" json:"quantity,omitempty"`
	// Percentage rate (from 0 to 100) of any sales tax applied to the unit price.
	TaxPercentage *decimal.Big `decimal:"number" json:"taxPercentage,omitempty"`
	// Taxes breakdown as applied to order lines.
	Taxes []TaxeItems `json:"taxes,omitempty"`
	// Total amount of the line item, including discounts and tax.
	TotalAmount *decimal.Big `decimal:"number" json:"totalAmount,omitempty"`
	// Total amount of tax applied to the line item, factoring in any discounts.
	TotalTaxAmount *decimal.Big `decimal:"number" json:"totalTaxAmount,omitempty"`
	// Price per unit of goods or services, excluding discounts and tax.
	UnitPrice *decimal.Big `decimal:"number" json:"unitPrice,omitempty"`
}

func (o OrderLineItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderLineItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderLineItem) GetDiscountAllocations() []OrderDiscountAllocation {
	if o == nil {
		return nil
	}
	return o.DiscountAllocations
}

func (o *OrderLineItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrderLineItem) GetProductRef() *ProductRef {
	if o == nil {
		return nil
	}
	return o.ProductRef
}

func (o *OrderLineItem) GetProductVariantRef() *ProductVariantRef {
	if o == nil {
		return nil
	}
	return o.ProductVariantRef
}

func (o *OrderLineItem) GetQuantity() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *OrderLineItem) GetTaxPercentage() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.TaxPercentage
}

func (o *OrderLineItem) GetTaxes() []TaxeItems {
	if o == nil {
		return nil
	}
	return o.Taxes
}

func (o *OrderLineItem) GetTotalAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *OrderLineItem) GetTotalTaxAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.TotalTaxAmount
}

func (o *OrderLineItem) GetUnitPrice() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}
