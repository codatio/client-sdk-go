// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatasetDataTypes - Available Data types
type DatasetDataTypes string

const (
	DatasetDataTypesAccountTransactions          DatasetDataTypes = "accountTransactions"
	DatasetDataTypesBalanceSheet                 DatasetDataTypes = "balanceSheet"
	DatasetDataTypesBankAccounts                 DatasetDataTypes = "bankAccounts"
	DatasetDataTypesBankTransactions             DatasetDataTypes = "bankTransactions"
	DatasetDataTypesBillCreditNotes              DatasetDataTypes = "billCreditNotes"
	DatasetDataTypesBillPayments                 DatasetDataTypes = "billPayments"
	DatasetDataTypesBills                        DatasetDataTypes = "bills"
	DatasetDataTypesCashFlowStatement            DatasetDataTypes = "cashFlowStatement"
	DatasetDataTypesChartOfAccounts              DatasetDataTypes = "chartOfAccounts"
	DatasetDataTypesCompany                      DatasetDataTypes = "company"
	DatasetDataTypesCreditNotes                  DatasetDataTypes = "creditNotes"
	DatasetDataTypesCustomers                    DatasetDataTypes = "customers"
	DatasetDataTypesDirectCosts                  DatasetDataTypes = "directCosts"
	DatasetDataTypesDirectIncomes                DatasetDataTypes = "directIncomes"
	DatasetDataTypesInvoices                     DatasetDataTypes = "invoices"
	DatasetDataTypesItems                        DatasetDataTypes = "items"
	DatasetDataTypesJournalEntries               DatasetDataTypes = "journalEntries"
	DatasetDataTypesJournals                     DatasetDataTypes = "journals"
	DatasetDataTypesPaymentMethods               DatasetDataTypes = "paymentMethods"
	DatasetDataTypesPayments                     DatasetDataTypes = "payments"
	DatasetDataTypesProfitAndLoss                DatasetDataTypes = "profitAndLoss"
	DatasetDataTypesPurchaseOrders               DatasetDataTypes = "purchaseOrders"
	DatasetDataTypesSalesOrders                  DatasetDataTypes = "salesOrders"
	DatasetDataTypesSuppliers                    DatasetDataTypes = "suppliers"
	DatasetDataTypesTaxRates                     DatasetDataTypes = "taxRates"
	DatasetDataTypesTrackingCategories           DatasetDataTypes = "trackingCategories"
	DatasetDataTypesTransfers                    DatasetDataTypes = "transfers"
	DatasetDataTypesBankingAccountBalances       DatasetDataTypes = "banking-accountBalances"
	DatasetDataTypesBankingAccounts              DatasetDataTypes = "banking-accounts"
	DatasetDataTypesBankingTransactionCategories DatasetDataTypes = "banking-transactionCategories"
	DatasetDataTypesBankingTransactions          DatasetDataTypes = "banking-transactions"
	DatasetDataTypesCommerceCompanyInfo          DatasetDataTypes = "commerce-companyInfo"
	DatasetDataTypesCommerceCustomers            DatasetDataTypes = "commerce-customers"
	DatasetDataTypesCommerceDisputes             DatasetDataTypes = "commerce-disputes"
	DatasetDataTypesCommerceLocations            DatasetDataTypes = "commerce-locations"
	DatasetDataTypesCommerceOrders               DatasetDataTypes = "commerce-orders"
	DatasetDataTypesCommercePaymentMethods       DatasetDataTypes = "commerce-paymentMethods"
	DatasetDataTypesCommercePayments             DatasetDataTypes = "commerce-payments"
	DatasetDataTypesCommerceProductCategories    DatasetDataTypes = "commerce-productCategories"
	DatasetDataTypesCommerceProducts             DatasetDataTypes = "commerce-products"
	DatasetDataTypesCommerceTaxComponents        DatasetDataTypes = "commerce-taxComponents"
	DatasetDataTypesCommerceTransactions         DatasetDataTypes = "commerce-transactions"
)

func (e DatasetDataTypes) ToPointer() *DatasetDataTypes {
	return &e
}

func (e *DatasetDataTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accountTransactions":
		fallthrough
	case "balanceSheet":
		fallthrough
	case "bankAccounts":
		fallthrough
	case "bankTransactions":
		fallthrough
	case "billCreditNotes":
		fallthrough
	case "billPayments":
		fallthrough
	case "bills":
		fallthrough
	case "cashFlowStatement":
		fallthrough
	case "chartOfAccounts":
		fallthrough
	case "company":
		fallthrough
	case "creditNotes":
		fallthrough
	case "customers":
		fallthrough
	case "directCosts":
		fallthrough
	case "directIncomes":
		fallthrough
	case "invoices":
		fallthrough
	case "items":
		fallthrough
	case "journalEntries":
		fallthrough
	case "journals":
		fallthrough
	case "paymentMethods":
		fallthrough
	case "payments":
		fallthrough
	case "profitAndLoss":
		fallthrough
	case "purchaseOrders":
		fallthrough
	case "salesOrders":
		fallthrough
	case "suppliers":
		fallthrough
	case "taxRates":
		fallthrough
	case "trackingCategories":
		fallthrough
	case "transfers":
		fallthrough
	case "banking-accountBalances":
		fallthrough
	case "banking-accounts":
		fallthrough
	case "banking-transactionCategories":
		fallthrough
	case "banking-transactions":
		fallthrough
	case "commerce-companyInfo":
		fallthrough
	case "commerce-customers":
		fallthrough
	case "commerce-disputes":
		fallthrough
	case "commerce-locations":
		fallthrough
	case "commerce-orders":
		fallthrough
	case "commerce-paymentMethods":
		fallthrough
	case "commerce-payments":
		fallthrough
	case "commerce-productCategories":
		fallthrough
	case "commerce-products":
		fallthrough
	case "commerce-taxComponents":
		fallthrough
	case "commerce-transactions":
		*e = DatasetDataTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasetDataTypes: %v", v)
	}
}

type Dataset struct {
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Completed *string `json:"completed,omitempty"`
	// Unique identifier for a company's data connection.
	ConnectionID string `json:"connectionId"`
	// Available Data types
	DataType *DatasetDataTypes `json:"dataType,omitempty"`
	// URI to the dataset's logs.
	DatasetLogsURL *string `json:"datasetLogsUrl,omitempty"`
	// A brief message about the error.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Identifier for the dataset.
	ID string `json:"id"`
	// `True` if the dataset completed successfully.
	IsCompleted bool `json:"isCompleted"`
	// `True` if the dataset entered an error state.
	IsErrored bool `json:"isErrored"`
	// An integer signifying the progress of the dataset.
	Progress int `json:"progress"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Requested string `json:"requested"`
	// The current status of the dataset.
	Status DatasetStatus `json:"status"`
	// URI to the dataset's validation information.
	ValidationInformationURL *string `json:"validationInformationUrl,omitempty"`
}

func (o *Dataset) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *Dataset) GetCompleted() *string {
	if o == nil {
		return nil
	}
	return o.Completed
}

func (o *Dataset) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *Dataset) GetDataType() *DatasetDataTypes {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *Dataset) GetDatasetLogsURL() *string {
	if o == nil {
		return nil
	}
	return o.DatasetLogsURL
}

func (o *Dataset) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *Dataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Dataset) GetIsCompleted() bool {
	if o == nil {
		return false
	}
	return o.IsCompleted
}

func (o *Dataset) GetIsErrored() bool {
	if o == nil {
		return false
	}
	return o.IsErrored
}

func (o *Dataset) GetProgress() int {
	if o == nil {
		return 0
	}
	return o.Progress
}

func (o *Dataset) GetRequested() string {
	if o == nil {
		return ""
	}
	return o.Requested
}

func (o *Dataset) GetStatus() DatasetStatus {
	if o == nil {
		return DatasetStatus("")
	}
	return o.Status
}

func (o *Dataset) GetValidationInformationURL() *string {
	if o == nil {
		return nil
	}
	return o.ValidationInformationURL
}
