// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/codatio/client-sdk-go/previous-versions/sync-for-commerce-version-1/pkg/models/shared"
	"net/http"
)

type CreateAccountingInvoiceRequest struct {
	AccountingInvoice *shared.AccountingInvoice `request:"mediaType=application/json"`
	CompanyID         string                    `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID      string                    `pathParam:"style=simple,explode=false,name=connectionId"`
	TimeoutInMinutes  *int                      `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

func (o *CreateAccountingInvoiceRequest) GetAccountingInvoice() *shared.AccountingInvoice {
	if o == nil {
		return nil
	}
	return o.AccountingInvoice
}

func (o *CreateAccountingInvoiceRequest) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *CreateAccountingInvoiceRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *CreateAccountingInvoiceRequest) GetTimeoutInMinutes() *int {
	if o == nil {
		return nil
	}
	return o.TimeoutInMinutes
}

type CreateAccountingInvoiceResponse struct {
	// Success
	AccountingCreateInvoiceResponse *shared.AccountingCreateInvoiceResponse
	ContentType                     string
	// The request made is not valid.
	ErrorMessage *shared.ErrorMessage
	StatusCode   int
	RawResponse  *http.Response
}

func (o *CreateAccountingInvoiceResponse) GetAccountingCreateInvoiceResponse() *shared.AccountingCreateInvoiceResponse {
	if o == nil {
		return nil
	}
	return o.AccountingCreateInvoiceResponse
}

func (o *CreateAccountingInvoiceResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateAccountingInvoiceResponse) GetErrorMessage() *shared.ErrorMessage {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateAccountingInvoiceResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateAccountingInvoiceResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
