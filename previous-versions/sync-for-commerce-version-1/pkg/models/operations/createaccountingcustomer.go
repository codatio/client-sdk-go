// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/codatio/client-sdk-go/previous-versions/sync-for-commerce-version-1/pkg/models/shared"
	"net/http"
)

type CreateAccountingCustomerRequest struct {
	AccountingCustomer *shared.AccountingCustomer `request:"mediaType=application/json"`
	CompanyID          string                     `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID       string                     `pathParam:"style=simple,explode=false,name=connectionId"`
	TimeoutInMinutes   *int                       `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

func (o *CreateAccountingCustomerRequest) GetAccountingCustomer() *shared.AccountingCustomer {
	if o == nil {
		return nil
	}
	return o.AccountingCustomer
}

func (o *CreateAccountingCustomerRequest) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *CreateAccountingCustomerRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *CreateAccountingCustomerRequest) GetTimeoutInMinutes() *int {
	if o == nil {
		return nil
	}
	return o.TimeoutInMinutes
}

type CreateAccountingCustomerResponse struct {
	// Success
	AccountingCreateCustomerResponse *shared.AccountingCreateCustomerResponse
	ContentType                      string
	// The request made is not valid.
	ErrorMessage *shared.ErrorMessage
	StatusCode   int
	RawResponse  *http.Response
}

func (o *CreateAccountingCustomerResponse) GetAccountingCreateCustomerResponse() *shared.AccountingCreateCustomerResponse {
	if o == nil {
		return nil
	}
	return o.AccountingCreateCustomerResponse
}

func (o *CreateAccountingCustomerResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateAccountingCustomerResponse) GetErrorMessage() *shared.ErrorMessage {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateAccountingCustomerResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateAccountingCustomerResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
