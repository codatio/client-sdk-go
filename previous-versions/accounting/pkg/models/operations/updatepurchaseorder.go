// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/codatio/client-sdk-go/previous-versions/accounting/pkg/models/shared"
	"net/http"
)

type UpdatePurchaseOrderRequest struct {
	PurchaseOrder *shared.PurchaseOrder `request:"mediaType=application/json"`
	CompanyID     string                `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID  string                `pathParam:"style=simple,explode=false,name=connectionId"`
	// When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
	ForceUpdate      *bool  `queryParam:"style=form,explode=true,name=forceUpdate"`
	PurchaseOrderID  string `pathParam:"style=simple,explode=false,name=purchaseOrderId"`
	TimeoutInMinutes *int   `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

func (o *UpdatePurchaseOrderRequest) GetPurchaseOrder() *shared.PurchaseOrder {
	if o == nil {
		return nil
	}
	return o.PurchaseOrder
}

func (o *UpdatePurchaseOrderRequest) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *UpdatePurchaseOrderRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *UpdatePurchaseOrderRequest) GetForceUpdate() *bool {
	if o == nil {
		return nil
	}
	return o.ForceUpdate
}

func (o *UpdatePurchaseOrderRequest) GetPurchaseOrderID() string {
	if o == nil {
		return ""
	}
	return o.PurchaseOrderID
}

func (o *UpdatePurchaseOrderRequest) GetTimeoutInMinutes() *int {
	if o == nil {
		return nil
	}
	return o.TimeoutInMinutes
}

type UpdatePurchaseOrderResponse struct {
	ContentType string
	// The request made is not valid.
	ErrorMessage *shared.ErrorMessage
	StatusCode   int
	RawResponse  *http.Response
	// Success
	UpdatePurchaseOrderResponse *shared.UpdatePurchaseOrderResponse
}

func (o *UpdatePurchaseOrderResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdatePurchaseOrderResponse) GetErrorMessage() *shared.ErrorMessage {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *UpdatePurchaseOrderResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdatePurchaseOrderResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdatePurchaseOrderResponse) GetUpdatePurchaseOrderResponse() *shared.UpdatePurchaseOrderResponse {
	if o == nil {
		return nil
	}
	return o.UpdatePurchaseOrderResponse
}
