// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/codatio/client-sdk-go/previous-versions/accounting/pkg/utils"
	"github.com/ericlagergren/decimal"
)

// ItemReceipt - An item receipt records the receipt of items into a SMBs inventory. It links to a [purchase order](https://docs.codat.io/codat-api#/schemas/AccountingPurchaseOrder) and acts as an acknowledgement of items received.
//
// > **Language tip:** Item receipts may also be referred to as **Purchase receipt**, or **PO receiver inventory** in various accounting platforms.
//
// ADD SOMETHING ABOUT USAGE. E.g. a use case. or an example situation of where it can be used.
type ItemReceipt struct {
	// The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
	//
	// ## Unknown currencies
	//
	// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
	//
	// There are only a very small number of edge cases where this currency code is returned by the Codat system.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *decimal.Big `decimal:"number" json:"currencyRate,omitempty"`
	// Identifier for the item receipt, unique for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Array of Item Receipt line items.
	LineItems    []ItemReceiptLineItem `json:"lineItems,omitempty"`
	Metadata     *Metadata             `json:"metadata,omitempty"`
	ModifiedDate *string               `json:"modifiedDate,omitempty"`
	// Any private, company notes about the item receipt, such as payment information.
	Note              *string            `json:"note,omitempty"`
	PurchaseOrderRefs []PurchaseOrderRef `json:"purchaseOrderRefs,omitempty"`
	ReceivedDate      *string            `json:"receivedDate,omitempty"`
	// User-friendly reference for the item receipt.
	Reference          *string `json:"reference,omitempty"`
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current status of the item receipt.
	Status *ItemReceiptStatus `json:"status,omitempty"`
	// Total amount of the item receipt, excluding any taxes.
	SubTotal *decimal.Big `decimal:"number" json:"subTotal,omitempty"`
	// Supplemental data is additional data you can include in our standard data types.
	//
	// It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
	SupplementalData *SupplementalData `json:"supplementalData,omitempty"`
	// Reference to the supplier the record relates to.
	SupplierRef *SupplierRef `json:"supplierRef,omitempty"`
	// Amount of the item receipt, including tax.
	TotalAmount *decimal.Big `decimal:"number" json:"totalAmount,omitempty"`
}

func (i ItemReceipt) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *ItemReceipt) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ItemReceipt) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ItemReceipt) GetCurrencyRate() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *ItemReceipt) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ItemReceipt) GetLineItems() []ItemReceiptLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *ItemReceipt) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ItemReceipt) GetModifiedDate() *string {
	if o == nil {
		return nil
	}
	return o.ModifiedDate
}

func (o *ItemReceipt) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *ItemReceipt) GetPurchaseOrderRefs() []PurchaseOrderRef {
	if o == nil {
		return nil
	}
	return o.PurchaseOrderRefs
}

func (o *ItemReceipt) GetReceivedDate() *string {
	if o == nil {
		return nil
	}
	return o.ReceivedDate
}

func (o *ItemReceipt) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ItemReceipt) GetSourceModifiedDate() *string {
	if o == nil {
		return nil
	}
	return o.SourceModifiedDate
}

func (o *ItemReceipt) GetStatus() *ItemReceiptStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ItemReceipt) GetSubTotal() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *ItemReceipt) GetSupplementalData() *SupplementalData {
	if o == nil {
		return nil
	}
	return o.SupplementalData
}

func (o *ItemReceipt) GetSupplierRef() *SupplierRef {
	if o == nil {
		return nil
	}
	return o.SupplierRef
}

func (o *ItemReceipt) GetTotalAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}
