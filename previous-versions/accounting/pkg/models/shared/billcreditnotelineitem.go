// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/codatio/client-sdk-go/previous-versions/accounting/pkg/types"
	"github.com/ericlagergren/decimal"
)

// BillCreditNoteLineItemTracking - Categories, and a project and customer, against which the item is tracked.
type BillCreditNoteLineItemTracking struct {
	CategoryRefs []TrackingCategoryRef  `json:"categoryRefs"`
	CustomerRef  *AccountingCustomerRef `json:"customerRef,omitempty"`
	IsBilledTo   BilledToType           `json:"isBilledTo"`
	IsRebilledTo BilledToType           `json:"isRebilledTo"`
	ProjectRef   *ProjectRef            `json:"projectRef,omitempty"`
}

func (o *BillCreditNoteLineItemTracking) GetCategoryRefs() []TrackingCategoryRef {
	if o == nil {
		return []TrackingCategoryRef{}
	}
	return o.CategoryRefs
}

func (o *BillCreditNoteLineItemTracking) GetCustomerRef() *AccountingCustomerRef {
	if o == nil {
		return nil
	}
	return o.CustomerRef
}

func (o *BillCreditNoteLineItemTracking) GetIsBilledTo() BilledToType {
	if o == nil {
		return BilledToType("")
	}
	return o.IsBilledTo
}

func (o *BillCreditNoteLineItemTracking) GetIsRebilledTo() BilledToType {
	if o == nil {
		return BilledToType("")
	}
	return o.IsRebilledTo
}

func (o *BillCreditNoteLineItemTracking) GetProjectRef() *ProjectRef {
	if o == nil {
		return nil
	}
	return o.ProjectRef
}

type BillCreditNoteLineItem struct {
	// Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
	AccountRef *AccountRef `json:"accountRef,omitempty"`
	// Friendly name of each line item. For example, the goods or service for which credit has been received.
	Description *string `json:"description,omitempty"`
	// Value of any discounts applied.
	DiscountAmount *types.Decimal `json:"discountAmount,omitempty"`
	// Percentage rate of any discount applied to the line item.
	DiscountPercentage *types.Decimal `json:"discountPercentage,omitempty"`
	ItemRef            *ItemRef       `json:"itemRef,omitempty"`
	// Number of units of the goods or service for which credit has been received.
	Quantity types.Decimal `json:"quantity"`
	// Amount of credit associated with the line item, including discounts but excluding tax.
	SubTotal *types.Decimal `json:"subTotal,omitempty"`
	// Amount of tax associated with the line item.
	TaxAmount *types.Decimal `json:"taxAmount,omitempty"`
	// Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
	//
	// Found on:
	//
	// - Bill line items
	// - Bill Credit Note line items
	// - Credit Note line items
	// - Direct incomes line items
	// - Invoice line items
	// - Items
	TaxRateRef *TaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line item, including discounts and tax.
	TotalAmount *types.Decimal `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *BillCreditNoteLineItemTracking `json:"tracking,omitempty"`
	// Reference to the tracking categories to which the line item is linked.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	TrackingCategoryRefs []TrackingCategoryRef `json:"trackingCategoryRefs,omitempty"`
	// Unit price of the goods or service.
	UnitAmount types.Decimal `json:"unitAmount"`
}

func (o *BillCreditNoteLineItem) GetAccountRef() *AccountRef {
	if o == nil {
		return nil
	}
	return o.AccountRef
}

func (o *BillCreditNoteLineItem) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *BillCreditNoteLineItem) GetDiscountAmount() *types.Decimal {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *BillCreditNoteLineItem) GetDiscountPercentage() *types.Decimal {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *BillCreditNoteLineItem) GetItemRef() *ItemRef {
	if o == nil {
		return nil
	}
	return o.ItemRef
}

func (o *BillCreditNoteLineItem) GetQuantity() types.Decimal {
	if o == nil {
		return types.Decimal{Big: *(new(decimal.Big).SetFloat64(0.0))}
	}
	return o.Quantity
}

func (o *BillCreditNoteLineItem) GetSubTotal() *types.Decimal {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *BillCreditNoteLineItem) GetTaxAmount() *types.Decimal {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *BillCreditNoteLineItem) GetTaxRateRef() *TaxRateRef {
	if o == nil {
		return nil
	}
	return o.TaxRateRef
}

func (o *BillCreditNoteLineItem) GetTotalAmount() *types.Decimal {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *BillCreditNoteLineItem) GetTracking() *BillCreditNoteLineItemTracking {
	if o == nil {
		return nil
	}
	return o.Tracking
}

func (o *BillCreditNoteLineItem) GetTrackingCategoryRefs() []TrackingCategoryRef {
	if o == nil {
		return nil
	}
	return o.TrackingCategoryRefs
}

func (o *BillCreditNoteLineItem) GetUnitAmount() types.Decimal {
	if o == nil {
		return types.Decimal{Big: *(new(decimal.Big).SetFloat64(0.0))}
	}
	return o.UnitAmount
}
