// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatasetStatus - The current status of the dataset.
type DatasetStatus string

const (
	DatasetStatusInitial            DatasetStatus = "Initial"
	DatasetStatusQueued             DatasetStatus = "Queued"
	DatasetStatusFetching           DatasetStatus = "Fetching"
	DatasetStatusMapQueued          DatasetStatus = "MapQueued"
	DatasetStatusMapping            DatasetStatus = "Mapping"
	DatasetStatusComplete           DatasetStatus = "Complete"
	DatasetStatusFetchError         DatasetStatus = "FetchError"
	DatasetStatusMapError           DatasetStatus = "MapError"
	DatasetStatusInternalError      DatasetStatus = "InternalError"
	DatasetStatusProcessingQueued   DatasetStatus = "ProcessingQueued"
	DatasetStatusProcessing         DatasetStatus = "Processing"
	DatasetStatusProcessingError    DatasetStatus = "ProcessingError"
	DatasetStatusValidationQueued   DatasetStatus = "ValidationQueued"
	DatasetStatusValidating         DatasetStatus = "Validating"
	DatasetStatusValidationError    DatasetStatus = "ValidationError"
	DatasetStatusAuthError          DatasetStatus = "AuthError"
	DatasetStatusCancelled          DatasetStatus = "Cancelled"
	DatasetStatusNotSupported       DatasetStatus = "NotSupported"
	DatasetStatusRateLimitError     DatasetStatus = "RateLimitError"
	DatasetStatusPermissionsError   DatasetStatus = "PermissionsError"
	DatasetStatusPrerequisiteNotMet DatasetStatus = "PrerequisiteNotMet"
)

func (e DatasetStatus) ToPointer() *DatasetStatus {
	return &e
}

func (e *DatasetStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Initial":
		fallthrough
	case "Queued":
		fallthrough
	case "Fetching":
		fallthrough
	case "MapQueued":
		fallthrough
	case "Mapping":
		fallthrough
	case "Complete":
		fallthrough
	case "FetchError":
		fallthrough
	case "MapError":
		fallthrough
	case "InternalError":
		fallthrough
	case "ProcessingQueued":
		fallthrough
	case "Processing":
		fallthrough
	case "ProcessingError":
		fallthrough
	case "ValidationQueued":
		fallthrough
	case "Validating":
		fallthrough
	case "ValidationError":
		fallthrough
	case "AuthError":
		fallthrough
	case "Cancelled":
		fallthrough
	case "NotSupported":
		fallthrough
	case "RateLimitError":
		fallthrough
	case "PermissionsError":
		fallthrough
	case "PrerequisiteNotMet":
		*e = DatasetStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasetStatus: %v", v)
	}
}
