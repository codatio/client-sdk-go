// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// CashFlowStatementInput - > View the coverage for cash flow statement in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=cashFlowStatement" target="_blank">Data coverage explorer</a>.
//
// > **Operating activities only**
// >
// > Currently, the cash flow statement shows cash that flows into and out of the company from operating activities *only*. Operating activities generate cash from the sale of goods or services.
//
// ## Overview
//
// A cash flow statement is a financial report that records all cash that is received or spent by a company during a given period. It gives you a clearer picture of the companyâ€™s performance, and their ability to pay creditors and finance growth.
//
// > **Cash flow statement or balance sheet?**
// >
// > Look at the cash flow statement to understand a company's ability to pay its bills. Although the balance sheet may show healthy earnings at a specific point in time, the cash flow statement allows you to see whether the company is meeting its financial commitments, such as paying creditors or its employees.
type CashFlowStatementInput struct {
	// The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
	//
	// ## Unknown currencies
	//
	// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
	//
	// There are only a very small number of edge cases where this currency code is returned by the Codat system.
	Currency string `json:"currency"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	EarliestAvailableMonth *string `json:"earliestAvailableMonth,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	MostRecentAvailableMonth *string `json:"mostRecentAvailableMonth,omitempty"`
	// Accounting method used when aggregating the report data. In this case, `Cash`.
	ReportBasis ReportBasis `json:"reportBasis"`
	// Accounting method used to prepare the cash flow statement.
	ReportInput ReportInput `json:"reportInput"`
	// Array of cash flow statements.
	Reports []CashFlowStatement `json:"reports"`
}

func (o *CashFlowStatementInput) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CashFlowStatementInput) GetEarliestAvailableMonth() *string {
	if o == nil {
		return nil
	}
	return o.EarliestAvailableMonth
}

func (o *CashFlowStatementInput) GetMostRecentAvailableMonth() *string {
	if o == nil {
		return nil
	}
	return o.MostRecentAvailableMonth
}

func (o *CashFlowStatementInput) GetReportBasis() ReportBasis {
	if o == nil {
		return ReportBasis("")
	}
	return o.ReportBasis
}

func (o *CashFlowStatementInput) GetReportInput() ReportInput {
	if o == nil {
		return ReportInput("")
	}
	return o.ReportInput
}

func (o *CashFlowStatementInput) GetReports() []CashFlowStatement {
	if o == nil {
		return []CashFlowStatement{}
	}
	return o.Reports
}
