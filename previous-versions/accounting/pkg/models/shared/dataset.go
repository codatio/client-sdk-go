// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DatasetStatus string

const (
	DatasetStatusInitial            DatasetStatus = "Initial"
	DatasetStatusQueued             DatasetStatus = "Queued"
	DatasetStatusFetching           DatasetStatus = "Fetching"
	DatasetStatusMapQueued          DatasetStatus = "MapQueued"
	DatasetStatusMapping            DatasetStatus = "Mapping"
	DatasetStatusComplete           DatasetStatus = "Complete"
	DatasetStatusFetchError         DatasetStatus = "FetchError"
	DatasetStatusMapError           DatasetStatus = "MapError"
	DatasetStatusInternalError      DatasetStatus = "InternalError"
	DatasetStatusProcessingQueued   DatasetStatus = "ProcessingQueued"
	DatasetStatusProcessing         DatasetStatus = "Processing"
	DatasetStatusProcessingError    DatasetStatus = "ProcessingError"
	DatasetStatusValidationQueued   DatasetStatus = "ValidationQueued"
	DatasetStatusValidating         DatasetStatus = "Validating"
	DatasetStatusValidationError    DatasetStatus = "ValidationError"
	DatasetStatusAuthError          DatasetStatus = "AuthError"
	DatasetStatusCancelled          DatasetStatus = "Cancelled"
	DatasetStatusNotSupported       DatasetStatus = "NotSupported"
	DatasetStatusRateLimitError     DatasetStatus = "RateLimitError"
	DatasetStatusPermissionsError   DatasetStatus = "PermissionsError"
	DatasetStatusPrerequisiteNotMet DatasetStatus = "PrerequisiteNotMet"
)

func (e DatasetStatus) ToPointer() *DatasetStatus {
	return &e
}

func (e *DatasetStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Initial":
		fallthrough
	case "Queued":
		fallthrough
	case "Fetching":
		fallthrough
	case "MapQueued":
		fallthrough
	case "Mapping":
		fallthrough
	case "Complete":
		fallthrough
	case "FetchError":
		fallthrough
	case "MapError":
		fallthrough
	case "InternalError":
		fallthrough
	case "ProcessingQueued":
		fallthrough
	case "Processing":
		fallthrough
	case "ProcessingError":
		fallthrough
	case "ValidationQueued":
		fallthrough
	case "Validating":
		fallthrough
	case "ValidationError":
		fallthrough
	case "AuthError":
		fallthrough
	case "Cancelled":
		fallthrough
	case "NotSupported":
		fallthrough
	case "RateLimitError":
		fallthrough
	case "PermissionsError":
		fallthrough
	case "PrerequisiteNotMet":
		*e = DatasetStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasetStatus: %v", v)
	}
}

type Dataset struct {
	CompanyID string `json:"companyId"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Completed      *string `json:"completed,omitempty"`
	ConnectionID   string  `json:"connectionId"`
	DataType       *string `json:"dataType,omitempty"`
	DatasetLogsURL *string `json:"datasetLogsUrl,omitempty"`
	ErrorMessage   *string `json:"errorMessage,omitempty"`
	ID             string  `json:"id"`
	IsCompleted    bool    `json:"isCompleted"`
	IsErrored      bool    `json:"isErrored"`
	Progress       int     `json:"progress"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Requested                string        `json:"requested"`
	Status                   DatasetStatus `json:"status"`
	ValidationInformationURL *string       `json:"validationInformationUrl,omitempty"`
}

func (o *Dataset) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *Dataset) GetCompleted() *string {
	if o == nil {
		return nil
	}
	return o.Completed
}

func (o *Dataset) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *Dataset) GetDataType() *string {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *Dataset) GetDatasetLogsURL() *string {
	if o == nil {
		return nil
	}
	return o.DatasetLogsURL
}

func (o *Dataset) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *Dataset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Dataset) GetIsCompleted() bool {
	if o == nil {
		return false
	}
	return o.IsCompleted
}

func (o *Dataset) GetIsErrored() bool {
	if o == nil {
		return false
	}
	return o.IsErrored
}

func (o *Dataset) GetProgress() int {
	if o == nil {
		return 0
	}
	return o.Progress
}

func (o *Dataset) GetRequested() string {
	if o == nil {
		return ""
	}
	return o.Requested
}

func (o *Dataset) GetStatus() DatasetStatus {
	if o == nil {
		return DatasetStatus("")
	}
	return o.Status
}

func (o *Dataset) GetValidationInformationURL() *string {
	if o == nil {
		return nil
	}
	return o.ValidationInformationURL
}
