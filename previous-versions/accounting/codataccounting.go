// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package accounting

import (
	"context"
	"fmt"
	"github.com/codatio/client-sdk-go/previous-versions/accounting/internal/hooks"
	"github.com/codatio/client-sdk-go/previous-versions/accounting/pkg/models/shared"
	"github.com/codatio/client-sdk-go/previous-versions/accounting/pkg/retry"
	"github.com/codatio/client-sdk-go/previous-versions/accounting/pkg/utils"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Production
	"https://api.codat.io",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// CodatAccounting - Accounting API: > ### New to Codat?
// >
// > Our Accounting API reference is relevant only to our existing clients.
// > Please reach out to your Codat contact so that we can find the right product for you.
//
// A flexible API for pulling accounting data, normalized and aggregated from 20 accounting integrations.
//
// Standardize how you connect to your customersâ€™ accounting software. View, create, update, and delete data in the same way for all the leading accounting software.
//
// <!-- Start Codat Tags Table -->
// ## Endpoints
//
// | Endpoints | Description |
// | :- |:- |
// | Accounts | Access standardized Accounts from linked accounting software. |
// | Account transactions | Access standardized Account transactions from linked accounting software. |
// | Bank accounts | Access standardized Bank accounts from linked accounting software. |
// | Bank account transactions | Access standardized Bank transactions for bank accounts from linked accounting software. |
// | Bills | Access standardized Bills from linked accounting software. |
// | Bill credit notes | Access standardized Bill credit notes from linked accounting software. |
// | Bill payments | Access standardized Bill payments from linked accounting software. |
// | Credit notes | Access standardized Credit notes from linked accounting software. |
// | Customers | Access standardized Customers from linked accounting software. |
// | Direct costs | Access standardized Direct costs from linked accounting software. |
// | Direct incomes | Access standardized Direct incomes from linked accounting software. |
// | Company info | Access standardized Company info from linked accounting software. |
// | Invoices | Access standardized Invoices from linked accounting software. |
// | Item receipts | Access standardized Item receipts from linked accounting software. |
// | Items | Access standardized Items from linked accounting software. |
// | Journals | Access standardized Journals from linked accounting software. |
// | Journal entries | Access standardized Journal entries from linked accounting software. |
// | Payments | Access standardized Payments from linked accounting software. |
// | Payment methods | Access standardized Payment methods from linked accounting software. |
// | Purchase orders | Access standardized Purchase orders from linked accounting software. |
// | Sales orders | Access standardized Sales orders from linked accounting software. |
// | Suppliers | Access standardized Suppliers from linked accounting software. |
// | Tax rates | Access standardized Tax rates from linked accounting software. |
// | Tracking categories | Access standardized Tracking categories from linked accounting software. |
// | Transfers | Access standardized Transfers from linked accounting software. |
// | Reports | Access standardized Reports from linked accounting software. |
// <!-- End Codat Tags Table -->
//
// [Read more...](https://docs.codat.io/accounting-api/overview)
//
// [See our OpenAPI spec](https://github.com/codatio/oas)
type CodatAccounting struct {
	// Access standardized Account transactions from linked accounting software.
	AccountTransactions *AccountTransactions
	// Access standardized Bank accounts from linked accounting software.
	BankAccounts *BankAccounts
	// Access standardized Bank transactions for bank accounts from linked accounting software.
	BankAccountTransactions *BankAccountTransactions
	// Access standardized Bills from linked accounting software.
	Bills *Bills
	// Access standardized Customers from linked accounting software.
	Customers *Customers
	// Access standardized Direct costs from linked accounting software.
	DirectCosts *DirectCosts
	// Access standardized Direct incomes from linked accounting software.
	DirectIncomes *DirectIncomes
	// Access standardized Invoices from linked accounting software.
	Invoices *Invoices
	// Access standardized Item receipts from linked accounting software.
	ItemReceipts *ItemReceipts
	// Access standardized Payments from linked accounting software.
	Payments *Payments
	// Access standardized Purchase orders from linked accounting software.
	PurchaseOrders *PurchaseOrders
	// Access standardized Suppliers from linked accounting software.
	Suppliers *Suppliers
	// Access standardized Transfers from linked accounting software.
	Transfers *Transfers
	// Access standardized Bill credit notes from linked accounting software.
	BillCreditNotes *BillCreditNotes
	// Access standardized Bill payments from linked accounting software.
	BillPayments *BillPayments
	// Access standardized Accounts from linked accounting software.
	Accounts *Accounts
	// Access standardized Credit notes from linked accounting software.
	CreditNotes *CreditNotes
	// Access standardized Items from linked accounting software.
	Items *Items
	// Access standardized Journal entries from linked accounting software.
	JournalEntries *JournalEntries
	// Access standardized Journals from linked accounting software.
	Journals *Journals
	// Access standardized Reports from linked accounting software.
	Reports *Reports
	// Access standardized Company info from linked accounting software.
	CompanyInfo *CompanyInfo
	// Access standardized Payment methods from linked accounting software.
	PaymentMethods *PaymentMethods
	// Access standardized Sales orders from linked accounting software.
	SalesOrders *SalesOrders
	// Access standardized Tax rates from linked accounting software.
	TaxRates *TaxRates
	// Access standardized Tracking categories from linked accounting software.
	TrackingCategories *TrackingCategories

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*CodatAccounting)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *CodatAccounting) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *CodatAccounting) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *CodatAccounting) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *CodatAccounting) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *CodatAccounting) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (shared.Security, error)) SDKOption {
	return func(sdk *CodatAccounting) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *CodatAccounting) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *CodatAccounting) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *CodatAccounting {
	sdk := &CodatAccounting{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "3.0.0",
			SDKVersion:        "0.32.1",
			GenVersion:        "2.415.6",
			UserAgent:         "speakeasy-sdk/go 0.32.1 2.415.6 3.0.0 github.com/codatio/client-sdk-go/previous-versions/accounting",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.AccountTransactions = newAccountTransactions(sdk.sdkConfiguration)

	sdk.BankAccounts = newBankAccounts(sdk.sdkConfiguration)

	sdk.BankAccountTransactions = newBankAccountTransactions(sdk.sdkConfiguration)

	sdk.Bills = newBills(sdk.sdkConfiguration)

	sdk.Customers = newCustomers(sdk.sdkConfiguration)

	sdk.DirectCosts = newDirectCosts(sdk.sdkConfiguration)

	sdk.DirectIncomes = newDirectIncomes(sdk.sdkConfiguration)

	sdk.Invoices = newInvoices(sdk.sdkConfiguration)

	sdk.ItemReceipts = newItemReceipts(sdk.sdkConfiguration)

	sdk.Payments = newPayments(sdk.sdkConfiguration)

	sdk.PurchaseOrders = newPurchaseOrders(sdk.sdkConfiguration)

	sdk.Suppliers = newSuppliers(sdk.sdkConfiguration)

	sdk.Transfers = newTransfers(sdk.sdkConfiguration)

	sdk.BillCreditNotes = newBillCreditNotes(sdk.sdkConfiguration)

	sdk.BillPayments = newBillPayments(sdk.sdkConfiguration)

	sdk.Accounts = newAccounts(sdk.sdkConfiguration)

	sdk.CreditNotes = newCreditNotes(sdk.sdkConfiguration)

	sdk.Items = newItems(sdk.sdkConfiguration)

	sdk.JournalEntries = newJournalEntries(sdk.sdkConfiguration)

	sdk.Journals = newJournals(sdk.sdkConfiguration)

	sdk.Reports = newReports(sdk.sdkConfiguration)

	sdk.CompanyInfo = newCompanyInfo(sdk.sdkConfiguration)

	sdk.PaymentMethods = newPaymentMethods(sdk.sdkConfiguration)

	sdk.SalesOrders = newSalesOrders(sdk.sdkConfiguration)

	sdk.TaxRates = newTaxRates(sdk.sdkConfiguration)

	sdk.TrackingCategories = newTrackingCategories(sdk.sdkConfiguration)

	return sdk
}
