// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/codatio/client-sdk-go/sync-for-payables/v3/pkg/utils"
	"github.com/ericlagergren/decimal"
)

// AccountReference - Reference to the account to which the line item is linked.
type AccountReference struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

func (o *AccountReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountReference) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// TaxRateReference - Reference to the tax rate to which the line item is linked.
type TaxRateReference struct {
	// Applicable tax rate.
	EffectiveTaxRate *decimal.Big `decimal:"number" json:"effectiveTaxRate,omitempty"`
	// Unique identifier for the tax rate in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Name of the tax rate in the accounting platform.
	Name *string `json:"name,omitempty"`
}

func (t TaxRateReference) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaxRateReference) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TaxRateReference) GetEffectiveTaxRate() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.EffectiveTaxRate
}

func (o *TaxRateReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TaxRateReference) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type BillLineItem struct {
	// Reference to the account to which the line item is linked.
	AccountRef *AccountReference `json:"accountRef,omitempty"`
	// Friendly name of the goods or services received.
	Description *string `json:"description,omitempty"`
	// Number of units of goods or services received.
	Quantity *decimal.Big `decimal:"number" json:"quantity"`
	// Amount of tax applied to the line item.
	TaxAmount *decimal.Big `decimal:"number" json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *TaxRateReference `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *decimal.Big `decimal:"number" json:"totalAmount,omitempty"`
	// Unit price of the goods or service.
	UnitAmount *decimal.Big `decimal:"number" json:"unitAmount,omitempty"`
}

func (b BillLineItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BillLineItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BillLineItem) GetAccountRef() *AccountReference {
	if o == nil {
		return nil
	}
	return o.AccountRef
}

func (o *BillLineItem) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *BillLineItem) GetQuantity() *decimal.Big {
	if o == nil {
		return new(decimal.Big).SetFloat64(0.0)
	}
	return o.Quantity
}

func (o *BillLineItem) GetTaxAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *BillLineItem) GetTaxRateRef() *TaxRateReference {
	if o == nil {
		return nil
	}
	return o.TaxRateRef
}

func (o *BillLineItem) GetTotalAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *BillLineItem) GetUnitAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.UnitAmount
}
