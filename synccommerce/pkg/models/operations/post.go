// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type PostRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
}

type Post200ApplicationJSONFeesAccountsAccountOptions struct {
	// Classification of the type of G/L account.
	Classification *string `json:"classification,omitempty"`
	// Identifier for the account, unique for the company.
	ID *string `json:"id,omitempty"`
	// Name of the account.
	Name *string `json:"name,omitempty"`
	// Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
	NominalCode *string `json:"nominalCode,omitempty"`
}

// Post200ApplicationJSONFeesAccounts - G/L account object for configuration.
type Post200ApplicationJSONFeesAccounts struct {
	// Object containing account options.
	AccountOptions []Post200ApplicationJSONFeesAccountsAccountOptions `json:"accountOptions,omitempty"`
	// Descriprtive text for sales configuration section.
	DescriptionText *string `json:"descriptionText,omitempty"`
	// Label text for sales configuration section.
	LabelText *string `json:"labelText,omitempty"`
	// Required section to be configured for sync.
	Required *bool `json:"required,omitempty"`
	// Selected account id from the list of available accounts.
	SelectedAccountID *string `json:"selectedAccountId,omitempty"`
}

type Post200ApplicationJSONFeesFeesSupplierSupplierOptions struct {
	// Unique identifier for the option.
	ID *string `json:"id,omitempty"`
	// Name value of the option.
	Name *string `json:"name,omitempty"`
}

type Post200ApplicationJSONFeesFeesSupplier struct {
	// Selected supplier id from the list of supplier records on the accounting software.
	SelectedSupplierID *string `json:"selectedSupplierId,omitempty"`
	// List of supplier options from the list of supplier records on the accounting software.
	SupplierOptions []Post200ApplicationJSONFeesFeesSupplierSupplierOptions `json:"supplierOptions,omitempty"`
}

type Post200ApplicationJSONFees struct {
	Accounts     map[string]Post200ApplicationJSONFeesAccounts `json:"accounts,omitempty"`
	FeesSupplier *Post200ApplicationJSONFeesFeesSupplier       `json:"feesSupplier,omitempty"`
	// Boolean indicator to enable syncing fees.
	SyncFees *bool `json:"syncFees,omitempty"`
}

type Post200ApplicationJSONNewPaymentsAccountsAccountOptions struct {
	// Classification of the type of G/L account.
	Classification *string `json:"classification,omitempty"`
	// Identifier for the account, unique for the company.
	ID *string `json:"id,omitempty"`
	// Name of the account.
	Name *string `json:"name,omitempty"`
	// Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
	NominalCode *string `json:"nominalCode,omitempty"`
}

// Post200ApplicationJSONNewPaymentsAccounts - G/L account object for configuration.
type Post200ApplicationJSONNewPaymentsAccounts struct {
	// Object containing account options.
	AccountOptions []Post200ApplicationJSONNewPaymentsAccountsAccountOptions `json:"accountOptions,omitempty"`
	// Descriprtive text for sales configuration section.
	DescriptionText *string `json:"descriptionText,omitempty"`
	// Label text for sales configuration section.
	LabelText *string `json:"labelText,omitempty"`
	// Required section to be configured for sync.
	Required *bool `json:"required,omitempty"`
	// Selected account id from the list of available accounts.
	SelectedAccountID *string `json:"selectedAccountId,omitempty"`
}

type Post200ApplicationJSONNewPayments struct {
	Accounts map[string]Post200ApplicationJSONNewPaymentsAccounts `json:"accounts,omitempty"`
	// Boolean indicator for syncing payments.
	SyncPayments *bool `json:"syncPayments,omitempty"`
}

type Post200ApplicationJSONPaymentsAccountsAccountOptions struct {
	// Classification of the type of G/L account.
	Classification *string `json:"classification,omitempty"`
	// Identifier for the account, unique for the company.
	ID *string `json:"id,omitempty"`
	// Name of the account.
	Name *string `json:"name,omitempty"`
	// Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
	NominalCode *string `json:"nominalCode,omitempty"`
}

// Post200ApplicationJSONPaymentsAccounts - G/L account object for configuration.
type Post200ApplicationJSONPaymentsAccounts struct {
	// Object containing account options.
	AccountOptions []Post200ApplicationJSONPaymentsAccountsAccountOptions `json:"accountOptions,omitempty"`
	// Descriprtive text for sales configuration section.
	DescriptionText *string `json:"descriptionText,omitempty"`
	// Label text for sales configuration section.
	LabelText *string `json:"labelText,omitempty"`
	// Required section to be configured for sync.
	Required *bool `json:"required,omitempty"`
	// Selected account id from the list of available accounts.
	SelectedAccountID *string `json:"selectedAccountId,omitempty"`
}

type Post200ApplicationJSONPayments struct {
	Accounts map[string]Post200ApplicationJSONPaymentsAccounts `json:"accounts,omitempty"`
	// Boolean indicator for syncing sales.
	SyncPayments *bool `json:"syncPayments,omitempty"`
}

type Post200ApplicationJSONSalesAccountsAccountOptions struct {
	// Classification of the type of G/L account.
	Classification *string `json:"classification,omitempty"`
	// Identifier for the account, unique for the company.
	ID *string `json:"id,omitempty"`
	// Name of the account.
	Name *string `json:"name,omitempty"`
	// Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
	NominalCode *string `json:"nominalCode,omitempty"`
}

// Post200ApplicationJSONSalesAccounts - G/L account object for configuration.
type Post200ApplicationJSONSalesAccounts struct {
	// Object containing account options.
	AccountOptions []Post200ApplicationJSONSalesAccountsAccountOptions `json:"accountOptions,omitempty"`
	// Descriprtive text for sales configuration section.
	DescriptionText *string `json:"descriptionText,omitempty"`
	// Label text for sales configuration section.
	LabelText *string `json:"labelText,omitempty"`
	// Required section to be configured for sync.
	Required *bool `json:"required,omitempty"`
	// Selected account id from the list of available accounts.
	SelectedAccountID *string `json:"selectedAccountId,omitempty"`
}

type Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLevel struct {
	// Options for grouping sales.
	GroupByOptions []string `json:"groupByOptions,omitempty"`
	// Selected array of grouping options.
	SelectedGroupByOptions []string `json:"selectedGroupByOptions,omitempty"`
}

type Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLineLevel struct {
	// Options for grouping on invoice lines.
	GroupByOptions []string `json:"groupByOptions,omitempty"`
	// Invoice line level selection.
	SelectedGroupByOptions []string `json:"selectedGroupByOptions,omitempty"`
}

type Post200ApplicationJSONSalesGroupingGroupingLevels struct {
	InvoiceLevel     *Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLevel     `json:"invoiceLevel,omitempty"`
	InvoiceLineLevel *Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLineLevel `json:"invoiceLineLevel,omitempty"`
}

type Post200ApplicationJSONSalesGroupingGroupingPeriod struct {
	// Array of grouping period options.
	GroupingPeriodOptions []string `json:"groupingPeriodOptions,omitempty"`
	// Grouping period i.e. Daily sales.
	SelectedGroupingPeriod *string `json:"selectedGroupingPeriod,omitempty"`
}

type Post200ApplicationJSONSalesGrouping struct {
	GroupingLevels *Post200ApplicationJSONSalesGroupingGroupingLevels `json:"groupingLevels,omitempty"`
	GroupingPeriod *Post200ApplicationJSONSalesGroupingGroupingPeriod `json:"groupingPeriod,omitempty"`
}

type Post200ApplicationJSONSalesInvoiceStatus struct {
	// Options for invoice statuses.
	InvoiceStatusOptions []string `json:"invoiceStatusOptions,omitempty"`
	// Selected option for invoice status for invoice to be synced.
	SelectedInvoiceStatus *string `json:"selectedInvoiceStatus,omitempty"`
}

type Post200ApplicationJSONSalesNewTaxRatesAccountingTaxRateOptions struct {
	// Unique identifier for the option.
	ID *string `json:"id,omitempty"`
	// Name value of the option.
	Name *string `json:"name,omitempty"`
}

type Post200ApplicationJSONSalesNewTaxRatesCommerceTaxRateOptions struct {
	// Unique identifier for the option.
	ID *string `json:"id,omitempty"`
	// Name value of the option.
	Name *string `json:"name,omitempty"`
}

type Post200ApplicationJSONSalesNewTaxRatesDefaultZeroTaxRateOptions struct {
	// Unique identifier for the option.
	ID *string `json:"id,omitempty"`
	// Name value of the option.
	Name *string `json:"name,omitempty"`
}

type Post200ApplicationJSONSalesNewTaxRatesTaxRateMappings struct {
	// Selected tax rate id from the list of tax rates on the accounting software.
	SelectedAccountingTaxRateID *string `json:"selectedAccountingTaxRateId,omitempty"`
	// Selected tax component id from the list of tax components on the commerce software.
	SelectedCommerceTaxRateIds []string `json:"selectedCommerceTaxRateIds,omitempty"`
}

type Post200ApplicationJSONSalesNewTaxRates struct {
	// Array of accounting tax rate options.
	AccountingTaxRateOptions []Post200ApplicationJSONSalesNewTaxRatesAccountingTaxRateOptions `json:"accountingTaxRateOptions,omitempty"`
	// Array of tax component options.
	CommerceTaxRateOptions []Post200ApplicationJSONSalesNewTaxRatesCommerceTaxRateOptions `json:"commerceTaxRateOptions,omitempty"`
	// Default zero tax rate selected for sync.
	DefaultZeroTaxRateOptions []Post200ApplicationJSONSalesNewTaxRatesDefaultZeroTaxRateOptions `json:"defaultZeroTaxRateOptions,omitempty"`
	// Default tax rate selected for sync.
	SelectedDefaultZeroTaxRateID *string `json:"selectedDefaultZeroTaxRateId,omitempty"`
	// Array of tax component to rate mapppings.
	TaxRateMappings []Post200ApplicationJSONSalesNewTaxRatesTaxRateMappings `json:"taxRateMappings,omitempty"`
}

type Post200ApplicationJSONSalesSalesCustomerCustomerOptions struct {
	// Unique identifier for the option.
	ID *string `json:"id,omitempty"`
	// Name value of the option.
	Name *string `json:"name,omitempty"`
}

type Post200ApplicationJSONSalesSalesCustomer struct {
	// List of customer options from the list of customer records on the accounting software.
	CustomerOptions []Post200ApplicationJSONSalesSalesCustomerCustomerOptions `json:"customerOptions,omitempty"`
	// Selected customer id from the list of customer records on the accounting software.
	SelectedCustomerID *string `json:"selectedCustomerId,omitempty"`
}

type Post200ApplicationJSONSalesTaxRatesTaxRateOptions struct {
	// Unique identifier for the option.
	ID *string `json:"id,omitempty"`
	// Name value of the option.
	Name *string `json:"name,omitempty"`
}

type Post200ApplicationJSONSalesTaxRates struct {
	// Selected tax rate id from the list of tax rates on the accounting software.
	SelectedTaxRateID *string `json:"selectedTaxRateId,omitempty"`
	// Array of tax rate options object.
	TaxRateOptions []Post200ApplicationJSONSalesTaxRatesTaxRateOptions `json:"taxRateOptions,omitempty"`
}

type Post200ApplicationJSONSales struct {
	Accounts      map[string]Post200ApplicationJSONSalesAccounts `json:"accounts,omitempty"`
	Grouping      *Post200ApplicationJSONSalesGrouping           `json:"grouping,omitempty"`
	InvoiceStatus *Post200ApplicationJSONSalesInvoiceStatus      `json:"invoiceStatus,omitempty"`
	NewTaxRates   *Post200ApplicationJSONSalesNewTaxRates        `json:"newTaxRates,omitempty"`
	SalesCustomer *Post200ApplicationJSONSalesSalesCustomer      `json:"salesCustomer,omitempty"`
	// Boolean indicator for syncing sales.
	SyncSales *bool                                          `json:"syncSales,omitempty"`
	TaxRates  map[string]Post200ApplicationJSONSalesTaxRates `json:"taxRates,omitempty"`
}

// Post200ApplicationJSON - Success
type Post200ApplicationJSON struct {
	Fees        *Post200ApplicationJSONFees        `json:"fees,omitempty"`
	NewPayments *Post200ApplicationJSONNewPayments `json:"newPayments,omitempty"`
	Payments    *Post200ApplicationJSONPayments    `json:"payments,omitempty"`
	Sales       *Post200ApplicationJSONSales       `json:"sales,omitempty"`
}

type PostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	Post200ApplicationJSONObject *Post200ApplicationJSON
}
