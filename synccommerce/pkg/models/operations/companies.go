// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type CompaniesRequest struct {
	// Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Page number. [Read more](https://docs.codat.io/using-the-api/paging).
	Page int `queryParam:"style=form,explode=true,name=page"`
	// Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type Companies200ApplicationJSONLinksCurrent struct {
	Href *string `json:"href,omitempty"`
}

type Companies200ApplicationJSONLinksNext struct {
	Href *string `json:"href,omitempty"`
}

type Companies200ApplicationJSONLinksPrevious struct {
	Href *string `json:"href,omitempty"`
}

type Companies200ApplicationJSONLinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type Companies200ApplicationJSONLinks struct {
	Current  *Companies200ApplicationJSONLinksCurrent  `json:"current,omitempty"`
	Next     *Companies200ApplicationJSONLinksNext     `json:"next,omitempty"`
	Previous *Companies200ApplicationJSONLinksPrevious `json:"previous,omitempty"`
	Self     *Companies200ApplicationJSONLinksSelf     `json:"self,omitempty"`
}

type Companies200ApplicationJSONResultsDataConnectionsDataConnectionErrors struct {
	// Message on the data connection error.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as strings.
	ErroredOnUtc *time.Time `json:"erroredOnUtc,omitempty"`
	// Codat's error status code for the connection error.
	StatusCode *string `json:"statusCode,omitempty"`
	// Descriptive text for the data connection error.
	StatusText *string `json:"statusText,omitempty"`
}

// Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum - The type of platform of the connection.
type Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum string

const (
	Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnumAccounting Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum = "Accounting"
	Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnumBanking    Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum = "Banking"
	Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnumCommerce   Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum = "Commerce"
	Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnumOther      Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum = "Other"
	Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnumUnknown    Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum = "Unknown"
)

// Companies200ApplicationJSONResultsDataConnectionsStatusEnum - The current authorization status of the data connection.
type Companies200ApplicationJSONResultsDataConnectionsStatusEnum string

const (
	Companies200ApplicationJSONResultsDataConnectionsStatusEnumPendingAuth  Companies200ApplicationJSONResultsDataConnectionsStatusEnum = "PendingAuth"
	Companies200ApplicationJSONResultsDataConnectionsStatusEnumLinked       Companies200ApplicationJSONResultsDataConnectionsStatusEnum = "Linked"
	Companies200ApplicationJSONResultsDataConnectionsStatusEnumUnlinked     Companies200ApplicationJSONResultsDataConnectionsStatusEnum = "Unlinked"
	Companies200ApplicationJSONResultsDataConnectionsStatusEnumDeauthorized Companies200ApplicationJSONResultsDataConnectionsStatusEnum = "Deauthorized"
)

type Companies200ApplicationJSONResultsDataConnections struct {
	// In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
	Created *time.Time `json:"created,omitempty"`
	// Array containing errors on data connections.
	DataConnectionErrors []Companies200ApplicationJSONResultsDataConnectionsDataConnectionErrors `json:"dataConnectionErrors,omitempty"`
	// Unique identifier for a company's data connection.
	ID string `json:"id"`
	// A Codat ID representing the integration.
	IntegrationID string `json:"integrationId"`
	// In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
	LastSync *time.Time `json:"lastSync,omitempty"`
	// Whitelabelled link site URL for the user link flow.
	LinkURL string `json:"linkUrl"`
	// The name of the platform to which the data connection is established.
	PlatformName string `json:"platformName"`
	// A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, sourceId is associated with a specific bank and has a many-to-one relationship with the integrationId.
	SourceID string `json:"sourceId"`
	// The type of platform of the connection.
	SourceType *Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum `json:"sourceType,omitempty"`
	// The current authorization status of the data connection.
	Status *Companies200ApplicationJSONResultsDataConnectionsStatusEnum `json:"status,omitempty"`
}

type Companies200ApplicationJSONResults struct {
	// The date the data connection was established.
	Created *time.Time `json:"created,omitempty"`
	// Name of the Codat user who created the data connection.
	CreatedByUserName *string                                             `json:"createdByUserName,omitempty"`
	DataConnections   []Companies200ApplicationJSONResultsDataConnections `json:"dataConnections"`
	// Unique identifier for your SMB in Codat.
	ID string `json:"id"`
	// The date time for the previous sync operation.
	LastSync *time.Time `json:"lastSync,omitempty"`
	// The name of the company.
	Name string `json:"name"`
	// Additional information about the company. This can be used to store foreign IDs, references, etc.
	Platform string `json:"platform"`
	// The redirect Link URL enabling the customer to start their auth flow journey for the company.
	Redirect string `json:"redirect"`
}

// Companies200ApplicationJSON - Used to represent what can be returned by an endpoint that supports paging.
// Usable with the [ProducesResponseType] attribute on a controller action.
type Companies200ApplicationJSON struct {
	Links        *Companies200ApplicationJSONLinks    `json:"_links,omitempty"`
	PageNumber   *int                                 `json:"pageNumber,omitempty"`
	PageSize     *int                                 `json:"pageSize,omitempty"`
	Results      []Companies200ApplicationJSONResults `json:"results,omitempty"`
	TotalResults *int                                 `json:"totalResults,omitempty"`
}

type CompaniesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	Companies200ApplicationJSONObject *Companies200ApplicationJSON
}
