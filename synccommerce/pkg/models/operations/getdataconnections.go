// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type GetDataconnectionsRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Page number. [Read more](https://docs.codat.io/using-the-api/paging).
	Page int `queryParam:"style=form,explode=true,name=page"`
	// Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type GetDataconnections200ApplicationJSONLinksCurrent struct {
	Href *string `json:"href,omitempty"`
}

type GetDataconnections200ApplicationJSONLinksNext struct {
	Href *string `json:"href,omitempty"`
}

type GetDataconnections200ApplicationJSONLinksPrevious struct {
	Href *string `json:"href,omitempty"`
}

type GetDataconnections200ApplicationJSONLinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetDataconnections200ApplicationJSONLinks struct {
	Current  *GetDataconnections200ApplicationJSONLinksCurrent  `json:"current,omitempty"`
	Next     *GetDataconnections200ApplicationJSONLinksNext     `json:"next,omitempty"`
	Previous *GetDataconnections200ApplicationJSONLinksPrevious `json:"previous,omitempty"`
	Self     *GetDataconnections200ApplicationJSONLinksSelf     `json:"self,omitempty"`
}

type GetDataconnections200ApplicationJSONResultsDataConnectionErrors struct {
	// Message on the data connection error.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as strings.
	ErroredOnUtc *time.Time `json:"erroredOnUtc,omitempty"`
	// Codat's error status code for the connection error.
	StatusCode *string `json:"statusCode,omitempty"`
	// Descriptive text for the data connection error.
	StatusText *string `json:"statusText,omitempty"`
}

// GetDataconnections200ApplicationJSONResultsSourceTypeEnum - The type of platform of the connection.
type GetDataconnections200ApplicationJSONResultsSourceTypeEnum string

const (
	GetDataconnections200ApplicationJSONResultsSourceTypeEnumAccounting GetDataconnections200ApplicationJSONResultsSourceTypeEnum = "Accounting"
	GetDataconnections200ApplicationJSONResultsSourceTypeEnumBanking    GetDataconnections200ApplicationJSONResultsSourceTypeEnum = "Banking"
	GetDataconnections200ApplicationJSONResultsSourceTypeEnumCommerce   GetDataconnections200ApplicationJSONResultsSourceTypeEnum = "Commerce"
	GetDataconnections200ApplicationJSONResultsSourceTypeEnumOther      GetDataconnections200ApplicationJSONResultsSourceTypeEnum = "Other"
	GetDataconnections200ApplicationJSONResultsSourceTypeEnumUnknown    GetDataconnections200ApplicationJSONResultsSourceTypeEnum = "Unknown"
)

// GetDataconnections200ApplicationJSONResultsStatusEnum - The current authorization status of the data connection.
type GetDataconnections200ApplicationJSONResultsStatusEnum string

const (
	GetDataconnections200ApplicationJSONResultsStatusEnumPendingAuth  GetDataconnections200ApplicationJSONResultsStatusEnum = "PendingAuth"
	GetDataconnections200ApplicationJSONResultsStatusEnumLinked       GetDataconnections200ApplicationJSONResultsStatusEnum = "Linked"
	GetDataconnections200ApplicationJSONResultsStatusEnumUnlinked     GetDataconnections200ApplicationJSONResultsStatusEnum = "Unlinked"
	GetDataconnections200ApplicationJSONResultsStatusEnumDeauthorized GetDataconnections200ApplicationJSONResultsStatusEnum = "Deauthorized"
)

type GetDataconnections200ApplicationJSONResults struct {
	// In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
	Created *time.Time `json:"created,omitempty"`
	// Array containing errors on data connections.
	DataConnectionErrors []GetDataconnections200ApplicationJSONResultsDataConnectionErrors `json:"dataConnectionErrors,omitempty"`
	// Unique identifier for a company's data connection.
	ID string `json:"id"`
	// A Codat ID representing the integration.
	IntegrationID string `json:"integrationId"`
	// In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
	LastSync *time.Time `json:"lastSync,omitempty"`
	// Whitelabelled link site URL for the user link flow.
	LinkURL string `json:"linkUrl"`
	// The name of the platform to which the data connection is established.
	PlatformName string `json:"platformName"`
	// A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, sourceId is associated with a specific bank and has a many-to-one relationship with the integrationId.
	SourceID string `json:"sourceId"`
	// The type of platform of the connection.
	SourceType *GetDataconnections200ApplicationJSONResultsSourceTypeEnum `json:"sourceType,omitempty"`
	// The current authorization status of the data connection.
	Status *GetDataconnections200ApplicationJSONResultsStatusEnum `json:"status,omitempty"`
}

// GetDataconnections200ApplicationJSON - Success
type GetDataconnections200ApplicationJSON struct {
	Links *GetDataconnections200ApplicationJSONLinks `json:"_links,omitempty"`
	// Page number.
	PageNumber *int `json:"pageNumber,omitempty"`
	// Specified number of results.
	PageSize *int `json:"pageSize,omitempty"`
	// Array of data connection objects.
	Results []GetDataconnections200ApplicationJSONResults `json:"results,omitempty"`
	// Total number of records in the result set.
	TotalResults *int `json:"totalResults,omitempty"`
}

type GetDataconnectionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetDataconnections200ApplicationJSONObject *GetDataconnections200ApplicationJSON
}
