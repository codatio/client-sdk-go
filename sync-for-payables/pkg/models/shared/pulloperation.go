// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PullOperationStatus - The current status of the pull operation.
type PullOperationStatus string

const (
	PullOperationStatusInitial            PullOperationStatus = "Initial"
	PullOperationStatusQueued             PullOperationStatus = "Queued"
	PullOperationStatusFetching           PullOperationStatus = "Fetching"
	PullOperationStatusMapQueued          PullOperationStatus = "MapQueued"
	PullOperationStatusMapping            PullOperationStatus = "Mapping"
	PullOperationStatusComplete           PullOperationStatus = "Complete"
	PullOperationStatusFetchError         PullOperationStatus = "FetchError"
	PullOperationStatusMapError           PullOperationStatus = "MapError"
	PullOperationStatusInternalError      PullOperationStatus = "InternalError"
	PullOperationStatusProcessingQueued   PullOperationStatus = "ProcessingQueued"
	PullOperationStatusProcessing         PullOperationStatus = "Processing"
	PullOperationStatusProcessingError    PullOperationStatus = "ProcessingError"
	PullOperationStatusValidationQueued   PullOperationStatus = "ValidationQueued"
	PullOperationStatusValidating         PullOperationStatus = "Validating"
	PullOperationStatusValidationError    PullOperationStatus = "ValidationError"
	PullOperationStatusAuthError          PullOperationStatus = "AuthError"
	PullOperationStatusCancelled          PullOperationStatus = "Cancelled"
	PullOperationStatusRouting            PullOperationStatus = "Routing"
	PullOperationStatusRoutingError       PullOperationStatus = "RoutingError"
	PullOperationStatusNotSupported       PullOperationStatus = "NotSupported"
	PullOperationStatusRateLimitError     PullOperationStatus = "RateLimitError"
	PullOperationStatusPermissionsError   PullOperationStatus = "PermissionsError"
	PullOperationStatusPrerequisiteNotMet PullOperationStatus = "PrerequisiteNotMet"
)

func (e PullOperationStatus) ToPointer() *PullOperationStatus {
	return &e
}

func (e *PullOperationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Initial":
		fallthrough
	case "Queued":
		fallthrough
	case "Fetching":
		fallthrough
	case "MapQueued":
		fallthrough
	case "Mapping":
		fallthrough
	case "Complete":
		fallthrough
	case "FetchError":
		fallthrough
	case "MapError":
		fallthrough
	case "InternalError":
		fallthrough
	case "ProcessingQueued":
		fallthrough
	case "Processing":
		fallthrough
	case "ProcessingError":
		fallthrough
	case "ValidationQueued":
		fallthrough
	case "Validating":
		fallthrough
	case "ValidationError":
		fallthrough
	case "AuthError":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Routing":
		fallthrough
	case "RoutingError":
		fallthrough
	case "NotSupported":
		fallthrough
	case "RateLimitError":
		fallthrough
	case "PermissionsError":
		fallthrough
	case "PrerequisiteNotMet":
		*e = PullOperationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullOperationStatus: %v", v)
	}
}

// PullOperation - Information about a queued, in progress or completed pull operation.
// *Formally called `dataset`*
type PullOperation struct {
	// Unique identifier of the company associated to this pull operation.
	CompanyID string `json:"companyId"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Completed *string `json:"completed,omitempty"`
	// Unique identifier of the connection associated to this pull operation.
	ConnectionID string `json:"connectionId"`
	// Available Data types
	DataType DataType `json:"dataType"`
	// A message about a transient or persistent error.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Unique identifier of the pull operation.
	ID string `json:"id"`
	// `True` if the pull operation completed successfully.
	IsCompleted bool `json:"isCompleted"`
	// `True` if the pull operation entered an error state.
	IsErrored bool `json:"isErrored"`
	// An integer signifying the progress of the pull operation.
	Progress int64 `json:"progress"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Requested string `json:"requested"`
	// The current status of the pull operation.
	Status PullOperationStatus `json:"status"`
}

func (o *PullOperation) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *PullOperation) GetCompleted() *string {
	if o == nil {
		return nil
	}
	return o.Completed
}

func (o *PullOperation) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *PullOperation) GetDataType() DataType {
	if o == nil {
		return DataType("")
	}
	return o.DataType
}

func (o *PullOperation) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *PullOperation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PullOperation) GetIsCompleted() bool {
	if o == nil {
		return false
	}
	return o.IsCompleted
}

func (o *PullOperation) GetIsErrored() bool {
	if o == nil {
		return false
	}
	return o.IsErrored
}

func (o *PullOperation) GetProgress() int64 {
	if o == nil {
		return 0
	}
	return o.Progress
}

func (o *PullOperation) GetRequested() string {
	if o == nil {
		return ""
	}
	return o.Requested
}

func (o *PullOperation) GetStatus() PullOperationStatus {
	if o == nil {
		return PullOperationStatus("")
	}
	return o.Status
}
