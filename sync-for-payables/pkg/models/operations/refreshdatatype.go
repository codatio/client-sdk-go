// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/codatio/client-sdk-go/sync-for-payables/v2/pkg/models/shared"
	"net/http"
)

type RefreshDataTypeRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Optionally, provide a data connection id to only queue pull operations on that connection.
	ConnectionID *string `queryParam:"style=form,explode=true,name=connectionId"`
	// The key of a Codat data type
	DataType shared.DataType `pathParam:"style=simple,explode=false,name=dataType"`
}

func (o *RefreshDataTypeRequest) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *RefreshDataTypeRequest) GetConnectionID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *RefreshDataTypeRequest) GetDataType() shared.DataType {
	if o == nil {
		return shared.DataType("")
	}
	return o.DataType
}

type RefreshDataTypeResponse struct {
	ContentType string
	// Your API request was not properly authorized.
	ErrorMessage *shared.ErrorMessage
	// OK
	PullOperation *shared.PullOperation
	StatusCode    int
	RawResponse   *http.Response
}

func (o *RefreshDataTypeResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RefreshDataTypeResponse) GetErrorMessage() *shared.ErrorMessage {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *RefreshDataTypeResponse) GetPullOperation() *shared.PullOperation {
	if o == nil {
		return nil
	}
	return o.PullOperation
}

func (o *RefreshDataTypeResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RefreshDataTypeResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
