// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/codatio/client-sdk-go/sync-for-expenses/v4/pkg/utils"
)

// TrackingRefDataType - The type of the linked reference
type TrackingRefDataType string

const (
	TrackingRefDataTypeTrackingCategories TrackingRefDataType = "trackingCategories"
	TrackingRefDataTypeCustomers          TrackingRefDataType = "customers"
)

func (e TrackingRefDataType) ToPointer() *TrackingRefDataType {
	return &e
}

func (e *TrackingRefDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trackingCategories":
		fallthrough
	case "customers":
		*e = TrackingRefDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackingRefDataType: %v", v)
	}
}

type TrackingRef struct {
	// The type of the linked reference
	DataType *TrackingRefDataType `default:"trackingCategories" json:"dataType"`
	// Unique identifier of the linked reference from mapping options or the unique identifier of the linked customer.
	ID *string `json:"id,omitempty"`
}

func (t TrackingRef) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrackingRef) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TrackingRef) GetDataType() *TrackingRefDataType {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *TrackingRef) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}
