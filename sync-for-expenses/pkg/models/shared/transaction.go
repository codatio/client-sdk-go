// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionDefinitionsStatus - Status of transaction.
type TransactionDefinitionsStatus string

const (
	TransactionDefinitionsStatusUnknown   TransactionDefinitionsStatus = "Unknown"
	TransactionDefinitionsStatusPushError TransactionDefinitionsStatus = "PushError"
	TransactionDefinitionsStatusCompleted TransactionDefinitionsStatus = "Completed"
	TransactionDefinitionsStatusFailed    TransactionDefinitionsStatus = "Failed"
	TransactionDefinitionsStatusPending   TransactionDefinitionsStatus = "Pending"
)

func (e TransactionDefinitionsStatus) ToPointer() *TransactionDefinitionsStatus {
	return &e
}
func (e *TransactionDefinitionsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unknown":
		fallthrough
	case "PushError":
		fallthrough
	case "Completed":
		fallthrough
	case "Failed":
		fallthrough
	case "Pending":
		*e = TransactionDefinitionsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionDefinitionsStatus: %v", v)
	}
}

type Transaction struct {
	// Error message for failed transaction.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Unique identifier of the transaction.
	ID *string `json:"id,omitempty"`
	// Status of transaction.
	Status *TransactionDefinitionsStatus `json:"status,omitempty"`
}

func (o *Transaction) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *Transaction) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Transaction) GetStatus() *TransactionDefinitionsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
