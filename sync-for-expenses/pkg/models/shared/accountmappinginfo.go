// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/codatio/client-sdk-go/sync-for-expenses/v3/pkg/utils"
)

// AccountMappingInfoAccountType - Type of the account.
type AccountMappingInfoAccountType string

const (
	AccountMappingInfoAccountTypeAsset     AccountMappingInfoAccountType = "Asset"
	AccountMappingInfoAccountTypeLiability AccountMappingInfoAccountType = "Liability"
	AccountMappingInfoAccountTypeIncome    AccountMappingInfoAccountType = "Income"
	AccountMappingInfoAccountTypeExpense   AccountMappingInfoAccountType = "Expense"
	AccountMappingInfoAccountTypeEquity    AccountMappingInfoAccountType = "Equity"
)

func (e AccountMappingInfoAccountType) ToPointer() *AccountMappingInfoAccountType {
	return &e
}

func (e *AccountMappingInfoAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Asset":
		fallthrough
	case "Liability":
		fallthrough
	case "Income":
		fallthrough
	case "Expense":
		fallthrough
	case "Equity":
		*e = AccountMappingInfoAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountMappingInfoAccountType: %v", v)
	}
}

type AccountMappingInfoValidTransactionTypes string

const (
	AccountMappingInfoValidTransactionTypesPayment       AccountMappingInfoValidTransactionTypes = "Payment"
	AccountMappingInfoValidTransactionTypesRefund        AccountMappingInfoValidTransactionTypes = "Refund"
	AccountMappingInfoValidTransactionTypesReward        AccountMappingInfoValidTransactionTypes = "Reward"
	AccountMappingInfoValidTransactionTypesChargeback    AccountMappingInfoValidTransactionTypes = "Chargeback"
	AccountMappingInfoValidTransactionTypesTransferIn    AccountMappingInfoValidTransactionTypes = "TransferIn"
	AccountMappingInfoValidTransactionTypesTransferOut   AccountMappingInfoValidTransactionTypes = "TransferOut"
	AccountMappingInfoValidTransactionTypesAdjustmentIn  AccountMappingInfoValidTransactionTypes = "AdjustmentIn"
	AccountMappingInfoValidTransactionTypesAdjustmentOut AccountMappingInfoValidTransactionTypes = "AdjustmentOut"
)

func (e AccountMappingInfoValidTransactionTypes) ToPointer() *AccountMappingInfoValidTransactionTypes {
	return &e
}

func (e *AccountMappingInfoValidTransactionTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Payment":
		fallthrough
	case "Refund":
		fallthrough
	case "Reward":
		fallthrough
	case "Chargeback":
		fallthrough
	case "TransferIn":
		fallthrough
	case "TransferOut":
		fallthrough
	case "AdjustmentIn":
		fallthrough
	case "AdjustmentOut":
		*e = AccountMappingInfoValidTransactionTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountMappingInfoValidTransactionTypes: %v", v)
	}
}

type AccountMappingInfo struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Type of the account.
	AccountType *AccountMappingInfoAccountType `json:"accountType,omitempty"`
	// Currency of the account.
	Currency *string `json:"currency,omitempty"`
	// Unique identifier of account.
	ID *string `json:"id,omitempty"`
	// Name of the account as it appears in the companies accounting software.
	Name *string `json:"name,omitempty"`
	// Supported transaction types for the account.
	ValidTransactionTypes []AccountMappingInfoValidTransactionTypes `json:"validTransactionTypes,omitempty"`
}

func (a AccountMappingInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountMappingInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountMappingInfo) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AccountMappingInfo) GetAccountType() *AccountMappingInfoAccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *AccountMappingInfo) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountMappingInfo) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountMappingInfo) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountMappingInfo) GetValidTransactionTypes() []AccountMappingInfoValidTransactionTypes {
	if o == nil {
		return nil
	}
	return o.ValidTransactionTypes
}
