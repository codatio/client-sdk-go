// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccountMappingInfoAccountType - Type of the account.
type AccountMappingInfoAccountType string

const (
	AccountMappingInfoAccountTypeAsset     AccountMappingInfoAccountType = "Asset"
	AccountMappingInfoAccountTypeLiability AccountMappingInfoAccountType = "Liability"
	AccountMappingInfoAccountTypeIncome    AccountMappingInfoAccountType = "Income"
	AccountMappingInfoAccountTypeExpense   AccountMappingInfoAccountType = "Expense"
	AccountMappingInfoAccountTypeEquity    AccountMappingInfoAccountType = "Equity"
)

func (e AccountMappingInfoAccountType) ToPointer() *AccountMappingInfoAccountType {
	return &e
}
func (e *AccountMappingInfoAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Asset":
		fallthrough
	case "Liability":
		fallthrough
	case "Income":
		fallthrough
	case "Expense":
		fallthrough
	case "Equity":
		*e = AccountMappingInfoAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountMappingInfoAccountType: %v", v)
	}
}

type AccountMappingInfo struct {
	// Type of the account.
	AccountType *AccountMappingInfoAccountType `json:"accountType,omitempty"`
	// Currency of the account.
	Currency *string `json:"currency,omitempty"`
	// Full account type and category of the account
	FullyQualifiedCategory *string `json:"fullyQualifiedCategory,omitempty"`
	// Unique identifier of account.
	ID *string `json:"id,omitempty"`
	// Confirms whether the account is a bank account or not.
	IsBankAccount *bool `json:"isBankAccount,omitempty"`
	// Name of the account as it appears in the company's accounting software.
	Name *string `json:"name,omitempty"`
	// Code used to identify each nominal account in the accounting software.
	NominalCode *string `json:"nominalCode,omitempty"`
	// Supported endpoints for the account.
	ValidFor []ValidFor `json:"validFor,omitempty"`
	// Supported transaction types for the account.
	ValidTransactionTypes []ValidTransactionTypes `json:"validTransactionTypes,omitempty"`
}

func (o *AccountMappingInfo) GetAccountType() *AccountMappingInfoAccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *AccountMappingInfo) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountMappingInfo) GetFullyQualifiedCategory() *string {
	if o == nil {
		return nil
	}
	return o.FullyQualifiedCategory
}

func (o *AccountMappingInfo) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountMappingInfo) GetIsBankAccount() *bool {
	if o == nil {
		return nil
	}
	return o.IsBankAccount
}

func (o *AccountMappingInfo) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountMappingInfo) GetNominalCode() *string {
	if o == nil {
		return nil
	}
	return o.NominalCode
}

func (o *AccountMappingInfo) GetValidFor() []ValidFor {
	if o == nil {
		return nil
	}
	return o.ValidFor
}

func (o *AccountMappingInfo) GetValidTransactionTypes() []ValidTransactionTypes {
	if o == nil {
		return nil
	}
	return o.ValidTransactionTypes
}
