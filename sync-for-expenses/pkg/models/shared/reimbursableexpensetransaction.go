// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/codatio/client-sdk-go/sync-for-expenses/v4/pkg/utils"
	"github.com/ericlagergren/decimal"
)

type BankAccountReference struct {
	// Identifier of the bank account.
	ID *string `json:"id,omitempty"`
}

func (o *BankAccountReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type ReimbursableExpenseTransaction struct {
	AllOf          interface{}           `json:"allOf,omitempty"`
	BankAccountRef *BankAccountReference `json:"bankAccountRef,omitempty"`
	// Currency the transaction was recorded in.
	Currency string `json:"currency"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	//
	//
	// ### Integration-specific details
	//
	// | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
	// |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
	// | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
	CurrencyRate *decimal.Big `decimal:"number" json:"currencyRate,omitempty"`
	DueDate      interface{}  `json:"dueDate"`
	// Your unique identifier for the transaction.
	ID string `json:"id"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	IssueDate string `json:"issueDate"`
	// Array of transaction lines.
	Lines []ReimbursableExpenseTransactionLine `json:"lines,omitempty"`
	// Any private, company notes about the transaction.
	Notes     *string     `json:"notes,omitempty"`
	RecordRef *ContactRef `json:"recordRef,omitempty"`
	// User-friendly reference for the reimbursable expense.
	Reference *string `json:"reference,omitempty"`
}

func (r ReimbursableExpenseTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReimbursableExpenseTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ReimbursableExpenseTransaction) GetAllOf() interface{} {
	if o == nil {
		return nil
	}
	return o.AllOf
}

func (o *ReimbursableExpenseTransaction) GetBankAccountRef() *BankAccountReference {
	if o == nil {
		return nil
	}
	return o.BankAccountRef
}

func (o *ReimbursableExpenseTransaction) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ReimbursableExpenseTransaction) GetCurrencyRate() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *ReimbursableExpenseTransaction) GetDueDate() interface{} {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *ReimbursableExpenseTransaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReimbursableExpenseTransaction) GetIssueDate() string {
	if o == nil {
		return ""
	}
	return o.IssueDate
}

func (o *ReimbursableExpenseTransaction) GetLines() []ReimbursableExpenseTransactionLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *ReimbursableExpenseTransaction) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *ReimbursableExpenseTransaction) GetRecordRef() *ContactRef {
	if o == nil {
		return nil
	}
	return o.RecordRef
}

func (o *ReimbursableExpenseTransaction) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}
