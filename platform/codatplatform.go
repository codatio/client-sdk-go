// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package platform

import (
	"context"
	"fmt"
	"github.com/codatio/client-sdk-go/platform/v4/internal/hooks"
	"github.com/codatio/client-sdk-go/platform/v4/pkg/models/shared"
	"github.com/codatio/client-sdk-go/platform/v4/pkg/retry"
	"github.com/codatio/client-sdk-go/platform/v4/pkg/utils"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Production
	"https://api.codat.io",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// CodatPlatform - Platform API: Platform API
// An API for the common components of all of Codat's products.
//
// These end points cover creating and managing your companies, data connections, and integrations.
//
// [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies) | [See our OpenAPI spec](https://github.com/codatio/oas)
//
// ---
// <!-- Start Codat Tags Table -->
// ## Endpoints
//
// | Endpoints | Description |
// | :- |:- |
// | Companies | Create and manage your SMB users' companies. |
// | Connections | Create new and manage existing data connections for a company. |
// | Connection management | Configure connection management UI and retrieve access tokens for authentication. |
// | Webhooks | Create and manage webhooks that listen to Codat's events. |
// | Integrations | Get a list of integrations supported by Codat and their logos. |
// | Refresh data | Initiate data refreshes, view pull status and history. |
// | Settings | Manage company profile configuration, sync settings, and API keys. |
// | Push data | Initiate and monitor Create, Update, and Delete operations. |
// | Supplemental data | Configure and pull additional data you can include in Codat's standard data types. |
// | Custom data type | Configure and pull additional data types that are not included in Codat's standardized data model. |
// <!-- End Codat Tags Table -->
type CodatPlatform struct {
	// Manage company profile configuration, sync settings, and API keys.
	Settings *Settings
	// Create and manage your SMB users' companies.
	Companies *Companies
	// Configure UI and retrieve access tokens for authentication used by **Connections SDK**.
	ConnectionManagement *ConnectionManagement
	// Create new and manage existing data connections for a company.
	Connections *Connections
	// Configure and pull additional data types that are not included in Codat's standardized data model.
	CustomDataType *CustomDataType
	// Initiate and monitor Create, Update, and Delete operations.
	PushData *PushData
	// Initiate data refreshes, view pull status and history.
	RefreshData *RefreshData
	// Get a list of integrations supported by Codat and their logos.
	Integrations *Integrations
	// Configure and pull additional data you can include in Codat's standard data types.
	SupplementalData *SupplementalData
	// Create and manage webhooks that listen to Codat's events.
	Webhooks *Webhooks

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*CodatPlatform)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *CodatPlatform) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *CodatPlatform) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *CodatPlatform) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *CodatPlatform) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *CodatPlatform) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (shared.Security, error)) SDKOption {
	return func(sdk *CodatPlatform) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *CodatPlatform) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *CodatPlatform) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *CodatPlatform {
	sdk := &CodatPlatform{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "3.0.0",
			SDKVersion:        "4.0.0",
			GenVersion:        "2.442.11",
			UserAgent:         "speakeasy-sdk/go 4.0.0 2.442.11 3.0.0 github.com/codatio/client-sdk-go/platform",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Settings = newSettings(sdk.sdkConfiguration)

	sdk.Companies = newCompanies(sdk.sdkConfiguration)

	sdk.ConnectionManagement = newConnectionManagement(sdk.sdkConfiguration)

	sdk.Connections = newConnections(sdk.sdkConfiguration)

	sdk.CustomDataType = newCustomDataType(sdk.sdkConfiguration)

	sdk.PushData = newPushData(sdk.sdkConfiguration)

	sdk.RefreshData = newRefreshData(sdk.sdkConfiguration)

	sdk.Integrations = newIntegrations(sdk.sdkConfiguration)

	sdk.SupplementalData = newSupplementalData(sdk.sdkConfiguration)

	sdk.Webhooks = newWebhooks(sdk.sdkConfiguration)

	return sdk
}
