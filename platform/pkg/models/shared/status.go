// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Status - The current status of the dataset.
type Status string

const (
	StatusInitial            Status = "Initial"
	StatusQueued             Status = "Queued"
	StatusFetching           Status = "Fetching"
	StatusMapQueued          Status = "MapQueued"
	StatusMapping            Status = "Mapping"
	StatusComplete           Status = "Complete"
	StatusFetchError         Status = "FetchError"
	StatusMapError           Status = "MapError"
	StatusInternalError      Status = "InternalError"
	StatusProcessingQueued   Status = "ProcessingQueued"
	StatusProcessing         Status = "Processing"
	StatusProcessingError    Status = "ProcessingError"
	StatusValidationQueued   Status = "ValidationQueued"
	StatusValidating         Status = "Validating"
	StatusValidationError    Status = "ValidationError"
	StatusAuthError          Status = "AuthError"
	StatusCancelled          Status = "Cancelled"
	StatusNotSupported       Status = "NotSupported"
	StatusRateLimitError     Status = "RateLimitError"
	StatusPermissionsError   Status = "PermissionsError"
	StatusPrerequisiteNotMet Status = "PrerequisiteNotMet"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Initial":
		fallthrough
	case "Queued":
		fallthrough
	case "Fetching":
		fallthrough
	case "MapQueued":
		fallthrough
	case "Mapping":
		fallthrough
	case "Complete":
		fallthrough
	case "FetchError":
		fallthrough
	case "MapError":
		fallthrough
	case "InternalError":
		fallthrough
	case "ProcessingQueued":
		fallthrough
	case "Processing":
		fallthrough
	case "ProcessingError":
		fallthrough
	case "ValidationQueued":
		fallthrough
	case "Validating":
		fallthrough
	case "ValidationError":
		fallthrough
	case "AuthError":
		fallthrough
	case "Cancelled":
		fallthrough
	case "NotSupported":
		fallthrough
	case "RateLimitError":
		fallthrough
	case "PermissionsError":
		fallthrough
	case "PrerequisiteNotMet":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}
