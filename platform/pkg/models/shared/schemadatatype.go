// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SchemaDataType - Available data types
type SchemaDataType string

const (
	SchemaDataTypeAccountTransactions          SchemaDataType = "accountTransactions"
	SchemaDataTypeBalanceSheet                 SchemaDataType = "balanceSheet"
	SchemaDataTypeBankAccounts                 SchemaDataType = "bankAccounts"
	SchemaDataTypeBankTransactions             SchemaDataType = "bankTransactions"
	SchemaDataTypeBillCreditNotes              SchemaDataType = "billCreditNotes"
	SchemaDataTypeBillPayments                 SchemaDataType = "billPayments"
	SchemaDataTypeBills                        SchemaDataType = "bills"
	SchemaDataTypeCashFlowStatement            SchemaDataType = "cashFlowStatement"
	SchemaDataTypeChartOfAccounts              SchemaDataType = "chartOfAccounts"
	SchemaDataTypeCompany                      SchemaDataType = "company"
	SchemaDataTypeCreditNotes                  SchemaDataType = "creditNotes"
	SchemaDataTypeCustomers                    SchemaDataType = "customers"
	SchemaDataTypeDirectCosts                  SchemaDataType = "directCosts"
	SchemaDataTypeDirectIncomes                SchemaDataType = "directIncomes"
	SchemaDataTypeInvoices                     SchemaDataType = "invoices"
	SchemaDataTypeItemReceipts                 SchemaDataType = "itemReceipts"
	SchemaDataTypeItems                        SchemaDataType = "items"
	SchemaDataTypeJournalEntries               SchemaDataType = "journalEntries"
	SchemaDataTypeJournals                     SchemaDataType = "journals"
	SchemaDataTypePaymentMethods               SchemaDataType = "paymentMethods"
	SchemaDataTypePayments                     SchemaDataType = "payments"
	SchemaDataTypeProfitAndLoss                SchemaDataType = "profitAndLoss"
	SchemaDataTypePurchaseOrders               SchemaDataType = "purchaseOrders"
	SchemaDataTypeSalesOrders                  SchemaDataType = "salesOrders"
	SchemaDataTypeSuppliers                    SchemaDataType = "suppliers"
	SchemaDataTypeTaxRates                     SchemaDataType = "taxRates"
	SchemaDataTypeTrackingCategories           SchemaDataType = "trackingCategories"
	SchemaDataTypeTransfers                    SchemaDataType = "transfers"
	SchemaDataTypeBankingAccountBalances       SchemaDataType = "banking-accountBalances"
	SchemaDataTypeBankingAccounts              SchemaDataType = "banking-accounts"
	SchemaDataTypeBankingTransactionCategories SchemaDataType = "banking-transactionCategories"
	SchemaDataTypeBankingTransactions          SchemaDataType = "banking-transactions"
	SchemaDataTypeCommerceCompanyInfo          SchemaDataType = "commerce-companyInfo"
	SchemaDataTypeCommerceCustomers            SchemaDataType = "commerce-customers"
	SchemaDataTypeCommerceDisputes             SchemaDataType = "commerce-disputes"
	SchemaDataTypeCommerceLocations            SchemaDataType = "commerce-locations"
	SchemaDataTypeCommerceOrders               SchemaDataType = "commerce-orders"
	SchemaDataTypeCommercePaymentMethods       SchemaDataType = "commerce-paymentMethods"
	SchemaDataTypeCommercePayments             SchemaDataType = "commerce-payments"
	SchemaDataTypeCommerceProductCategories    SchemaDataType = "commerce-productCategories"
	SchemaDataTypeCommerceProducts             SchemaDataType = "commerce-products"
	SchemaDataTypeCommerceTaxComponents        SchemaDataType = "commerce-taxComponents"
	SchemaDataTypeCommerceTransactions         SchemaDataType = "commerce-transactions"
)

func (e SchemaDataType) ToPointer() *SchemaDataType {
	return &e
}

func (e *SchemaDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accountTransactions":
		fallthrough
	case "balanceSheet":
		fallthrough
	case "bankAccounts":
		fallthrough
	case "bankTransactions":
		fallthrough
	case "billCreditNotes":
		fallthrough
	case "billPayments":
		fallthrough
	case "bills":
		fallthrough
	case "cashFlowStatement":
		fallthrough
	case "chartOfAccounts":
		fallthrough
	case "company":
		fallthrough
	case "creditNotes":
		fallthrough
	case "customers":
		fallthrough
	case "directCosts":
		fallthrough
	case "directIncomes":
		fallthrough
	case "invoices":
		fallthrough
	case "itemReceipts":
		fallthrough
	case "items":
		fallthrough
	case "journalEntries":
		fallthrough
	case "journals":
		fallthrough
	case "paymentMethods":
		fallthrough
	case "payments":
		fallthrough
	case "profitAndLoss":
		fallthrough
	case "purchaseOrders":
		fallthrough
	case "salesOrders":
		fallthrough
	case "suppliers":
		fallthrough
	case "taxRates":
		fallthrough
	case "trackingCategories":
		fallthrough
	case "transfers":
		fallthrough
	case "banking-accountBalances":
		fallthrough
	case "banking-accounts":
		fallthrough
	case "banking-transactionCategories":
		fallthrough
	case "banking-transactions":
		fallthrough
	case "commerce-companyInfo":
		fallthrough
	case "commerce-customers":
		fallthrough
	case "commerce-disputes":
		fallthrough
	case "commerce-locations":
		fallthrough
	case "commerce-orders":
		fallthrough
	case "commerce-paymentMethods":
		fallthrough
	case "commerce-payments":
		fallthrough
	case "commerce-productCategories":
		fallthrough
	case "commerce-products":
		fallthrough
	case "commerce-taxComponents":
		fallthrough
	case "commerce-transactions":
		*e = SchemaDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaDataType: %v", v)
	}
}
