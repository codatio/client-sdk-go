// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataTypes - Available data types
type DataTypes string

const (
	DataTypesAccountTransactions          DataTypes = "accountTransactions"
	DataTypesBalanceSheet                 DataTypes = "balanceSheet"
	DataTypesBankAccounts                 DataTypes = "bankAccounts"
	DataTypesBankTransactions             DataTypes = "bankTransactions"
	DataTypesBillCreditNotes              DataTypes = "billCreditNotes"
	DataTypesBillPayments                 DataTypes = "billPayments"
	DataTypesBills                        DataTypes = "bills"
	DataTypesCashFlowStatement            DataTypes = "cashFlowStatement"
	DataTypesChartOfAccounts              DataTypes = "chartOfAccounts"
	DataTypesCompany                      DataTypes = "company"
	DataTypesCreditNotes                  DataTypes = "creditNotes"
	DataTypesCustomers                    DataTypes = "customers"
	DataTypesDirectCosts                  DataTypes = "directCosts"
	DataTypesDirectIncomes                DataTypes = "directIncomes"
	DataTypesInvoices                     DataTypes = "invoices"
	DataTypesItemReceipts                 DataTypes = "itemReceipts"
	DataTypesItems                        DataTypes = "items"
	DataTypesJournalEntries               DataTypes = "journalEntries"
	DataTypesJournals                     DataTypes = "journals"
	DataTypesPaymentMethods               DataTypes = "paymentMethods"
	DataTypesPayments                     DataTypes = "payments"
	DataTypesProfitAndLoss                DataTypes = "profitAndLoss"
	DataTypesPurchaseOrders               DataTypes = "purchaseOrders"
	DataTypesSalesOrders                  DataTypes = "salesOrders"
	DataTypesSuppliers                    DataTypes = "suppliers"
	DataTypesTaxRates                     DataTypes = "taxRates"
	DataTypesTrackingCategories           DataTypes = "trackingCategories"
	DataTypesTransfers                    DataTypes = "transfers"
	DataTypesBankingAccountBalances       DataTypes = "banking-accountBalances"
	DataTypesBankingAccounts              DataTypes = "banking-accounts"
	DataTypesBankingTransactionCategories DataTypes = "banking-transactionCategories"
	DataTypesBankingTransactions          DataTypes = "banking-transactions"
	DataTypesCommerceCompanyInfo          DataTypes = "commerce-companyInfo"
	DataTypesCommerceCustomers            DataTypes = "commerce-customers"
	DataTypesCommerceDisputes             DataTypes = "commerce-disputes"
	DataTypesCommerceLocations            DataTypes = "commerce-locations"
	DataTypesCommerceOrders               DataTypes = "commerce-orders"
	DataTypesCommercePaymentMethods       DataTypes = "commerce-paymentMethods"
	DataTypesCommercePayments             DataTypes = "commerce-payments"
	DataTypesCommerceProductCategories    DataTypes = "commerce-productCategories"
	DataTypesCommerceProducts             DataTypes = "commerce-products"
	DataTypesCommerceTaxComponents        DataTypes = "commerce-taxComponents"
	DataTypesCommerceTransactions         DataTypes = "commerce-transactions"
)

func (e DataTypes) ToPointer() *DataTypes {
	return &e
}
func (e *DataTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accountTransactions":
		fallthrough
	case "balanceSheet":
		fallthrough
	case "bankAccounts":
		fallthrough
	case "bankTransactions":
		fallthrough
	case "billCreditNotes":
		fallthrough
	case "billPayments":
		fallthrough
	case "bills":
		fallthrough
	case "cashFlowStatement":
		fallthrough
	case "chartOfAccounts":
		fallthrough
	case "company":
		fallthrough
	case "creditNotes":
		fallthrough
	case "customers":
		fallthrough
	case "directCosts":
		fallthrough
	case "directIncomes":
		fallthrough
	case "invoices":
		fallthrough
	case "itemReceipts":
		fallthrough
	case "items":
		fallthrough
	case "journalEntries":
		fallthrough
	case "journals":
		fallthrough
	case "paymentMethods":
		fallthrough
	case "payments":
		fallthrough
	case "profitAndLoss":
		fallthrough
	case "purchaseOrders":
		fallthrough
	case "salesOrders":
		fallthrough
	case "suppliers":
		fallthrough
	case "taxRates":
		fallthrough
	case "trackingCategories":
		fallthrough
	case "transfers":
		fallthrough
	case "banking-accountBalances":
		fallthrough
	case "banking-accounts":
		fallthrough
	case "banking-transactionCategories":
		fallthrough
	case "banking-transactions":
		fallthrough
	case "commerce-companyInfo":
		fallthrough
	case "commerce-customers":
		fallthrough
	case "commerce-disputes":
		fallthrough
	case "commerce-locations":
		fallthrough
	case "commerce-orders":
		fallthrough
	case "commerce-paymentMethods":
		fallthrough
	case "commerce-payments":
		fallthrough
	case "commerce-productCategories":
		fallthrough
	case "commerce-products":
		fallthrough
	case "commerce-taxComponents":
		fallthrough
	case "commerce-transactions":
		*e = DataTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataTypes: %v", v)
	}
}

// DataStatus - Describes the state of data in the Codat cache for a company and data type
type DataStatus struct {
	// The current status of the dataset.
	CurrentStatus Status `json:"currentStatus"`
	// Available data types
	DataType DataTypes `json:"dataType"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	LastSuccessfulSync string `json:"lastSuccessfulSync"`
	// Unique identifier for the most recent successful sync of data type.
	LatestSuccessfulSyncID *string `json:"latestSuccessfulSyncId,omitempty"`
	// Unique identifier for most recent sync of data type.
	LatestSyncID *string `json:"latestSyncId,omitempty"`
}

func (o *DataStatus) GetCurrentStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.CurrentStatus
}

func (o *DataStatus) GetDataType() DataTypes {
	if o == nil {
		return DataTypes("")
	}
	return o.DataType
}

func (o *DataStatus) GetLastSuccessfulSync() string {
	if o == nil {
		return ""
	}
	return o.LastSuccessfulSync
}

func (o *DataStatus) GetLatestSuccessfulSyncID() *string {
	if o == nil {
		return nil
	}
	return o.LatestSuccessfulSyncID
}

func (o *DataStatus) GetLatestSyncID() *string {
	if o == nil {
		return nil
	}
	return o.LatestSyncID
}
