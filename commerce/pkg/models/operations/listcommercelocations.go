// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type ListCommerceLocationsRequest struct {
	CompanyID    string `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID string `pathParam:"style=simple,explode=false,name=connectionId"`
}

type ListCommerceLocationsLinksLinksCurrent struct {
	Href string `json:"href"`
}

type ListCommerceLocationsLinksLinksNext struct {
	Href *string `json:"href,omitempty"`
}

type ListCommerceLocationsLinksLinksPrevious struct {
	Href *string `json:"href,omitempty"`
}

type ListCommerceLocationsLinksLinksSelf struct {
	Href string `json:"href"`
}

type ListCommerceLocationsLinksLinks struct {
	Current  ListCommerceLocationsLinksLinksCurrent   `json:"current"`
	Next     *ListCommerceLocationsLinksLinksNext     `json:"next,omitempty"`
	Previous *ListCommerceLocationsLinksLinksPrevious `json:"previous,omitempty"`
	Self     ListCommerceLocationsLinksLinksSelf      `json:"self"`
}

type ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnum string

const (
	ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnumBilling   ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnum = "Billing"
	ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnumDelivery  ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnum = "Delivery"
	ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnumInventory ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnum = "Inventory"
)

// ListCommerceLocationsLinksSourceModifiedDateAddress - Address associated with the location
type ListCommerceLocationsLinksSourceModifiedDateAddress struct {
	// The third line of the address, or city
	City *string `json:"city,omitempty"`
	// The country for the address
	Country *string `json:"country,omitempty"`
	// The first line of the address
	Line1 *string `json:"line1,omitempty"`
	// The second line of the address
	Line2 *string `json:"line2,omitempty"`
	// The postal (or zip) code for the address
	PostalCode *string `json:"postalCode,omitempty"`
	// The fourth line of the address, or region
	Region *string                                                      `json:"region,omitempty"`
	Type   *ListCommerceLocationsLinksSourceModifiedDateAddressTypeEnum `json:"type,omitempty"`
}

// ListCommerceLocationsLinksSourceModifiedDate - The Locations datatype holds information on geographic locations at which stocks of products may be held, as referenced in the Products data type.
//
// Locations also holds information on geographic locations where orders were placed, as referenced in the Orders data type.
//
// From the Locations endpoints you can retrieve:
//
// A list of all the Locations of a commerce company: `GET /companies/{companyId}/connections/{connectionId}/data/commerce-locations`.
// The details of an individual location: `GET /companies/{companyId}/connections/{connectionId}/data/commerce-locations/{locationId}`.
type ListCommerceLocationsLinksSourceModifiedDate struct {
	// Address associated with the location
	Address *ListCommerceLocationsLinksSourceModifiedDateAddress `json:"address,omitempty"`
	// A unique, persistent identifier for this record
	ID string `json:"id"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// Name of this location
	Name *string `json:"name,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *time.Time `json:"sourceModifiedDate,omitempty"`
}

// ListCommerceLocationsLinks - Codat's Paging Model
type ListCommerceLocationsLinks struct {
	Links        ListCommerceLocationsLinksLinks                `json:"_links"`
	PageNumber   int64                                          `json:"pageNumber"`
	PageSize     int64                                          `json:"pageSize"`
	Results      []ListCommerceLocationsLinksSourceModifiedDate `json:"results,omitempty"`
	TotalResults int64                                          `json:"totalResults"`
}

type ListCommerceLocationsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Links *ListCommerceLocationsLinks
}
