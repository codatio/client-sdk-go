// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/codatio/client-sdk-go/assess/pkg/types"
	"net/http"
)

type GetEnhancedFinancialMetricsRequest struct {
	CompanyID    string `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID string `pathParam:"style=simple,explode=false,name=connectionId"`
	// The number of periods to return.  There will be no pagination as a query parameter, however Codat will limit the number of periods to request to 12 periods.
	NumberOfPeriods int64 `queryParam:"style=form,explode=true,name=numberOfPeriods"`
	// The number of months per period. E.g. 2 = 2 months per period.
	PeriodLength int64 `queryParam:"style=form,explode=true,name=periodLength"`
	// The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
	ReportDate string `queryParam:"style=form,explode=true,name=reportDate"`
	// If set to true, then the system includes the input values within the response.
	ShowMetricInputs *bool `queryParam:"style=form,explode=true,name=showMetricInputs"`
}

type GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum string

const (
	GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnumDataNotSynced      GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum = "DataNotSynced"
	GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnumDataNotSupported   GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum = "DataNotSupported"
	GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnumDataSyncFailed     GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum = "DataSyncFailed"
	GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnumDataTypeNotEnabled GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum = "DataTypeNotEnabled"
)

func (e *GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DataNotSynced":
		fallthrough
	case "DataNotSupported":
		fallthrough
	case "DataSyncFailed":
		fallthrough
	case "DataTypeNotEnabled":
		*e = GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum: %s", s)
	}
}

type GetEnhancedFinancialMetrics200ApplicationJSONErrors struct {
	Message *string                                                      `json:"message,omitempty"`
	Type    *GetEnhancedFinancialMetrics200ApplicationJSONErrorsTypeEnum `json:"type,omitempty"`
}

// GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsAssessErrorDetails - Dictionary list outlining the missing properties or allowed values.
type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsAssessErrorDetails struct {
	PropertyDetail1 []string `json:"propertyDetail1,omitempty"`
	PropertyDetail2 []string `json:"propertyDetail2,omitempty"`
	PropertyDetailN []string `json:"propertyDetailN,omitempty"`
}

// GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum - Metric level error.
type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum string

const (
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnumUncategorizedAccounts GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum = "UncategorizedAccounts"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnumMissingInputData      GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum = "MissingInputData"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnumInputDataError        GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum = "InputDataError"
)

func (e *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UncategorizedAccounts":
		fallthrough
	case "MissingInputData":
		fallthrough
	case "InputDataError":
		*e = GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum: %s", s)
	}
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrors struct {
	// Dictionary list outlining the missing properties or allowed values.
	Details *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsAssessErrorDetails `json:"details,omitempty"`
	// Description of the error.
	Message *string `json:"message,omitempty"`
	// Metric level error.
	Type *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrorsTypeEnum `json:"type,omitempty"`
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum string

const (
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumUnknown                     GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "Unknown"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumEbitda                      GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "EBITDA"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumDebtServiceCoverageRatio    GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "DebtServiceCoverageRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumCurrentRatioQuickRatio      GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "CurrentRatio QuickRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumGrossProfitMargin           GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "GrossProfitMargin"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumFixedChargeCoverageRatio    GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "FixedChargeCoverageRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumWorkingCapital              GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "WorkingCapital"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumFreeCashFlow                GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "FreeCashFlow"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumNetProfitMargin             GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "NetProfitMargin"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumReturnOnAssetsRatio         GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "ReturnOnAssetsRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumReturnOnEquityRatio         GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "ReturnOnEquityRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumOperatingProfitMargin       GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "OperatingProfitMargin"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumDeptToEquity                GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "DeptToEquity"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumDebtToAssets                GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "DebtToAssets"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumInterestCoverageRatio       GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "InterestCoverageRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumCashRatio                   GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "CashRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumInventoryTurnoverRatio      GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "InventoryTurnoverRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumAssetTurnoverRatio          GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "AssetTurnoverRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumWorkingCapitalTurnoverRatio GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "WorkingCapitalTurnoverRatio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumDaysSalesOutstanding        GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "DaysSalesOutstanding"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnumDaysPayablesOutstanding     GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum = "DaysPayablesOutstanding"
)

func (e *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "EBITDA":
		fallthrough
	case "DebtServiceCoverageRatio":
		fallthrough
	case "CurrentRatio QuickRatio":
		fallthrough
	case "GrossProfitMargin":
		fallthrough
	case "FixedChargeCoverageRatio":
		fallthrough
	case "WorkingCapital":
		fallthrough
	case "FreeCashFlow":
		fallthrough
	case "NetProfitMargin":
		fallthrough
	case "ReturnOnAssetsRatio":
		fallthrough
	case "ReturnOnEquityRatio":
		fallthrough
	case "OperatingProfitMargin":
		fallthrough
	case "DeptToEquity":
		fallthrough
	case "DebtToAssets":
		fallthrough
	case "InterestCoverageRatio":
		fallthrough
	case "CashRatio":
		fallthrough
	case "InventoryTurnoverRatio":
		fallthrough
	case "AssetTurnoverRatio":
		fallthrough
	case "WorkingCapitalTurnoverRatio":
		fallthrough
	case "DaysSalesOutstanding":
		fallthrough
	case "DaysPayablesOutstanding":
		*e = GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum: %s", s)
	}
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum string

const (
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnumRatio GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum = "Ratio"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnumMoney GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum = "Money"
)

func (e *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Ratio":
		fallthrough
	case "Money":
		*e = GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum: %s", s)
	}
}

// GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsAssessErrorDetails - Dictionary list outlining the missing properties or allowed values.
type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsAssessErrorDetails struct {
	PropertyDetail1 []string `json:"propertyDetail1,omitempty"`
	PropertyDetail2 []string `json:"propertyDetail2,omitempty"`
	PropertyDetailN []string `json:"propertyDetailN,omitempty"`
}

// GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum - Period error type.
type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum string

const (
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnumMissingAccountData GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum = "MissingAccountData"
	GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnumDatesOutOfRange    GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum = "DatesOutOfRange"
)

func (e *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MissingAccountData":
		fallthrough
	case "DatesOutOfRange":
		*e = GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum: %s", s)
	}
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrors struct {
	// Dictionary list outlining the missing properties or allowed values.
	Details *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsAssessErrorDetails `json:"details,omitempty"`
	// Description of the error.
	Massage *string `json:"massage,omitempty"`
	// Period error type.
	Type *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrorsTypeEnum `json:"type,omitempty"`
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsInputs struct {
	// The name of the metric input e.g. “Current Assets”, “Capital Expenditure”.
	Name *string `json:"name,omitempty"`
	// The positive or negative number of the input value.
	Value *float64 `json:"value,omitempty"`
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriods struct {
	Errors []GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsErrors `json:"errors,omitempty"`
	// The date from which the report starts.
	FromDate *types.Date                                                                 `json:"fromDate,omitempty"`
	Inputs   []GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriodsInputs `json:"inputs,omitempty"`
	// The date on which the report ends (inclusive of day).
	ToDate *types.Date `json:"toDate,omitempty"`
	// The top level metric value that is calculated for the specified period.
	//
	// If the system cannot calculate for that period, the value will be null. The system will still show the metric inputs.
	Value *float64 `json:"value,omitempty"`
}

type GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetric struct {
	Errors     []GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricErrors        `json:"errors,omitempty"`
	Key        *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricKeyEnum        `json:"key,omitempty"`
	MetricUnit *GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricMetricUnitEnum `json:"metricUnit,omitempty"`
	// Metric name.
	Name    *string                                                               `json:"name,omitempty"`
	Periods []GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetricPeriods `json:"periods,omitempty"`
}

type GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum string

const (
	GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnumMonth GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum = "Month"
	GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnumWeek  GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum = "Week"
	GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnumDay   GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum = "Day"
)

func (e *GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Month":
		fallthrough
	case "Week":
		fallthrough
	case "Day":
		*e = GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum: %s", s)
	}
}

// GetEnhancedFinancialMetrics200ApplicationJSON - OK
type GetEnhancedFinancialMetrics200ApplicationJSON struct {
	// The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
	//
	// ## Unknown currencies
	//
	// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
	//
	// There are only a very small number of edge cases where this currency code is returned by the Codat system.
	Currency *string `json:"currency,omitempty"`
	// If there are no errors, an empty array is returned.
	Errors     []GetEnhancedFinancialMetrics200ApplicationJSONErrors          `json:"errors,omitempty"`
	Metrics    []GetEnhancedFinancialMetrics200ApplicationJSONFinancialMetric `json:"metrics,omitempty"`
	PeriodUnit *GetEnhancedFinancialMetrics200ApplicationJSONPeriodUnitEnum   `json:"periodUnit,omitempty"`
}

type GetEnhancedFinancialMetricsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	GetEnhancedFinancialMetrics200ApplicationJSONObject *GetEnhancedFinancialMetrics200ApplicationJSON
}
