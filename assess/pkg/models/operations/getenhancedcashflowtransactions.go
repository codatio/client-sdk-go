// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetEnhancedCashFlowTransactionsRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Page number. [Read more](https://docs.codat.io/using-the-api/paging).
	Page int `queryParam:"style=form,explode=true,name=page"`
	// Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsDataSourcesAccountsReportSourceRef struct {
	SourceType *string `json:"sourceType,omitempty"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsDataSourcesAccounts struct {
	AccountName     *string                                                                                        `json:"accountName,omitempty"`
	AccountProvider *string                                                                                        `json:"accountProvider,omitempty"`
	AccountType     *string                                                                                        `json:"accountType,omitempty"`
	Currency        *string                                                                                        `json:"currency,omitempty"`
	CurrentBalance  *float64                                                                                       `json:"currentBalance,omitempty"`
	PlatformName    *string                                                                                        `json:"platformName,omitempty"`
	SourceRef       *GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsDataSourcesAccountsReportSourceRef `json:"sourceRef,omitempty"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsDataSources struct {
	Accounts []GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsDataSourcesAccounts `json:"accounts,omitempty"`
}

// GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportInfo - Report additional information, which is specific to Assess reports
type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportInfo struct {
	// Company name
	CompanyName *string `json:"companyName,omitempty"`
	// Date the report was generated
	GeneratedDate *string `json:"generatedDate,omitempty"`
	PageNumber    *int64  `json:"pageNumber,omitempty"`
	PageSize      *int64  `json:"pageSize,omitempty"`
	// Name of the report
	ReportName   *string `json:"reportName,omitempty"`
	TotalResults *int64  `json:"totalResults,omitempty"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItemsTransactionsReportSourceRef struct {
	SourceType *string `json:"sourceType,omitempty"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItemsTransactionsTransactionCategory struct {
	Confidence *float64 `json:"confidence,omitempty"`
	Levels     []string `json:"levels,omitempty"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItemsTransactions struct {
	Amount   *float64 `json:"amount,omitempty"`
	Currency *string  `json:"currency,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Date                *string                                                                                                `json:"date,omitempty"`
	Description         *string                                                                                                `json:"description,omitempty"`
	ID                  *string                                                                                                `json:"id,omitempty"`
	SourceRef           *GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItemsTransactionsReportSourceRef     `json:"sourceRef,omitempty"`
	TransactionCategory *GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItemsTransactionsTransactionCategory `json:"transactionCategory,omitempty"`
}

type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItems struct {
	Transactions []GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItemsTransactions `json:"transactions,omitempty"`
}

// GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactions - OK
type GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactions struct {
	DataSources []GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsDataSources `json:"dataSources,omitempty"`
	// Report additional information, which is specific to Assess reports
	ReportInfo  *GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportInfo   `json:"reportInfo,omitempty"`
	ReportItems []GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactionsReportItems `json:"reportItems,omitempty"`
}

type GetEnhancedCashFlowTransactionsResponse struct {
	ContentType string
	// OK
	EnhancedCashFlowTransactions *GetEnhancedCashFlowTransactionsEnhancedCashFlowTransactions
	StatusCode                   int
	RawResponse                  *http.Response
}
