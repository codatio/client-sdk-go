// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/codatio/client-sdk-go/assess/pkg/types"
)

// FinancialMetricErrorsTypeEnum - Metric level error.
type FinancialMetricErrorsTypeEnum string

const (
	FinancialMetricErrorsTypeEnumUncategorizedAccounts FinancialMetricErrorsTypeEnum = "UncategorizedAccounts"
	FinancialMetricErrorsTypeEnumMissingInputData      FinancialMetricErrorsTypeEnum = "MissingInputData"
	FinancialMetricErrorsTypeEnumInputDataError        FinancialMetricErrorsTypeEnum = "InputDataError"
)

func (e *FinancialMetricErrorsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UncategorizedAccounts":
		fallthrough
	case "MissingInputData":
		fallthrough
	case "InputDataError":
		*e = FinancialMetricErrorsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FinancialMetricErrorsTypeEnum: %s", s)
	}
}

type FinancialMetricErrors struct {
	// Dictionary list outlining the missing properties or allowed values.
	Details map[string][]string `json:"details,omitempty"`
	// Description of the error.
	Message *string `json:"message,omitempty"`
	// Metric level error.
	Type *FinancialMetricErrorsTypeEnum `json:"type,omitempty"`
}

type FinancialMetricKeyEnum string

const (
	FinancialMetricKeyEnumUnknown                     FinancialMetricKeyEnum = "Unknown"
	FinancialMetricKeyEnumEbitda                      FinancialMetricKeyEnum = "EBITDA"
	FinancialMetricKeyEnumDebtServiceCoverageRatio    FinancialMetricKeyEnum = "DebtServiceCoverageRatio"
	FinancialMetricKeyEnumCurrentRatioQuickRatio      FinancialMetricKeyEnum = "CurrentRatio QuickRatio"
	FinancialMetricKeyEnumGrossProfitMargin           FinancialMetricKeyEnum = "GrossProfitMargin"
	FinancialMetricKeyEnumFixedChargeCoverageRatio    FinancialMetricKeyEnum = "FixedChargeCoverageRatio"
	FinancialMetricKeyEnumWorkingCapital              FinancialMetricKeyEnum = "WorkingCapital"
	FinancialMetricKeyEnumFreeCashFlow                FinancialMetricKeyEnum = "FreeCashFlow"
	FinancialMetricKeyEnumNetProfitMargin             FinancialMetricKeyEnum = "NetProfitMargin"
	FinancialMetricKeyEnumReturnOnAssetsRatio         FinancialMetricKeyEnum = "ReturnOnAssetsRatio"
	FinancialMetricKeyEnumReturnOnEquityRatio         FinancialMetricKeyEnum = "ReturnOnEquityRatio"
	FinancialMetricKeyEnumOperatingProfitMargin       FinancialMetricKeyEnum = "OperatingProfitMargin"
	FinancialMetricKeyEnumDeptToEquity                FinancialMetricKeyEnum = "DeptToEquity"
	FinancialMetricKeyEnumDebtToAssets                FinancialMetricKeyEnum = "DebtToAssets"
	FinancialMetricKeyEnumInterestCoverageRatio       FinancialMetricKeyEnum = "InterestCoverageRatio"
	FinancialMetricKeyEnumCashRatio                   FinancialMetricKeyEnum = "CashRatio"
	FinancialMetricKeyEnumInventoryTurnoverRatio      FinancialMetricKeyEnum = "InventoryTurnoverRatio"
	FinancialMetricKeyEnumAssetTurnoverRatio          FinancialMetricKeyEnum = "AssetTurnoverRatio"
	FinancialMetricKeyEnumWorkingCapitalTurnoverRatio FinancialMetricKeyEnum = "WorkingCapitalTurnoverRatio"
	FinancialMetricKeyEnumDaysSalesOutstanding        FinancialMetricKeyEnum = "DaysSalesOutstanding"
	FinancialMetricKeyEnumDaysPayablesOutstanding     FinancialMetricKeyEnum = "DaysPayablesOutstanding"
)

func (e *FinancialMetricKeyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "EBITDA":
		fallthrough
	case "DebtServiceCoverageRatio":
		fallthrough
	case "CurrentRatio QuickRatio":
		fallthrough
	case "GrossProfitMargin":
		fallthrough
	case "FixedChargeCoverageRatio":
		fallthrough
	case "WorkingCapital":
		fallthrough
	case "FreeCashFlow":
		fallthrough
	case "NetProfitMargin":
		fallthrough
	case "ReturnOnAssetsRatio":
		fallthrough
	case "ReturnOnEquityRatio":
		fallthrough
	case "OperatingProfitMargin":
		fallthrough
	case "DeptToEquity":
		fallthrough
	case "DebtToAssets":
		fallthrough
	case "InterestCoverageRatio":
		fallthrough
	case "CashRatio":
		fallthrough
	case "InventoryTurnoverRatio":
		fallthrough
	case "AssetTurnoverRatio":
		fallthrough
	case "WorkingCapitalTurnoverRatio":
		fallthrough
	case "DaysSalesOutstanding":
		fallthrough
	case "DaysPayablesOutstanding":
		*e = FinancialMetricKeyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FinancialMetricKeyEnum: %s", s)
	}
}

type FinancialMetricMetricUnitEnum string

const (
	FinancialMetricMetricUnitEnumRatio FinancialMetricMetricUnitEnum = "Ratio"
	FinancialMetricMetricUnitEnumMoney FinancialMetricMetricUnitEnum = "Money"
)

func (e *FinancialMetricMetricUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Ratio":
		fallthrough
	case "Money":
		*e = FinancialMetricMetricUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FinancialMetricMetricUnitEnum: %s", s)
	}
}

// FinancialMetricPeriodsErrorsTypeEnum - Period error type.
type FinancialMetricPeriodsErrorsTypeEnum string

const (
	FinancialMetricPeriodsErrorsTypeEnumMissingAccountData FinancialMetricPeriodsErrorsTypeEnum = "MissingAccountData"
	FinancialMetricPeriodsErrorsTypeEnumDatesOutOfRange    FinancialMetricPeriodsErrorsTypeEnum = "DatesOutOfRange"
)

func (e *FinancialMetricPeriodsErrorsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MissingAccountData":
		fallthrough
	case "DatesOutOfRange":
		*e = FinancialMetricPeriodsErrorsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FinancialMetricPeriodsErrorsTypeEnum: %s", s)
	}
}

type FinancialMetricPeriodsErrors struct {
	// Dictionary list outlining the missing properties or allowed values.
	Details map[string][]string `json:"details,omitempty"`
	// Description of the error.
	Massage *string `json:"massage,omitempty"`
	// Period error type.
	Type *FinancialMetricPeriodsErrorsTypeEnum `json:"type,omitempty"`
}

type FinancialMetricPeriodsInputs struct {
	// The name of the metric input e.g. “Current Assets”, “Capital Expenditure”.
	Name *string `json:"name,omitempty"`
	// The positive or negative number of the input value.
	Value *float64 `json:"value,omitempty"`
}

type FinancialMetricPeriods struct {
	Errors []FinancialMetricPeriodsErrors `json:"errors,omitempty"`
	// The date from which the report starts.
	FromDate *types.Date                    `json:"fromDate,omitempty"`
	Inputs   []FinancialMetricPeriodsInputs `json:"inputs,omitempty"`
	// The date on which the report ends (inclusive of day).
	ToDate *types.Date `json:"toDate,omitempty"`
	// The top level metric value that is calculated for the specified period.
	//
	// If the system cannot calculate for that period, the value will be null. The system will still show the metric inputs.
	Value *float64 `json:"value,omitempty"`
}

type FinancialMetric struct {
	Errors     []FinancialMetricErrors        `json:"errors,omitempty"`
	Key        *FinancialMetricKeyEnum        `json:"key,omitempty"`
	MetricUnit *FinancialMetricMetricUnitEnum `json:"metricUnit,omitempty"`
	// Metric name.
	Name    *string                  `json:"name,omitempty"`
	Periods []FinancialMetricPeriods `json:"periods,omitempty"`
}
