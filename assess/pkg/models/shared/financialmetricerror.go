// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FinancialMetricErrorTypeEnum string

const (
	FinancialMetricErrorTypeEnumDataNotSynced      FinancialMetricErrorTypeEnum = "DataNotSynced"
	FinancialMetricErrorTypeEnumDataNotSupported   FinancialMetricErrorTypeEnum = "DataNotSupported"
	FinancialMetricErrorTypeEnumDataSyncFailed     FinancialMetricErrorTypeEnum = "DataSyncFailed"
	FinancialMetricErrorTypeEnumDataTypeNotEnabled FinancialMetricErrorTypeEnum = "DataTypeNotEnabled"
)

func (e FinancialMetricErrorTypeEnum) ToPointer() *FinancialMetricErrorTypeEnum {
	return &e
}

func (e *FinancialMetricErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DataNotSynced":
		fallthrough
	case "DataNotSupported":
		fallthrough
	case "DataSyncFailed":
		fallthrough
	case "DataTypeNotEnabled":
		*e = FinancialMetricErrorTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinancialMetricErrorTypeEnum: %v", v)
	}
}

type FinancialMetricError struct {
	Message *string                       `json:"message,omitempty"`
	Type    *FinancialMetricErrorTypeEnum `json:"type,omitempty"`
}
