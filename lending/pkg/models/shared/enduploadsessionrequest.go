// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EndUploadSessionRequestStatus - An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
type EndUploadSessionRequestStatus string

const (
	EndUploadSessionRequestStatusCancel  EndUploadSessionRequestStatus = "Cancel"
	EndUploadSessionRequestStatusProcess EndUploadSessionRequestStatus = "Process"
)

func (e EndUploadSessionRequestStatus) ToPointer() *EndUploadSessionRequestStatus {
	return &e
}
func (e *EndUploadSessionRequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Cancel":
		fallthrough
	case "Process":
		*e = EndUploadSessionRequestStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EndUploadSessionRequestStatus: %v", v)
	}
}

type EndUploadSessionRequest struct {
	// An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
	Status *EndUploadSessionRequestStatus `json:"status,omitempty"`
}

func (o *EndUploadSessionRequest) GetStatus() *EndUploadSessionRequestStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
