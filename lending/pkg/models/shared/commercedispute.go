// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// CommerceDispute - A customer may file a payment dispute with their bank or other card issuer when they're unsatisfied with their purchase or believe they have been charged incorrectly. For example:
// - They didn't receive an order.
// - The product they received was different to the commerce store's description.
// - They've been the victim of online fraud.
//
// You can use data from the Disputes endpoints to calculate key metrics, such as the number of chargebacks.
//
// Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-disputes) for this data type.
type CommerceDispute struct {
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	CreatedDate *string `json:"createdDate,omitempty"`
	// The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
	//
	// ## Unknown currencies
	//
	// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
	//
	// There are only a very small number of edge cases where this currency code is returned by the Codat system.
	Currency string `json:"currency"`
	// Link to the source event(s) which triggered this transaction.
	DisputedTransactions []TransactionSourceRef `json:"disputedTransactions,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	DueDate *string `json:"dueDate,omitempty"`
	// A unique, persistent identifier for this record
	ID           string  `json:"id"`
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Reason for the dispute
	Reason             *string `json:"reason,omitempty"`
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current status of the dispute
	Status *DisputeStatus `json:"status,omitempty"`
	// Total transaction amount that is under dispute.
	TotalAmount interface{} `json:"totalAmount,omitempty"`
}

func (o *CommerceDispute) GetCreatedDate() *string {
	if o == nil {
		return nil
	}
	return o.CreatedDate
}

func (o *CommerceDispute) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CommerceDispute) GetDisputedTransactions() []TransactionSourceRef {
	if o == nil {
		return nil
	}
	return o.DisputedTransactions
}

func (o *CommerceDispute) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *CommerceDispute) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CommerceDispute) GetModifiedDate() *string {
	if o == nil {
		return nil
	}
	return o.ModifiedDate
}

func (o *CommerceDispute) GetReason() *string {
	if o == nil {
		return nil
	}
	return o.Reason
}

func (o *CommerceDispute) GetSourceModifiedDate() *string {
	if o == nil {
		return nil
	}
	return o.SourceModifiedDate
}

func (o *CommerceDispute) GetStatus() *DisputeStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CommerceDispute) GetTotalAmount() interface{} {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}
