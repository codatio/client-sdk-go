// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/codatio/client-sdk-go/lending/v8/pkg/models/shared"
	"github.com/codatio/client-sdk-go/lending/v8/pkg/utils"
	"net/http"
)

type UploadBankStatementDataRequestBodyType string

const (
	UploadBankStatementDataRequestBodyTypeBankingAccount      UploadBankStatementDataRequestBodyType = "BankingAccount"
	UploadBankStatementDataRequestBodyTypeBankingTransactions UploadBankStatementDataRequestBodyType = "BankingTransactions"
	UploadBankStatementDataRequestBodyTypeAny                 UploadBankStatementDataRequestBodyType = "any"
)

type UploadBankStatementDataRequestBody struct {
	BankingAccount      *shared.BankingAccount      `queryParam:"inline"`
	BankingTransactions *shared.BankingTransactions `queryParam:"inline"`
	Any                 any                         `queryParam:"inline"`

	Type UploadBankStatementDataRequestBodyType
}

func CreateUploadBankStatementDataRequestBodyBankingAccount(bankingAccount shared.BankingAccount) UploadBankStatementDataRequestBody {
	typ := UploadBankStatementDataRequestBodyTypeBankingAccount

	return UploadBankStatementDataRequestBody{
		BankingAccount: &bankingAccount,
		Type:           typ,
	}
}

func CreateUploadBankStatementDataRequestBodyBankingTransactions(bankingTransactions shared.BankingTransactions) UploadBankStatementDataRequestBody {
	typ := UploadBankStatementDataRequestBodyTypeBankingTransactions

	return UploadBankStatementDataRequestBody{
		BankingTransactions: &bankingTransactions,
		Type:                typ,
	}
}

func CreateUploadBankStatementDataRequestBodyAny(any any) UploadBankStatementDataRequestBody {
	typ := UploadBankStatementDataRequestBodyTypeAny

	return UploadBankStatementDataRequestBody{
		Any:  any,
		Type: typ,
	}
}

func (u *UploadBankStatementDataRequestBody) UnmarshalJSON(data []byte) error {

	var bankingTransactions shared.BankingTransactions = shared.BankingTransactions{}
	if err := utils.UnmarshalJSON(data, &bankingTransactions, "", true, true); err == nil {
		u.BankingTransactions = &bankingTransactions
		u.Type = UploadBankStatementDataRequestBodyTypeBankingTransactions
		return nil
	}

	var bankingAccount shared.BankingAccount = shared.BankingAccount{}
	if err := utils.UnmarshalJSON(data, &bankingAccount, "", true, true); err == nil {
		u.BankingAccount = &bankingAccount
		u.Type = UploadBankStatementDataRequestBodyTypeBankingAccount
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = UploadBankStatementDataRequestBodyTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UploadBankStatementDataRequestBody", string(data))
}

func (u UploadBankStatementDataRequestBody) MarshalJSON() ([]byte, error) {
	if u.BankingAccount != nil {
		return utils.MarshalJSON(u.BankingAccount, "", true)
	}

	if u.BankingTransactions != nil {
		return utils.MarshalJSON(u.BankingTransactions, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type UploadBankStatementDataRequestBody: all fields are null")
}

type UploadBankStatementDataRequest struct {
	RequestBody UploadBankStatementDataRequestBody `request:"mediaType=application/json"`
	// Unique identifier for a company.
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Unique identifier for a connection.
	ConnectionID string `pathParam:"style=simple,explode=false,name=connectionId"`
	// Unique identifier for the dataset that completed its sync.
	DatasetID string `pathParam:"style=simple,explode=false,name=datasetId"`
	// The endpoint path of the third-party banking service that the request body originates from. Only required if the source is not `codat`.
	Path *shared.Path `queryParam:"style=form,explode=true,name=path"`
}

func (o *UploadBankStatementDataRequest) GetRequestBody() UploadBankStatementDataRequestBody {
	if o == nil {
		return UploadBankStatementDataRequestBody{}
	}
	return o.RequestBody
}

func (o *UploadBankStatementDataRequest) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *UploadBankStatementDataRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *UploadBankStatementDataRequest) GetDatasetID() string {
	if o == nil {
		return ""
	}
	return o.DatasetID
}

func (o *UploadBankStatementDataRequest) GetPath() *shared.Path {
	if o == nil {
		return nil
	}
	return o.Path
}

type UploadBankStatementDataResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UploadBankStatementDataResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UploadBankStatementDataResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UploadBankStatementDataResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
