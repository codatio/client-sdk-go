// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ListTaxRatesRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Page number. [Read more](https://docs.codat.io/using-the-api/paging).
	Page int `queryParam:"style=form,explode=true,name=page"`
	// Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type ListTaxRates200ApplicationJSONLinksHypertextReference struct {
	Href *string `json:"href,omitempty"`
}

type ListTaxRates200ApplicationJSONLinks struct {
	Current  ListTaxRates200ApplicationJSONLinksHypertextReference  `json:"current"`
	Next     *ListTaxRates200ApplicationJSONLinksHypertextReference `json:"next,omitempty"`
	Previous *ListTaxRates200ApplicationJSONLinksHypertextReference `json:"previous,omitempty"`
	Self     ListTaxRates200ApplicationJSONLinksHypertextReference  `json:"self"`
}

type ListTaxRates200ApplicationJSONResultsComponents struct {
	IsCompound bool     `json:"isCompound"`
	Name       *string  `json:"name,omitempty"`
	Rate       *float64 `json:"rate,omitempty"`
}

type ListTaxRates200ApplicationJSONResultsMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type ListTaxRates200ApplicationJSONResultsStatusEnum string

const (
	ListTaxRates200ApplicationJSONResultsStatusEnumUnknown  ListTaxRates200ApplicationJSONResultsStatusEnum = "Unknown"
	ListTaxRates200ApplicationJSONResultsStatusEnumActive   ListTaxRates200ApplicationJSONResultsStatusEnum = "Active"
	ListTaxRates200ApplicationJSONResultsStatusEnumArchived ListTaxRates200ApplicationJSONResultsStatusEnum = "Archived"
)

func (e *ListTaxRates200ApplicationJSONResultsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = ListTaxRates200ApplicationJSONResultsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTaxRates200ApplicationJSONResultsStatusEnum: %s", s)
	}
}

// ListTaxRates200ApplicationJSONResultsValidDataTypeLinks - When querying Codat's data model, some data types return `validDatatypeLinks` metadata in the JSON response. This indicates where that object can be used as a referenceâ€”a _valid link_â€”when creating or updating other data.
//
// For example, `validDatatypeLinks` might indicate the following references:
//
// - Which tax rates are valid to use on the line item of a bill.
// - Which items can be used when creating an invoice.
//
// You can use `validDatatypeLinks` to present your SMB customers with only valid choices when selecting objects from a list, for example.
//
// ## `validDatatypeLinks` example
//
// The following example uses the `Accounting.Accounts` data type. It shows that, on the linked integration, this account is valid as the account on a payment or bill payment; and as the account referenced on the line item of a direct income or direct cost. Because there is no valid link to Invoices or Bills, using this account on those data types will result in an error.
//
// ```json validDatatypeLinks for an account
//
//	{
//	            "id": "bd9e85e0-0478-433d-ae9f-0b3c4f04bfe4",
//	            "nominalCode": "090",
//	            "name": "Business Bank Account",
//	            #...
//	            "validDatatypeLinks": [
//	                {
//	                    "property": "Id",
//	                    "links": [
//	                        "Payment.AccountRef.Id",
//	                        "BillPayment.AccountRef.Id",
//	                        "DirectIncome.LineItems.AccountRef.Id",
//	                        "DirectCost.LineItems.AccountRef.Id"
//	                    ]
//	                }
//	            ]
//	        }
//
// ```
//
// ## Support for `validDatatypeLinks`
//
// Codat currently supports `validDatatypeLinks` for some data types on our Xero, QuickBooks Online, QuickBooks Desktop, Exact (NL), and Sage Business Cloud integrations.
//
// If you'd like us to extend support to more data types or integrations, suggest or vote for this on our <a href="https://portal.productboard.com/codat/5-product-roadmap">Product Roadmap</a>.
type ListTaxRates200ApplicationJSONResultsValidDataTypeLinks struct {
	// Supported `dataTypes` that the record can be linked to.
	Links []string `json:"links,omitempty"`
	// The property from the account that can be linked.
	Property *string `json:"property,omitempty"`
}

// ListTaxRates200ApplicationJSONResults - > View the coverage for tax rates in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=taxRates" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// Accounting systems typically store a set of taxes and associated rates within the accounting package. This means that users don't have to look up or remember the rates for each type of tax. For example: Applying the tax "UK sales VAT" to line items of an invoice adds the correct rate of 20%.
//
// ### Tax components
//
// In some cases, a tax is made up of multiple sub taxes, often called _components_ of the tax.  For example: You may have an item that is charged a tax rate called "City import tax (8%)" that has two components:
//
// - A city tax of 5%.
// - An import tax of 3%.
//
// > **Effective tax rates**
// > Where there are multiple components of a tax, each component may be calculated on the original amount and added together. Alternatively, one tax may be calculated on the sub-total of the original amount plus another tax, which is referred to as _compounding_. When there is compounding, the effective tax rate is the rate that, if applied to the original amount, would result in the total amount of tax with compounding.
// >
// > **Example:**
// > A tax has two components. Both components have a rate of 10%, and one component is compound. In this case, there is a total tax rate of 20% but an effective tax rate of 21%. [Also see _Compound tax example_](#section-compound-tax-example).
// > - For QuickBooks Online, Codat doesn't use compound rates. Instead, the calculated effective tax rate for each component is shown. This means that the effective and total rates are the same because the total tax rate is a sum of the component rates.
type ListTaxRates200ApplicationJSONResults struct {
	Code             *string                                           `json:"code,omitempty"`
	Components       []ListTaxRates200ApplicationJSONResultsComponents `json:"components,omitempty"`
	EffectiveTaxRate *float64                                          `json:"effectiveTaxRate,omitempty"`
	ID               *string                                           `json:"id,omitempty"`
	Metadata         *ListTaxRates200ApplicationJSONResultsMetadata    `json:"metadata,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	Name         *string `json:"name,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	SourceModifiedDate *string                                                   `json:"sourceModifiedDate,omitempty"`
	Status             *ListTaxRates200ApplicationJSONResultsStatusEnum          `json:"status,omitempty"`
	TotalTaxRate       *float64                                                  `json:"totalTaxRate,omitempty"`
	ValidDatatypeLinks []ListTaxRates200ApplicationJSONResultsValidDataTypeLinks `json:"validDatatypeLinks,omitempty"`
}

// ListTaxRates200ApplicationJSON - Success
type ListTaxRates200ApplicationJSON struct {
	Links        ListTaxRates200ApplicationJSONLinks     `json:"_links"`
	PageNumber   int64                                   `json:"pageNumber"`
	PageSize     int64                                   `json:"pageSize"`
	Results      []ListTaxRates200ApplicationJSONResults `json:"results,omitempty"`
	TotalResults int64                                   `json:"totalResults"`
}

type ListTaxRatesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ListTaxRates200ApplicationJSONObject *ListTaxRates200ApplicationJSON
}
