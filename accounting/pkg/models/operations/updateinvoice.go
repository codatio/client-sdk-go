// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateInvoiceSourceModifiedDateCustomerRef - Reference to the customer the invoice has been issued to.
type UpdateInvoiceSourceModifiedDateCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

// UpdateInvoiceSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type UpdateInvoiceSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// UpdateInvoiceSourceModifiedDateLineItemsItemRef - Reference to the item the line is linked to.
type UpdateInvoiceSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateInvoiceSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the line item is linked.
type UpdateInvoiceSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// UpdateInvoiceSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type UpdateInvoiceSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type UpdateInvoiceSourceModifiedDateLineItemsTrackingCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

type UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum string

const (
	UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnumUnknown       UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Unknown"
	UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnumNotApplicable UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum = "NotApplicable"
	UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnumProject       UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Project"
)

func (e *UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Project":
		*e = UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum: %s", s)
	}
}

type UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum string

const (
	UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnumUnknown       UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Unknown"
	UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnumNotApplicable UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "NotApplicable"
	UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnumProject       UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Project"
)

func (e *UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Project":
		*e = UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum: %s", s)
	}
}

type UpdateInvoiceSourceModifiedDateLineItemsTrackingProjectRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateInvoiceSourceModifiedDateLineItemsTracking - Categories, and a project and customer, against which the item is tracked.
type UpdateInvoiceSourceModifiedDateLineItemsTracking struct {
	CategoryRefs []UpdateInvoiceSourceModifiedDateLineItemsTrackingCategoryRefs   `json:"categoryRefs"`
	CustomerRef  *UpdateInvoiceSourceModifiedDateLineItemsTrackingCustomerRef     `json:"customerRef,omitempty"`
	IsBilledTo   UpdateInvoiceSourceModifiedDateLineItemsTrackingIsBilledToEnum   `json:"isBilledTo"`
	IsRebilledTo UpdateInvoiceSourceModifiedDateLineItemsTrackingIsRebilledToEnum `json:"isRebilledTo"`
	ProjectRef   *UpdateInvoiceSourceModifiedDateLineItemsTrackingProjectRef      `json:"projectRef,omitempty"`
}

type UpdateInvoiceSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *UpdateInvoiceSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services provided.
	Description *string `json:"description,omitempty"`
	// Numerical value of any discounts applied.
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	// Percentage rate (from 0 to 100) of any discounts applied to the unit amount.
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	IsDirectIncome     *bool    `json:"isDirectIncome,omitempty"`
	// Reference to the item the line is linked to.
	ItemRef *UpdateInvoiceSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services provided.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *UpdateInvoiceSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax. When pushing invoices to Xero, the total amount is exclusive of tax to allow automatic calculations if a tax rate or tax amount is not specified.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *UpdateInvoiceSourceModifiedDateLineItemsTracking `json:"tracking,omitempty"`
	// Reference to the tracking categories to which the line item is linked.
	TrackingCategoryRefs []UpdateInvoiceSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	UnitAmount float64 `json:"unitAmount"`
}

type UpdateInvoiceSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type UpdateInvoiceSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// UpdateInvoiceSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type UpdateInvoiceSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type UpdateInvoiceSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *UpdateInvoiceSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type UpdateInvoiceSourceModifiedDatePaymentAllocations struct {
	Allocation UpdateInvoiceSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    UpdateInvoiceSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

// UpdateInvoiceSourceModifiedDateStatusEnum - Current state of the invoice:
//
// - `Draft` - Invoice hasn't been submitted to the supplier. It may be in a pending state or is scheduled for future submission, for example by email.
// - `Submitted` - Invoice is no longer a draft. It has been processed and, or, sent to the customer. In this state, it will impact the ledger. It also has no payments made against it (amountDue == totalAmount).
// - `PartiallyPaid` - The balance paid against the invoice is positive, but less than the total invoice amount (0 < amountDue < totalAmount).
// - `Paid` - Invoice is paid in full. This includes if the invoice has been credited or overpaid (amountDue == 0).
// - `Void` - An invoice can become Void when it's deleted, refunded, written off, or cancelled. A voided invoice may still be PartiallyPaid, and so all outstanding amounts on voided invoices are removed from the accounts receivable account.
type UpdateInvoiceSourceModifiedDateStatusEnum string

const (
	UpdateInvoiceSourceModifiedDateStatusEnumUnknown       UpdateInvoiceSourceModifiedDateStatusEnum = "Unknown"
	UpdateInvoiceSourceModifiedDateStatusEnumDraft         UpdateInvoiceSourceModifiedDateStatusEnum = "Draft"
	UpdateInvoiceSourceModifiedDateStatusEnumSubmitted     UpdateInvoiceSourceModifiedDateStatusEnum = "Submitted"
	UpdateInvoiceSourceModifiedDateStatusEnumPartiallyPaid UpdateInvoiceSourceModifiedDateStatusEnum = "PartiallyPaid"
	UpdateInvoiceSourceModifiedDateStatusEnumPaid          UpdateInvoiceSourceModifiedDateStatusEnum = "Paid"
	UpdateInvoiceSourceModifiedDateStatusEnumVoid          UpdateInvoiceSourceModifiedDateStatusEnum = "Void"
)

func (e *UpdateInvoiceSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Draft":
		fallthrough
	case "Submitted":
		fallthrough
	case "PartiallyPaid":
		fallthrough
	case "Paid":
		fallthrough
	case "Void":
		*e = UpdateInvoiceSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoiceSourceModifiedDateStatusEnum: %s", s)
	}
}

// UpdateInvoiceSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type UpdateInvoiceSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

type UpdateInvoiceSourceModifiedDateWithholdingTax struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// UpdateInvoiceSourceModifiedDate - > View the coverage for invoices in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// An invoice is an itemized record of goods sold or services provided to a [customer](https://docs.codat.io/accounting-api#/schemas/Customer).
//
// In Codat, an invoice contains details of:
//
// - The timeline of the invoice—when it was raised, marked as paid, last edited, and so on.
// - How much the invoice is for, what portion of the invoice is tax or discounts, and what currency the amounts are represented in.
// - Who the invoice has been raised to; the _customer_.
// - The breakdown of what the invoice is for; the _line items_.
// - Any [payments](https://docs.codat.io/accounting-api#/schemas/Payment) assigned to the invoice; the _payment allocations_.
//
// > **Invoices or bills?**
// >
// > In Codat, invoices represent accounts receivable only. For accounts payable invoices, see [Bills](https://docs.codat.io/accounting-api#/schemas/Bill).
//
// > **Invoice PDF downloads**
// >
// > You can <a className="external" href="https://api.codat.io/swagger/index.html#/Invoices/get_companies__companyId__data_invoices__invoiceId__pdf" target="_blank">download a PDF version</a> of an invoice for supported integrations.
// >
// > The filename will be invoice-{number}.pdf.
type UpdateInvoiceSourceModifiedDate struct {
	AdditionalTaxAmount     *float64 `json:"additionalTaxAmount,omitempty"`
	AdditionalTaxPercentage *float64 `json:"additionalTaxPercentage,omitempty"`
	// Amount outstanding on the invoice.
	AmountDue float64 `json:"amountDue"`
	// Currency of the invoice.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Reference to the customer the invoice has been issued to.
	CustomerRef *UpdateInvoiceSourceModifiedDateCustomerRef `json:"customerRef,omitempty"`
	// Percentage rate (from 0 to 100) of discounts applied to the invoice. For example: A 5% discount will return a value of `5`, not `0.05`.
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	// Date the customer is due to be paid by.
	DueDate *string `json:"dueDate,omitempty"`
	// Identifier for the invoice, unique to the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Friendly reference for the invoice. If available, this appears in the file name of invoice attachments.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// Date of the invoice as recorded in the accounting system.
	IssueDate string `json:"issueDate"`
	// An array of line items.
	LineItems []UpdateInvoiceSourceModifiedDateLineItems `json:"lineItems,omitempty"`
	Metadata  *UpdateInvoiceSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Any additional information about the invoice. Where possible, Codat links to a data field in the accounting platform that is publicly available. This means that the contents of the note field are included when an invoice is emailed from the accounting platform to the customer.
	Note *string `json:"note,omitempty"`
	// Date the invoice was marked as paid in the accounting system. If this field is not available from the accounting software, it is calculated by Codat using associated payments.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	//
	// An array of payment allocations.
	PaymentAllocations []UpdateInvoiceSourceModifiedDatePaymentAllocations `json:"paymentAllocations,omitempty"`
	// List of references to related Sales orders.
	SalesOrderRefs []string `json:"salesOrderRefs,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the invoice:
	//
	// - `Draft` - Invoice hasn't been submitted to the supplier. It may be in a pending state or is scheduled for future submission, for example by email.
	// - `Submitted` - Invoice is no longer a draft. It has been processed and, or, sent to the customer. In this state, it will impact the ledger. It also has no payments made against it (amountDue == totalAmount).
	// - `PartiallyPaid` - The balance paid against the invoice is positive, but less than the total invoice amount (0 < amountDue < totalAmount).
	// - `Paid` - Invoice is paid in full. This includes if the invoice has been credited or overpaid (amountDue == 0).
	// - `Void` - An invoice can become Void when it's deleted, refunded, written off, or cancelled. A voided invoice may still be PartiallyPaid, and so all outstanding amounts on voided invoices are removed from the accounts receivable account.
	Status UpdateInvoiceSourceModifiedDateStatusEnum `json:"status"`
	// Total amount of the invoice excluding any taxes.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *UpdateInvoiceSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Amount of the invoice, inclusive of tax.
	TotalAmount float64 `json:"totalAmount"`
	// Numerical value of discounts applied to the invoice.
	TotalDiscount *float64 `json:"totalDiscount,omitempty"`
	// Amount of tax on the invoice.
	TotalTaxAmount float64                                         `json:"totalTaxAmount"`
	WithholdingTax []UpdateInvoiceSourceModifiedDateWithholdingTax `json:"withholdingTax,omitempty"`
}

type UpdateInvoiceRequest struct {
	RequestBody  *UpdateInvoiceSourceModifiedDate `request:"mediaType=application/json"`
	CompanyID    string                           `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID string                           `pathParam:"style=simple,explode=false,name=connectionId"`
	ForceUpdate  *bool                            `queryParam:"style=form,explode=true,name=forceUpdate"`
	// Unique identifier for an invoice
	InvoiceID        string `pathParam:"style=simple,explode=false,name=invoiceId"`
	TimeoutInMinutes *int   `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

type UpdateInvoice200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type UpdateInvoice200ApplicationJSONChangesTypeEnum string

const (
	UpdateInvoice200ApplicationJSONChangesTypeEnumUnknown            UpdateInvoice200ApplicationJSONChangesTypeEnum = "Unknown"
	UpdateInvoice200ApplicationJSONChangesTypeEnumCreated            UpdateInvoice200ApplicationJSONChangesTypeEnum = "Created"
	UpdateInvoice200ApplicationJSONChangesTypeEnumModified           UpdateInvoice200ApplicationJSONChangesTypeEnum = "Modified"
	UpdateInvoice200ApplicationJSONChangesTypeEnumDeleted            UpdateInvoice200ApplicationJSONChangesTypeEnum = "Deleted"
	UpdateInvoice200ApplicationJSONChangesTypeEnumAttachmentUploaded UpdateInvoice200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

func (e *UpdateInvoice200ApplicationJSONChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = UpdateInvoice200ApplicationJSONChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoice200ApplicationJSONChangesTypeEnum: %s", s)
	}
}

type UpdateInvoice200ApplicationJSONChanges struct {
	AttachmentID *string                                                       `json:"attachmentId,omitempty"`
	RecordRef    *UpdateInvoice200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *UpdateInvoice200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateCustomerRef - Reference to the customer the invoice has been issued to.
type UpdateInvoice200ApplicationJSONSourceModifiedDateCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsItemRef - Reference to the item the line is linked to.
type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the line item is linked.
type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum string

const (
	UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumUnknown       UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Unknown"
	UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumNotApplicable UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "NotApplicable"
	UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumProject       UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Project"
)

func (e *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Project":
		*e = UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum: %s", s)
	}
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum string

const (
	UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumUnknown       UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Unknown"
	UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumNotApplicable UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "NotApplicable"
	UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumProject       UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Project"
)

func (e *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Project":
		*e = UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum: %s", s)
	}
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingProjectRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTracking - Categories, and a project and customer, against which the item is tracked.
type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTracking struct {
	CategoryRefs []UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs   `json:"categoryRefs"`
	CustomerRef  *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingCustomerRef     `json:"customerRef,omitempty"`
	IsBilledTo   UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum   `json:"isBilledTo"`
	IsRebilledTo UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum `json:"isRebilledTo"`
	ProjectRef   *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingProjectRef      `json:"projectRef,omitempty"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services provided.
	Description *string `json:"description,omitempty"`
	// Numerical value of any discounts applied.
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	// Percentage rate (from 0 to 100) of any discounts applied to the unit amount.
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	IsDirectIncome     *bool    `json:"isDirectIncome,omitempty"`
	// Reference to the item the line is linked to.
	ItemRef *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services provided.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax. When pushing invoices to Xero, the total amount is exclusive of tax to allow automatic calculations if a tax rate or tax amount is not specified.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTracking `json:"tracking,omitempty"`
	// Reference to the tracking categories to which the line item is linked.
	TrackingCategoryRefs []UpdateInvoice200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	UnitAmount float64 `json:"unitAmount"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocations struct {
	Allocation UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum - Current state of the invoice:
//
// - `Draft` - Invoice hasn't been submitted to the supplier. It may be in a pending state or is scheduled for future submission, for example by email.
// - `Submitted` - Invoice is no longer a draft. It has been processed and, or, sent to the customer. In this state, it will impact the ledger. It also has no payments made against it (amountDue == totalAmount).
// - `PartiallyPaid` - The balance paid against the invoice is positive, but less than the total invoice amount (0 < amountDue < totalAmount).
// - `Paid` - Invoice is paid in full. This includes if the invoice has been credited or overpaid (amountDue == 0).
// - `Void` - An invoice can become Void when it's deleted, refunded, written off, or cancelled. A voided invoice may still be PartiallyPaid, and so all outstanding amounts on voided invoices are removed from the accounts receivable account.
type UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum string

const (
	UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnumUnknown       UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum = "Unknown"
	UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnumDraft         UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum = "Draft"
	UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnumSubmitted     UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum = "Submitted"
	UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnumPartiallyPaid UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum = "PartiallyPaid"
	UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnumPaid          UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum = "Paid"
	UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnumVoid          UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum = "Void"
)

func (e *UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Draft":
		fallthrough
	case "Submitted":
		fallthrough
	case "PartiallyPaid":
		fallthrough
	case "Paid":
		fallthrough
	case "Void":
		*e = UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum: %s", s)
	}
}

// UpdateInvoice200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type UpdateInvoice200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

type UpdateInvoice200ApplicationJSONSourceModifiedDateWithholdingTax struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// UpdateInvoice200ApplicationJSONSourceModifiedDate - > View the coverage for invoices in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// An invoice is an itemized record of goods sold or services provided to a [customer](https://docs.codat.io/accounting-api#/schemas/Customer).
//
// In Codat, an invoice contains details of:
//
// - The timeline of the invoice—when it was raised, marked as paid, last edited, and so on.
// - How much the invoice is for, what portion of the invoice is tax or discounts, and what currency the amounts are represented in.
// - Who the invoice has been raised to; the _customer_.
// - The breakdown of what the invoice is for; the _line items_.
// - Any [payments](https://docs.codat.io/accounting-api#/schemas/Payment) assigned to the invoice; the _payment allocations_.
//
// > **Invoices or bills?**
// >
// > In Codat, invoices represent accounts receivable only. For accounts payable invoices, see [Bills](https://docs.codat.io/accounting-api#/schemas/Bill).
//
// > **Invoice PDF downloads**
// >
// > You can <a className="external" href="https://api.codat.io/swagger/index.html#/Invoices/get_companies__companyId__data_invoices__invoiceId__pdf" target="_blank">download a PDF version</a> of an invoice for supported integrations.
// >
// > The filename will be invoice-{number}.pdf.
type UpdateInvoice200ApplicationJSONSourceModifiedDate struct {
	AdditionalTaxAmount     *float64 `json:"additionalTaxAmount,omitempty"`
	AdditionalTaxPercentage *float64 `json:"additionalTaxPercentage,omitempty"`
	// Amount outstanding on the invoice.
	AmountDue float64 `json:"amountDue"`
	// Currency of the invoice.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Reference to the customer the invoice has been issued to.
	CustomerRef *UpdateInvoice200ApplicationJSONSourceModifiedDateCustomerRef `json:"customerRef,omitempty"`
	// Percentage rate (from 0 to 100) of discounts applied to the invoice. For example: A 5% discount will return a value of `5`, not `0.05`.
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	// Date the customer is due to be paid by.
	DueDate *string `json:"dueDate,omitempty"`
	// Identifier for the invoice, unique to the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Friendly reference for the invoice. If available, this appears in the file name of invoice attachments.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// Date of the invoice as recorded in the accounting system.
	IssueDate string `json:"issueDate"`
	// An array of line items.
	LineItems []UpdateInvoice200ApplicationJSONSourceModifiedDateLineItems `json:"lineItems,omitempty"`
	Metadata  *UpdateInvoice200ApplicationJSONSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Any additional information about the invoice. Where possible, Codat links to a data field in the accounting platform that is publicly available. This means that the contents of the note field are included when an invoice is emailed from the accounting platform to the customer.
	Note *string `json:"note,omitempty"`
	// Date the invoice was marked as paid in the accounting system. If this field is not available from the accounting software, it is calculated by Codat using associated payments.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	//
	// An array of payment allocations.
	PaymentAllocations []UpdateInvoice200ApplicationJSONSourceModifiedDatePaymentAllocations `json:"paymentAllocations,omitempty"`
	// List of references to related Sales orders.
	SalesOrderRefs []string `json:"salesOrderRefs,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the invoice:
	//
	// - `Draft` - Invoice hasn't been submitted to the supplier. It may be in a pending state or is scheduled for future submission, for example by email.
	// - `Submitted` - Invoice is no longer a draft. It has been processed and, or, sent to the customer. In this state, it will impact the ledger. It also has no payments made against it (amountDue == totalAmount).
	// - `PartiallyPaid` - The balance paid against the invoice is positive, but less than the total invoice amount (0 < amountDue < totalAmount).
	// - `Paid` - Invoice is paid in full. This includes if the invoice has been credited or overpaid (amountDue == 0).
	// - `Void` - An invoice can become Void when it's deleted, refunded, written off, or cancelled. A voided invoice may still be PartiallyPaid, and so all outstanding amounts on voided invoices are removed from the accounts receivable account.
	Status UpdateInvoice200ApplicationJSONSourceModifiedDateStatusEnum `json:"status"`
	// Total amount of the invoice excluding any taxes.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *UpdateInvoice200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Amount of the invoice, inclusive of tax.
	TotalAmount float64 `json:"totalAmount"`
	// Numerical value of discounts applied to the invoice.
	TotalDiscount *float64 `json:"totalDiscount,omitempty"`
	// Amount of tax on the invoice.
	TotalTaxAmount float64                                                           `json:"totalTaxAmount"`
	WithholdingTax []UpdateInvoice200ApplicationJSONSourceModifiedDateWithholdingTax `json:"withholdingTax,omitempty"`
}

// UpdateInvoice200ApplicationJSONStatusEnum - The status of the push operation.
type UpdateInvoice200ApplicationJSONStatusEnum string

const (
	UpdateInvoice200ApplicationJSONStatusEnumPending  UpdateInvoice200ApplicationJSONStatusEnum = "Pending"
	UpdateInvoice200ApplicationJSONStatusEnumFailed   UpdateInvoice200ApplicationJSONStatusEnum = "Failed"
	UpdateInvoice200ApplicationJSONStatusEnumSuccess  UpdateInvoice200ApplicationJSONStatusEnum = "Success"
	UpdateInvoice200ApplicationJSONStatusEnumTimedOut UpdateInvoice200ApplicationJSONStatusEnum = "TimedOut"
)

func (e *UpdateInvoice200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = UpdateInvoice200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoice200ApplicationJSONStatusEnum: %s", s)
	}
}

type UpdateInvoice200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// UpdateInvoice200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type UpdateInvoice200ApplicationJSONValidation struct {
	Errors   []UpdateInvoice200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []UpdateInvoice200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// UpdateInvoice200ApplicationJSON - Success
type UpdateInvoice200ApplicationJSON struct {
	Changes []UpdateInvoice200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// > View the coverage for invoices in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices" target="_blank">Data coverage explorer</a>.
	//
	// ## Overview
	//
	// An invoice is an itemized record of goods sold or services provided to a [customer](https://docs.codat.io/accounting-api#/schemas/Customer).
	//
	// In Codat, an invoice contains details of:
	//
	// - The timeline of the invoice—when it was raised, marked as paid, last edited, and so on.
	// - How much the invoice is for, what portion of the invoice is tax or discounts, and what currency the amounts are represented in.
	// - Who the invoice has been raised to; the _customer_.
	// - The breakdown of what the invoice is for; the _line items_.
	// - Any [payments](https://docs.codat.io/accounting-api#/schemas/Payment) assigned to the invoice; the _payment allocations_.
	//
	// > **Invoices or bills?**
	// >
	// > In Codat, invoices represent accounts receivable only. For accounts payable invoices, see [Bills](https://docs.codat.io/accounting-api#/schemas/Bill).
	//
	// > **Invoice PDF downloads**
	// >
	// > You can <a className="external" href="https://api.codat.io/swagger/index.html#/Invoices/get_companies__companyId__data_invoices__invoiceId__pdf" target="_blank">download a PDF version</a> of an invoice for supported integrations.
	// >
	// > The filename will be invoice-{number}.pdf.
	Data *UpdateInvoice200ApplicationJSONSourceModifiedDate `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           UpdateInvoice200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                       `json:"statusCode"`
	TimeoutInMinutes *int                                      `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                      `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *UpdateInvoice200ApplicationJSONValidation `json:"validation,omitempty"`
}

type UpdateInvoiceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UpdateInvoice200ApplicationJSONObject *UpdateInvoice200ApplicationJSON
}
