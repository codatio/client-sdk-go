// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateBillSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type UpdateBillSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// UpdateBillSourceModifiedDateLineItemsItemRef - Reference to the product, service type, or inventory item to which the line item is linked.
type UpdateBillSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateBillSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the line item is linked.
type UpdateBillSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// UpdateBillSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type UpdateBillSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type UpdateBillSourceModifiedDateLineItemsTrackingCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

type UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum string

const (
	UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnumUnknown       UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Unknown"
	UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnumNotApplicable UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "NotApplicable"
	UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnumCustomer      UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Customer"
	UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnumProject       UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Project"
)

func (e *UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum: %s", s)
	}
}

type UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum string

const (
	UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumUnknown       UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Unknown"
	UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumNotApplicable UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "NotApplicable"
	UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumCustomer      UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Customer"
	UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumProject       UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Project"
)

func (e *UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum: %s", s)
	}
}

type UpdateBillSourceModifiedDateLineItemsTrackingProjectRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateBillSourceModifiedDateLineItemsTracking - Categories, and a project and customer, against which the item is tracked.
type UpdateBillSourceModifiedDateLineItemsTracking struct {
	CategoryRefs []UpdateBillSourceModifiedDateLineItemsTrackingCategoryRefs   `json:"categoryRefs"`
	CustomerRef  *UpdateBillSourceModifiedDateLineItemsTrackingCustomerRef     `json:"customerRef,omitempty"`
	IsBilledTo   UpdateBillSourceModifiedDateLineItemsTrackingIsBilledToEnum   `json:"isBilledTo"`
	IsRebilledTo UpdateBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum `json:"isRebilledTo"`
	ProjectRef   *UpdateBillSourceModifiedDateLineItemsTrackingProjectRef      `json:"projectRef,omitempty"`
}

type UpdateBillSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *UpdateBillSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services received.
	Description *string `json:"description,omitempty"`
	// Numerical value of any discounts applied.
	//
	// Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
	DiscountAmount     *float64 `json:"discountAmount,omitempty"`
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	IsDirectCost       *bool    `json:"isDirectCost,omitempty"`
	// Reference to the product, service type, or inventory item to which the line item is linked.
	ItemRef *UpdateBillSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services received.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *UpdateBillSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *UpdateBillSourceModifiedDateLineItemsTracking `json:"tracking,omitempty"`
	// Collection of categories against which this item is tracked.
	TrackingCategoryRefs []UpdateBillSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	UnitAmount float64 `json:"unitAmount"`
}

type UpdateBillSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type UpdateBillSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// UpdateBillSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type UpdateBillSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type UpdateBillSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *UpdateBillSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type UpdateBillSourceModifiedDatePaymentAllocations struct {
	Allocation UpdateBillSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    UpdateBillSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

type UpdateBillSourceModifiedDatePurchaseOrderRefs struct {
	ID                  *string `json:"id,omitempty"`
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
}

// UpdateBillSourceModifiedDateStatusEnum - Current state of the bill.
type UpdateBillSourceModifiedDateStatusEnum string

const (
	UpdateBillSourceModifiedDateStatusEnumUnknown       UpdateBillSourceModifiedDateStatusEnum = "Unknown"
	UpdateBillSourceModifiedDateStatusEnumOpen          UpdateBillSourceModifiedDateStatusEnum = "Open"
	UpdateBillSourceModifiedDateStatusEnumPartiallyPaid UpdateBillSourceModifiedDateStatusEnum = "PartiallyPaid"
	UpdateBillSourceModifiedDateStatusEnumPaid          UpdateBillSourceModifiedDateStatusEnum = "Paid"
	UpdateBillSourceModifiedDateStatusEnumVoid          UpdateBillSourceModifiedDateStatusEnum = "Void"
	UpdateBillSourceModifiedDateStatusEnumDraft         UpdateBillSourceModifiedDateStatusEnum = "Draft"
)

func (e *UpdateBillSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Open":
		fallthrough
	case "PartiallyPaid":
		fallthrough
	case "Paid":
		fallthrough
	case "Void":
		fallthrough
	case "Draft":
		*e = UpdateBillSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBillSourceModifiedDateStatusEnum: %s", s)
	}
}

// UpdateBillSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type UpdateBillSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// UpdateBillSourceModifiedDateSupplierRef - Reference to the supplier the bill was received from.
type UpdateBillSourceModifiedDateSupplierRef struct {
	ID           string  `json:"id"`
	SupplierName *string `json:"supplierName,omitempty"`
}

type UpdateBillSourceModifiedDateWithholdingTax struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// UpdateBillSourceModifiedDate - > **Invoices or bills?**
// >
// > In Codat, bills are for accounts payable only. For the accounts receivable equivalent of bills, see [Invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
//
// View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// In Codat, a bill contains details of:
// * When the bill was recorded in the accounting system.
// * How much the bill is for and the currency of the amount.
// * Who the bill was received from — the *supplier*.
// * What the bill is for — the *line items*.
//
// Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
//
// You can find these types of transactions in our [Direct costs](https://docs.codat.io/accounting-api#/schemas/DirectCost) data model.
type UpdateBillSourceModifiedDate struct {
	// Amount outstanding on the bill.
	AmountDue *float64 `json:"amountDue,omitempty"`
	// Currency of the bill.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Date the supplier is due to be paid.
	DueDate *string `json:"dueDate,omitempty"`
	// Identifier for the bill, unique for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Date of the bill as recorded in the accounting platform.
	IssueDate string `json:"issueDate"`
	// Array of BillLineItems.
	LineItems []UpdateBillSourceModifiedDateLineItems `json:"lineItems,omitempty"`
	Metadata  *UpdateBillSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Any private, company notes about the bill, such as payment information.
	Note *string `json:"note,omitempty"`
	// An array of payment allocations.
	PaymentAllocations []UpdateBillSourceModifiedDatePaymentAllocations `json:"paymentAllocations,omitempty"`
	PurchaseOrderRefs  []UpdateBillSourceModifiedDatePurchaseOrderRefs  `json:"purchaseOrderRefs,omitempty"`
	// User-friendly reference for the bill.
	Reference *string `json:"reference,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the bill.
	Status UpdateBillSourceModifiedDateStatusEnum `json:"status"`
	// Total amount of the bill, excluding any taxes.
	SubTotal float64 `json:"subTotal"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *UpdateBillSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Reference to the supplier the bill was received from.
	SupplierRef *UpdateBillSourceModifiedDateSupplierRef `json:"supplierRef,omitempty"`
	// Amount of tax on the bill.
	TaxAmount float64 `json:"taxAmount"`
	// Amount of the bill, including tax.
	TotalAmount    float64                                      `json:"totalAmount"`
	WithholdingTax []UpdateBillSourceModifiedDateWithholdingTax `json:"withholdingTax,omitempty"`
}

type UpdateBillRequest struct {
	RequestBody *UpdateBillSourceModifiedDate `request:"mediaType=application/json"`
	// Unique identifier for a bill
	BillID           string `pathParam:"style=simple,explode=false,name=billId"`
	CompanyID        string `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID     string `pathParam:"style=simple,explode=false,name=connectionId"`
	ForceUpdate      *bool  `queryParam:"style=form,explode=true,name=forceUpdate"`
	TimeoutInMinutes *int   `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

type UpdateBill200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type UpdateBill200ApplicationJSONChangesTypeEnum string

const (
	UpdateBill200ApplicationJSONChangesTypeEnumUnknown            UpdateBill200ApplicationJSONChangesTypeEnum = "Unknown"
	UpdateBill200ApplicationJSONChangesTypeEnumCreated            UpdateBill200ApplicationJSONChangesTypeEnum = "Created"
	UpdateBill200ApplicationJSONChangesTypeEnumModified           UpdateBill200ApplicationJSONChangesTypeEnum = "Modified"
	UpdateBill200ApplicationJSONChangesTypeEnumDeleted            UpdateBill200ApplicationJSONChangesTypeEnum = "Deleted"
	UpdateBill200ApplicationJSONChangesTypeEnumAttachmentUploaded UpdateBill200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

func (e *UpdateBill200ApplicationJSONChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = UpdateBill200ApplicationJSONChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBill200ApplicationJSONChangesTypeEnum: %s", s)
	}
}

type UpdateBill200ApplicationJSONChanges struct {
	AttachmentID *string                                                    `json:"attachmentId,omitempty"`
	RecordRef    *UpdateBill200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *UpdateBill200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateLineItemsItemRef - Reference to the product, service type, or inventory item to which the line item is linked.
type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the line item is linked.
type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum string

const (
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumUnknown       UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Unknown"
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumNotApplicable UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "NotApplicable"
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumCustomer      UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Customer"
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumProject       UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Project"
)

func (e *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum: %s", s)
	}
}

type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum string

const (
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumUnknown       UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Unknown"
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumNotApplicable UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "NotApplicable"
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumCustomer      UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Customer"
	UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumProject       UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Project"
)

func (e *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum: %s", s)
	}
}

type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingProjectRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTracking - Categories, and a project and customer, against which the item is tracked.
type UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTracking struct {
	CategoryRefs []UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs   `json:"categoryRefs"`
	CustomerRef  *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingCustomerRef     `json:"customerRef,omitempty"`
	IsBilledTo   UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum   `json:"isBilledTo"`
	IsRebilledTo UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum `json:"isRebilledTo"`
	ProjectRef   *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingProjectRef      `json:"projectRef,omitempty"`
}

type UpdateBill200ApplicationJSONSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services received.
	Description *string `json:"description,omitempty"`
	// Numerical value of any discounts applied.
	//
	// Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
	DiscountAmount     *float64 `json:"discountAmount,omitempty"`
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	IsDirectCost       *bool    `json:"isDirectCost,omitempty"`
	// Reference to the product, service type, or inventory item to which the line item is linked.
	ItemRef *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services received.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTracking `json:"tracking,omitempty"`
	// Collection of categories against which this item is tracked.
	TrackingCategoryRefs []UpdateBill200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	UnitAmount float64 `json:"unitAmount"`
}

type UpdateBill200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocations struct {
	Allocation UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

type UpdateBill200ApplicationJSONSourceModifiedDatePurchaseOrderRefs struct {
	ID                  *string `json:"id,omitempty"`
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum - Current state of the bill.
type UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum string

const (
	UpdateBill200ApplicationJSONSourceModifiedDateStatusEnumUnknown       UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum = "Unknown"
	UpdateBill200ApplicationJSONSourceModifiedDateStatusEnumOpen          UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum = "Open"
	UpdateBill200ApplicationJSONSourceModifiedDateStatusEnumPartiallyPaid UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum = "PartiallyPaid"
	UpdateBill200ApplicationJSONSourceModifiedDateStatusEnumPaid          UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum = "Paid"
	UpdateBill200ApplicationJSONSourceModifiedDateStatusEnumVoid          UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum = "Void"
	UpdateBill200ApplicationJSONSourceModifiedDateStatusEnumDraft         UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum = "Draft"
)

func (e *UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Open":
		fallthrough
	case "PartiallyPaid":
		fallthrough
	case "Paid":
		fallthrough
	case "Void":
		fallthrough
	case "Draft":
		*e = UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum: %s", s)
	}
}

// UpdateBill200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type UpdateBill200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// UpdateBill200ApplicationJSONSourceModifiedDateSupplierRef - Reference to the supplier the bill was received from.
type UpdateBill200ApplicationJSONSourceModifiedDateSupplierRef struct {
	ID           string  `json:"id"`
	SupplierName *string `json:"supplierName,omitempty"`
}

type UpdateBill200ApplicationJSONSourceModifiedDateWithholdingTax struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// UpdateBill200ApplicationJSONSourceModifiedDate - > **Invoices or bills?**
// >
// > In Codat, bills are for accounts payable only. For the accounts receivable equivalent of bills, see [Invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
//
// View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// In Codat, a bill contains details of:
// * When the bill was recorded in the accounting system.
// * How much the bill is for and the currency of the amount.
// * Who the bill was received from — the *supplier*.
// * What the bill is for — the *line items*.
//
// Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
//
// You can find these types of transactions in our [Direct costs](https://docs.codat.io/accounting-api#/schemas/DirectCost) data model.
type UpdateBill200ApplicationJSONSourceModifiedDate struct {
	// Amount outstanding on the bill.
	AmountDue *float64 `json:"amountDue,omitempty"`
	// Currency of the bill.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Date the supplier is due to be paid.
	DueDate *string `json:"dueDate,omitempty"`
	// Identifier for the bill, unique for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Date of the bill as recorded in the accounting platform.
	IssueDate string `json:"issueDate"`
	// Array of BillLineItems.
	LineItems []UpdateBill200ApplicationJSONSourceModifiedDateLineItems `json:"lineItems,omitempty"`
	Metadata  *UpdateBill200ApplicationJSONSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Any private, company notes about the bill, such as payment information.
	Note *string `json:"note,omitempty"`
	// An array of payment allocations.
	PaymentAllocations []UpdateBill200ApplicationJSONSourceModifiedDatePaymentAllocations `json:"paymentAllocations,omitempty"`
	PurchaseOrderRefs  []UpdateBill200ApplicationJSONSourceModifiedDatePurchaseOrderRefs  `json:"purchaseOrderRefs,omitempty"`
	// User-friendly reference for the bill.
	Reference *string `json:"reference,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the bill.
	Status UpdateBill200ApplicationJSONSourceModifiedDateStatusEnum `json:"status"`
	// Total amount of the bill, excluding any taxes.
	SubTotal float64 `json:"subTotal"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *UpdateBill200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Reference to the supplier the bill was received from.
	SupplierRef *UpdateBill200ApplicationJSONSourceModifiedDateSupplierRef `json:"supplierRef,omitempty"`
	// Amount of tax on the bill.
	TaxAmount float64 `json:"taxAmount"`
	// Amount of the bill, including tax.
	TotalAmount    float64                                                        `json:"totalAmount"`
	WithholdingTax []UpdateBill200ApplicationJSONSourceModifiedDateWithholdingTax `json:"withholdingTax,omitempty"`
}

// UpdateBill200ApplicationJSONStatusEnum - The status of the push operation.
type UpdateBill200ApplicationJSONStatusEnum string

const (
	UpdateBill200ApplicationJSONStatusEnumPending  UpdateBill200ApplicationJSONStatusEnum = "Pending"
	UpdateBill200ApplicationJSONStatusEnumFailed   UpdateBill200ApplicationJSONStatusEnum = "Failed"
	UpdateBill200ApplicationJSONStatusEnumSuccess  UpdateBill200ApplicationJSONStatusEnum = "Success"
	UpdateBill200ApplicationJSONStatusEnumTimedOut UpdateBill200ApplicationJSONStatusEnum = "TimedOut"
)

func (e *UpdateBill200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = UpdateBill200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBill200ApplicationJSONStatusEnum: %s", s)
	}
}

type UpdateBill200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// UpdateBill200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type UpdateBill200ApplicationJSONValidation struct {
	Errors   []UpdateBill200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []UpdateBill200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// UpdateBill200ApplicationJSON - Success
type UpdateBill200ApplicationJSON struct {
	Changes []UpdateBill200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// > **Invoices or bills?**
	// >
	// > In Codat, bills are for accounts payable only. For the accounts receivable equivalent of bills, see [Invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
	//
	// View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.
	//
	// ## Overview
	//
	// In Codat, a bill contains details of:
	// * When the bill was recorded in the accounting system.
	// * How much the bill is for and the currency of the amount.
	// * Who the bill was received from — the *supplier*.
	// * What the bill is for — the *line items*.
	//
	// Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
	//
	// You can find these types of transactions in our [Direct costs](https://docs.codat.io/accounting-api#/schemas/DirectCost) data model.
	Data *UpdateBill200ApplicationJSONSourceModifiedDate `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           UpdateBill200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                    `json:"statusCode"`
	TimeoutInMinutes *int                                   `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                   `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *UpdateBill200ApplicationJSONValidation `json:"validation,omitempty"`
}

type UpdateBillResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UpdateBill200ApplicationJSONObject *UpdateBill200ApplicationJSON
}
