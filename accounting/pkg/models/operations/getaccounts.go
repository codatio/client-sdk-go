// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetAccountsRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Page number. [Read more](https://docs.codat.io/using-the-api/paging).
	Page int `queryParam:"style=form,explode=true,name=page"`
	// Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type GetAccounts200ApplicationJSONLinksHypertextReference struct {
	Href *string `json:"href,omitempty"`
}

type GetAccounts200ApplicationJSONLinks struct {
	Current  GetAccounts200ApplicationJSONLinksHypertextReference  `json:"current"`
	Next     *GetAccounts200ApplicationJSONLinksHypertextReference `json:"next,omitempty"`
	Previous *GetAccounts200ApplicationJSONLinksHypertextReference `json:"previous,omitempty"`
	Self     GetAccounts200ApplicationJSONLinksHypertextReference  `json:"self"`
}

type GetAccounts200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum - Status of the account
type GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum string

const (
	GetAccounts200ApplicationJSONSourceModifiedDateStatusEnumUnknown  GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum = "Unknown"
	GetAccounts200ApplicationJSONSourceModifiedDateStatusEnumActive   GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum = "Active"
	GetAccounts200ApplicationJSONSourceModifiedDateStatusEnumArchived GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum = "Archived"
	GetAccounts200ApplicationJSONSourceModifiedDateStatusEnumPending  GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum = "Pending"
)

func (e *GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		fallthrough
	case "Pending":
		*e = GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum: %s", s)
	}
}

// GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum - Type of account
type GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum string

const (
	GetAccounts200ApplicationJSONSourceModifiedDateTypeEnumUnknown   GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum = "Unknown"
	GetAccounts200ApplicationJSONSourceModifiedDateTypeEnumAsset     GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum = "Asset"
	GetAccounts200ApplicationJSONSourceModifiedDateTypeEnumExpense   GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum = "Expense"
	GetAccounts200ApplicationJSONSourceModifiedDateTypeEnumIncome    GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum = "Income"
	GetAccounts200ApplicationJSONSourceModifiedDateTypeEnumLiability GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum = "Liability"
	GetAccounts200ApplicationJSONSourceModifiedDateTypeEnumEquity    GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum = "Equity"
)

func (e *GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Asset":
		fallthrough
	case "Expense":
		fallthrough
	case "Income":
		fallthrough
	case "Liability":
		fallthrough
	case "Equity":
		*e = GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum: %s", s)
	}
}

// GetAccounts200ApplicationJSONSourceModifiedDateValidDataTypeLinks - When querying Codat's data model, some data types return `validDatatypeLinks` metadata in the JSON response. This indicates where that object can be used as a reference—a _valid link_—when creating or updating other data.
//
// For example, `validDatatypeLinks` might indicate the following references:
//
// - Which tax rates are valid to use on the line item of a bill.
// - Which items can be used when creating an invoice.
//
// You can use `validDatatypeLinks` to present your SMB customers with only valid choices when selecting objects from a list, for example.
//
// ## `validDatatypeLinks` example
//
// The following example uses the `Accounting.Accounts` data type. It shows that, on the linked integration, this account is valid as the account on a payment or bill payment; and as the account referenced on the line item of a direct income or direct cost. Because there is no valid link to Invoices or Bills, using this account on those data types will result in an error.
//
// ```json validDatatypeLinks for an account
//
//	{
//	            "id": "bd9e85e0-0478-433d-ae9f-0b3c4f04bfe4",
//	            "nominalCode": "090",
//	            "name": "Business Bank Account",
//	            #...
//	            "validDatatypeLinks": [
//	                {
//	                    "property": "Id",
//	                    "links": [
//	                        "Payment.AccountRef.Id",
//	                        "BillPayment.AccountRef.Id",
//	                        "DirectIncome.LineItems.AccountRef.Id",
//	                        "DirectCost.LineItems.AccountRef.Id"
//	                    ]
//	                }
//	            ]
//	        }
//
// ```
//
// ## Support for `validDatatypeLinks`
//
// Codat currently supports `validDatatypeLinks` for some data types on our Xero, QuickBooks Online, QuickBooks Desktop, Exact (NL), and Sage Business Cloud integrations.
//
// If you'd like us to extend support to more data types or integrations, suggest or vote for this on our <a href="https://portal.productboard.com/codat/5-product-roadmap">Product Roadmap</a>.
type GetAccounts200ApplicationJSONSourceModifiedDateValidDataTypeLinks struct {
	// Supported `dataTypes` that the record can be linked to.
	Links []string `json:"links,omitempty"`
	// The property from the account that can be linked.
	Property *string `json:"property,omitempty"`
}

// GetAccounts200ApplicationJSONSourceModifiedDate - > **Language tip:** Accounts are also referred to as **chart of accounts**, **nominal accounts**, and **general ledger**.
//
// Explore the <a className="external" href="https://api.codat.io/swagger/index.html#/Accounts" target="_blank">Accounts</a> endpoints in Swagger.
//
// View the coverage for accounts in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=chartOfAccounts" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// Accounts are the categories a business uses to record accounting transactions. From the Accounts endpoints, you can retrieve [a list of all accounts for a specified company](https://api.codat.io/swagger/index.html#/Accounts/Accounts_List).
//
// The categories for an account include:
//   - Asset
//   - Expense
//   - Income
//   - Liability
//   - Equity.
//
// > **Accounts with no category**
// >
// > If an account is pulled from the chart of accounts and its nominal code does not lie within the category layout for the company's accounts, then the **type** is `Unknown`. The **fullyQualifiedCategory** and **fullyQualifiedName** fields return `null`.
// >
// > This approach gives a true representation of the company's accounts whilst preventing distorting financials such as a company's profit and loss and balance sheet reports.
type GetAccounts200ApplicationJSONSourceModifiedDate struct {
	// The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. e.g. _GBP_.
	//
	// ## Unknown currencies
	//
	// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
	//
	// There are only a very small number of edge cases where this currency code is returned by the Codat system.
	Currency *string `json:"currency,omitempty"`
	// Current balance in the account.
	CurrentBalance *float64 `json:"currentBalance,omitempty"`
	// Description for the account.
	Description *string `json:"description,omitempty"`
	// Full category of the account. For example:
	// Liability.Current or Income.Revenue. See example data.
	FullyQualifiedCategory *string `json:"fullyQualifiedCategory,omitempty"`
	// Full name of the account, for example:
	// - `Liability.Current.VAT`
	// - `Income.Revenue.Sales`
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty"`
	// Identifier for the account, unique for the company.
	ID *string `json:"id,omitempty"`
	// Confirms whether the account is a bank account or not.
	IsBankAccount bool                                                     `json:"isBankAccount"`
	Metadata      *GetAccounts200ApplicationJSONSourceModifiedDateMetadata `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Name of the account.
	Name *string `json:"name,omitempty"`
	// Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
	NominalCode *string `json:"nominalCode,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Status of the account
	Status GetAccounts200ApplicationJSONSourceModifiedDateStatusEnum `json:"status"`
	// Type of account
	Type GetAccounts200ApplicationJSONSourceModifiedDateTypeEnum `json:"type"`
	// 'The validDatatypeLinks can be used to determine whether an account can be correctly mapped to another object; for example, accounts with a `type` of `income` might only support being used on an Invoice and Direct Income. For more information, see Valid Data Type Links.'
	ValidDatatypeLinks []GetAccounts200ApplicationJSONSourceModifiedDateValidDataTypeLinks `json:"validDatatypeLinks,omitempty"`
}

// GetAccounts200ApplicationJSON - Success
type GetAccounts200ApplicationJSON struct {
	Links        GetAccounts200ApplicationJSONLinks                `json:"_links"`
	PageNumber   int64                                             `json:"pageNumber"`
	PageSize     int64                                             `json:"pageSize"`
	Results      []GetAccounts200ApplicationJSONSourceModifiedDate `json:"results,omitempty"`
	TotalResults int64                                             `json:"totalResults"`
}

type GetAccountsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetAccounts200ApplicationJSONObject *GetAccounts200ApplicationJSON
}
