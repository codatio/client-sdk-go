// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateDirectCostSourceModifiedDateContactRef - A customer or supplier associated with the direct cost.
type CreateDirectCostSourceModifiedDateContactRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       string  `json:"id"`
}

// CreateDirectCostSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type CreateDirectCostSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// CreateDirectCostSourceModifiedDateLineItemsItemRef - Reference to the product, service type, or inventory item to which the direct cost is linked.
type CreateDirectCostSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// CreateDirectCostSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the the line item is linked.
type CreateDirectCostSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// CreateDirectCostSourceModifiedDateLineItemsInvoiceableTrackingInvoiceTo - Links to the underlying record or data type.
//
// Found on:
//
// - Journal entries
// - Account transactions
// - Invoices
// - Transfers
type CreateDirectCostSourceModifiedDateLineItemsInvoiceableTrackingInvoiceTo struct {
	// Name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

// CreateDirectCostSourceModifiedDateLineItemsInvoiceableTrackingRecordRefs - Links to the underlying record or data type.
//
// Found on:
//
// - Journal entries
// - Account transactions
// - Invoices
// - Transfers
type CreateDirectCostSourceModifiedDateLineItemsInvoiceableTrackingRecordRefs struct {
	// Name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

type CreateDirectCostSourceModifiedDateLineItemsInvoiceableTracking struct {
	// Links to the underlying record or data type.
	//
	// Found on:
	//
	// - Journal entries
	// - Account transactions
	// - Invoices
	// - Transfers
	InvoiceTo  *CreateDirectCostSourceModifiedDateLineItemsInvoiceableTrackingInvoiceTo   `json:"invoiceTo,omitempty"`
	RecordRefs []CreateDirectCostSourceModifiedDateLineItemsInvoiceableTrackingRecordRefs `json:"recordRefs"`
}

// CreateDirectCostSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type CreateDirectCostSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type CreateDirectCostSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *CreateDirectCostSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services.
	Description *string `json:"description,omitempty"`
	// Discount amount for the line before tax.
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	// Discount percentage for the line before tax.
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	// Reference to the product, service type, or inventory item to which the direct cost is linked.
	ItemRef *CreateDirectCostSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services received.
	//
	// Note: If the platform does not provide this information, the quantity will be mapped as 1.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the the line item is linked.
	TaxRateRef *CreateDirectCostSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *float64                                                        `json:"totalAmount,omitempty"`
	Tracking    *CreateDirectCostSourceModifiedDateLineItemsInvoiceableTracking `json:"tracking,omitempty"`
	// Collection of categories against which this direct cost is tracked.
	TrackingCategoryRefs []CreateDirectCostSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	// Note: If the platform does not provide this information, the unit amount will be mapped to the total amount.
	UnitAmount float64 `json:"unitAmount"`
}

type CreateDirectCostSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type CreateDirectCostSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// CreateDirectCostSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type CreateDirectCostSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type CreateDirectCostSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *CreateDirectCostSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type CreateDirectCostSourceModifiedDatePaymentAllocations struct {
	Allocation CreateDirectCostSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    CreateDirectCostSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

// CreateDirectCostSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type CreateDirectCostSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// CreateDirectCostSourceModifiedDate - > **Language tip: ** Direct costs may also be referred to as **Spend transactions**, **Spend money transactions**, or **Payments** in various accounting platforms.
//
// > View the coverage for direct costs in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=directCosts" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// Direct costs include:
//   - Purchasing an item and paying it off at the point of the purchase
//   - Receiving cash from a refunded item if the refund is made by the supplier
//   - Withdrawing money from a bank account
//   - Writing a cheque
//
// From the Direct Costs endpoints, you can:
//
//   - [Get a list of all direct costs for a specific company ](https://api.codat.io/swagger/index.html#/DirectCosts/get_companies__companyId__connections__connectionId__data_directCosts)
//   - [Get a single direct cost for a specific company ](https://api.codat.io/swagger/index.html#/DirectCosts/get_companies__companyId__connections__connectionId__data_directCosts__directCostId_)
//   - [Add a new direct cost to a specific company's accounting package](https://api.codat.io/swagger/index.html#/DirectCosts/post_companies__companyId__connections__connectionId__push_directCosts)
//
// Direct costs is a child data type of [account transactions](https://docs.codat.io/accounting-api#/schemas/AccountTransaction).
type CreateDirectCostSourceModifiedDate struct {
	// A customer or supplier associated with the direct cost.
	ContactRef *CreateDirectCostSourceModifiedDateContactRef `json:"contactRef,omitempty"`
	// Currency of the direct cost.
	Currency string `json:"currency"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the direct cost, unique for the company.
	ID *string `json:"id,omitempty"`
	// Date of the direct cost as recorded in the accounting platform.Date of the direct cost as recorded in the accounting platform.
	IssueDate string `json:"issueDate"`
	// An array of line items.
	LineItems []CreateDirectCostSourceModifiedDateLineItems `json:"lineItems"`
	Metadata  *CreateDirectCostSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// A note attached to the direct cost.
	Note *string `json:"note,omitempty"`
	// An array of payment allocations.
	PaymentAllocations []CreateDirectCostSourceModifiedDatePaymentAllocations `json:"paymentAllocations"`
	// User-friendly reference for the direct cost.
	Reference *string `json:"reference,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// The total amount of the direct costs, excluding any taxes.
	SubTotal float64 `json:"subTotal"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *CreateDirectCostSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// The total amount of tax on the direct costs.
	TaxAmount float64 `json:"taxAmount"`
	// The amount of the direct costs, inclusive of tax.
	TotalAmount float64 `json:"totalAmount"`
}

type CreateDirectCostRequest struct {
	RequestBody      *CreateDirectCostSourceModifiedDate `request:"mediaType=application/json"`
	CompanyID        string                              `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID     string                              `pathParam:"style=simple,explode=false,name=connectionId"`
	TimeoutInMinutes *int                                `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

type CreateDirectCost200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type CreateDirectCost200ApplicationJSONChangesTypeEnum string

const (
	CreateDirectCost200ApplicationJSONChangesTypeEnumUnknown            CreateDirectCost200ApplicationJSONChangesTypeEnum = "Unknown"
	CreateDirectCost200ApplicationJSONChangesTypeEnumCreated            CreateDirectCost200ApplicationJSONChangesTypeEnum = "Created"
	CreateDirectCost200ApplicationJSONChangesTypeEnumModified           CreateDirectCost200ApplicationJSONChangesTypeEnum = "Modified"
	CreateDirectCost200ApplicationJSONChangesTypeEnumDeleted            CreateDirectCost200ApplicationJSONChangesTypeEnum = "Deleted"
	CreateDirectCost200ApplicationJSONChangesTypeEnumAttachmentUploaded CreateDirectCost200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

func (e *CreateDirectCost200ApplicationJSONChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = CreateDirectCost200ApplicationJSONChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDirectCost200ApplicationJSONChangesTypeEnum: %s", s)
	}
}

type CreateDirectCost200ApplicationJSONChanges struct {
	AttachmentID *string                                                          `json:"attachmentId,omitempty"`
	RecordRef    *CreateDirectCost200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *CreateDirectCost200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateContactRef - A customer or supplier associated with the direct cost.
type CreateDirectCost200ApplicationJSONSourceModifiedDateContactRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       string  `json:"id"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsItemRef - Reference to the product, service type, or inventory item to which the direct cost is linked.
type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the the line item is linked.
type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTrackingInvoiceTo - Links to the underlying record or data type.
//
// Found on:
//
// - Journal entries
// - Account transactions
// - Invoices
// - Transfers
type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTrackingInvoiceTo struct {
	// Name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTrackingRecordRefs - Links to the underlying record or data type.
//
// Found on:
//
// - Journal entries
// - Account transactions
// - Invoices
// - Transfers
type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTrackingRecordRefs struct {
	// Name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTracking struct {
	// Links to the underlying record or data type.
	//
	// Found on:
	//
	// - Journal entries
	// - Account transactions
	// - Invoices
	// - Transfers
	InvoiceTo  *CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTrackingInvoiceTo   `json:"invoiceTo,omitempty"`
	RecordRefs []CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTrackingRecordRefs `json:"recordRefs"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type CreateDirectCost200ApplicationJSONSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services.
	Description *string `json:"description,omitempty"`
	// Discount amount for the line before tax.
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	// Discount percentage for the line before tax.
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	// Reference to the product, service type, or inventory item to which the direct cost is linked.
	ItemRef *CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services received.
	//
	// Note: If the platform does not provide this information, the quantity will be mapped as 1.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the the line item is linked.
	TaxRateRef *CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *float64                                                                          `json:"totalAmount,omitempty"`
	Tracking    *CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsInvoiceableTracking `json:"tracking,omitempty"`
	// Collection of categories against which this direct cost is tracked.
	TrackingCategoryRefs []CreateDirectCost200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	// Note: If the platform does not provide this information, the unit amount will be mapped to the total amount.
	UnitAmount float64 `json:"unitAmount"`
}

type CreateDirectCost200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocations struct {
	Allocation CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type CreateDirectCost200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// CreateDirectCost200ApplicationJSONSourceModifiedDate - > **Language tip: ** Direct costs may also be referred to as **Spend transactions**, **Spend money transactions**, or **Payments** in various accounting platforms.
//
// > View the coverage for direct costs in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=directCosts" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// Direct costs include:
//   - Purchasing an item and paying it off at the point of the purchase
//   - Receiving cash from a refunded item if the refund is made by the supplier
//   - Withdrawing money from a bank account
//   - Writing a cheque
//
// From the Direct Costs endpoints, you can:
//
//   - [Get a list of all direct costs for a specific company ](https://api.codat.io/swagger/index.html#/DirectCosts/get_companies__companyId__connections__connectionId__data_directCosts)
//   - [Get a single direct cost for a specific company ](https://api.codat.io/swagger/index.html#/DirectCosts/get_companies__companyId__connections__connectionId__data_directCosts__directCostId_)
//   - [Add a new direct cost to a specific company's accounting package](https://api.codat.io/swagger/index.html#/DirectCosts/post_companies__companyId__connections__connectionId__push_directCosts)
//
// Direct costs is a child data type of [account transactions](https://docs.codat.io/accounting-api#/schemas/AccountTransaction).
type CreateDirectCost200ApplicationJSONSourceModifiedDate struct {
	// A customer or supplier associated with the direct cost.
	ContactRef *CreateDirectCost200ApplicationJSONSourceModifiedDateContactRef `json:"contactRef,omitempty"`
	// Currency of the direct cost.
	Currency string `json:"currency"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the direct cost, unique for the company.
	ID *string `json:"id,omitempty"`
	// Date of the direct cost as recorded in the accounting platform.Date of the direct cost as recorded in the accounting platform.
	IssueDate string `json:"issueDate"`
	// An array of line items.
	LineItems []CreateDirectCost200ApplicationJSONSourceModifiedDateLineItems `json:"lineItems"`
	Metadata  *CreateDirectCost200ApplicationJSONSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// A note attached to the direct cost.
	Note *string `json:"note,omitempty"`
	// An array of payment allocations.
	PaymentAllocations []CreateDirectCost200ApplicationJSONSourceModifiedDatePaymentAllocations `json:"paymentAllocations"`
	// User-friendly reference for the direct cost.
	Reference *string `json:"reference,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// The total amount of the direct costs, excluding any taxes.
	SubTotal float64 `json:"subTotal"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *CreateDirectCost200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// The total amount of tax on the direct costs.
	TaxAmount float64 `json:"taxAmount"`
	// The amount of the direct costs, inclusive of tax.
	TotalAmount float64 `json:"totalAmount"`
}

// CreateDirectCost200ApplicationJSONStatusEnum - The status of the push operation.
type CreateDirectCost200ApplicationJSONStatusEnum string

const (
	CreateDirectCost200ApplicationJSONStatusEnumPending  CreateDirectCost200ApplicationJSONStatusEnum = "Pending"
	CreateDirectCost200ApplicationJSONStatusEnumFailed   CreateDirectCost200ApplicationJSONStatusEnum = "Failed"
	CreateDirectCost200ApplicationJSONStatusEnumSuccess  CreateDirectCost200ApplicationJSONStatusEnum = "Success"
	CreateDirectCost200ApplicationJSONStatusEnumTimedOut CreateDirectCost200ApplicationJSONStatusEnum = "TimedOut"
)

func (e *CreateDirectCost200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = CreateDirectCost200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDirectCost200ApplicationJSONStatusEnum: %s", s)
	}
}

type CreateDirectCost200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// CreateDirectCost200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type CreateDirectCost200ApplicationJSONValidation struct {
	Errors   []CreateDirectCost200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []CreateDirectCost200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// CreateDirectCost200ApplicationJSON - Success
type CreateDirectCost200ApplicationJSON struct {
	Changes []CreateDirectCost200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// > **Language tip: ** Direct costs may also be referred to as **Spend transactions**, **Spend money transactions**, or **Payments** in various accounting platforms.
	//
	// > View the coverage for direct costs in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=directCosts" target="_blank">Data coverage explorer</a>.
	//
	// ## Overview
	//
	// Direct costs include:
	//   * Purchasing an item and paying it off at the point of the purchase
	//   * Receiving cash from a refunded item if the refund is made by the supplier
	//   * Withdrawing money from a bank account
	//   * Writing a cheque
	//
	// From the Direct Costs endpoints, you can:
	//
	//   * [Get a list of all direct costs for a specific company ](https://api.codat.io/swagger/index.html#/DirectCosts/get_companies__companyId__connections__connectionId__data_directCosts)
	//   * [Get a single direct cost for a specific company ](https://api.codat.io/swagger/index.html#/DirectCosts/get_companies__companyId__connections__connectionId__data_directCosts__directCostId_)
	//   * [Add a new direct cost to a specific company's accounting package](https://api.codat.io/swagger/index.html#/DirectCosts/post_companies__companyId__connections__connectionId__push_directCosts)
	//
	// Direct costs is a child data type of [account transactions](https://docs.codat.io/accounting-api#/schemas/AccountTransaction).
	Data *CreateDirectCost200ApplicationJSONSourceModifiedDate `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           CreateDirectCost200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                          `json:"statusCode"`
	TimeoutInMinutes *int                                         `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                         `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *CreateDirectCost200ApplicationJSONValidation `json:"validation,omitempty"`
}

type CreateDirectCostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	CreateDirectCost200ApplicationJSONObject *CreateDirectCost200ApplicationJSON
}
