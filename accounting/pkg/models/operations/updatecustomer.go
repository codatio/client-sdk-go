// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateCustomerSourceModifiedDateAddressesTypeEnum - Type of the address.
type UpdateCustomerSourceModifiedDateAddressesTypeEnum string

const (
	UpdateCustomerSourceModifiedDateAddressesTypeEnumUnknown  UpdateCustomerSourceModifiedDateAddressesTypeEnum = "Unknown"
	UpdateCustomerSourceModifiedDateAddressesTypeEnumBilling  UpdateCustomerSourceModifiedDateAddressesTypeEnum = "Billing"
	UpdateCustomerSourceModifiedDateAddressesTypeEnumDelivery UpdateCustomerSourceModifiedDateAddressesTypeEnum = "Delivery"
)

func (e *UpdateCustomerSourceModifiedDateAddressesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = UpdateCustomerSourceModifiedDateAddressesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerSourceModifiedDateAddressesTypeEnum: %s", s)
	}
}

type UpdateCustomerSourceModifiedDateAddresses struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type UpdateCustomerSourceModifiedDateAddressesTypeEnum `json:"type"`
}

// UpdateCustomerSourceModifiedDateContactsAddressTypeEnum - Type of the address.
type UpdateCustomerSourceModifiedDateContactsAddressTypeEnum string

const (
	UpdateCustomerSourceModifiedDateContactsAddressTypeEnumUnknown  UpdateCustomerSourceModifiedDateContactsAddressTypeEnum = "Unknown"
	UpdateCustomerSourceModifiedDateContactsAddressTypeEnumBilling  UpdateCustomerSourceModifiedDateContactsAddressTypeEnum = "Billing"
	UpdateCustomerSourceModifiedDateContactsAddressTypeEnumDelivery UpdateCustomerSourceModifiedDateContactsAddressTypeEnum = "Delivery"
)

func (e *UpdateCustomerSourceModifiedDateContactsAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = UpdateCustomerSourceModifiedDateContactsAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerSourceModifiedDateContactsAddressTypeEnum: %s", s)
	}
}

// UpdateCustomerSourceModifiedDateContactsAddress - An object of Address information.
type UpdateCustomerSourceModifiedDateContactsAddress struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type UpdateCustomerSourceModifiedDateContactsAddressTypeEnum `json:"type"`
}

// UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum - Type of phone number.
type UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum string

const (
	UpdateCustomerSourceModifiedDateContactsPhoneTypeEnumUnknown  UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Unknown"
	UpdateCustomerSourceModifiedDateContactsPhoneTypeEnumPrimary  UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Primary"
	UpdateCustomerSourceModifiedDateContactsPhoneTypeEnumLandline UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Landline"
	UpdateCustomerSourceModifiedDateContactsPhoneTypeEnumMobile   UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Mobile"
	UpdateCustomerSourceModifiedDateContactsPhoneTypeEnumFax      UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Fax"
)

func (e *UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Primary":
		fallthrough
	case "Landline":
		fallthrough
	case "Mobile":
		fallthrough
	case "Fax":
		*e = UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum: %s", s)
	}
}

type UpdateCustomerSourceModifiedDateContactsPhone struct {
	// Phone number for a customer contact.
	Number *string `json:"number,omitempty"`
	// Type of phone number.
	Type UpdateCustomerSourceModifiedDateContactsPhoneTypeEnum `json:"type"`
}

// UpdateCustomerSourceModifiedDateContactsStatusEnum - Status of customer contacts.
//
// Customers can have multiple contacts.
type UpdateCustomerSourceModifiedDateContactsStatusEnum string

const (
	UpdateCustomerSourceModifiedDateContactsStatusEnumUnknown  UpdateCustomerSourceModifiedDateContactsStatusEnum = "Unknown"
	UpdateCustomerSourceModifiedDateContactsStatusEnumActive   UpdateCustomerSourceModifiedDateContactsStatusEnum = "Active"
	UpdateCustomerSourceModifiedDateContactsStatusEnumArchived UpdateCustomerSourceModifiedDateContactsStatusEnum = "Archived"
)

func (e *UpdateCustomerSourceModifiedDateContactsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = UpdateCustomerSourceModifiedDateContactsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerSourceModifiedDateContactsStatusEnum: %s", s)
	}
}

type UpdateCustomerSourceModifiedDateContacts struct {
	// An object of Address information.
	Address *UpdateCustomerSourceModifiedDateContactsAddress `json:"address,omitempty"`
	// Email of a contact for a customer.
	Email *string `json:"email,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Name of a contact for a customer.
	Name *string `json:"name,omitempty"`
	// An array of Phone numbers.
	Phone []UpdateCustomerSourceModifiedDateContactsPhone `json:"phone,omitempty"`
	// Status of customer contacts.
	//
	// Customers can have multiple contacts.
	Status UpdateCustomerSourceModifiedDateContactsStatusEnum `json:"status"`
}

type UpdateCustomerSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// UpdateCustomerSourceModifiedDateStatusEnum - Current state of the customer.
type UpdateCustomerSourceModifiedDateStatusEnum string

const (
	UpdateCustomerSourceModifiedDateStatusEnumUnknown  UpdateCustomerSourceModifiedDateStatusEnum = "Unknown"
	UpdateCustomerSourceModifiedDateStatusEnumActive   UpdateCustomerSourceModifiedDateStatusEnum = "Active"
	UpdateCustomerSourceModifiedDateStatusEnumArchived UpdateCustomerSourceModifiedDateStatusEnum = "Archived"
)

func (e *UpdateCustomerSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = UpdateCustomerSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerSourceModifiedDateStatusEnum: %s", s)
	}
}

// UpdateCustomerSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type UpdateCustomerSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// UpdateCustomerSourceModifiedDate - > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
//
// Customers' data links to accounts receivable [invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
type UpdateCustomerSourceModifiedDate struct {
	// An array of Addresses.
	Addresses []UpdateCustomerSourceModifiedDateAddresses `json:"addresses,omitempty"`
	// Name of the main contact for the identified customer.
	ContactName *string `json:"contactName,omitempty"`
	// An array of Contacts.
	Contacts []UpdateCustomerSourceModifiedDateContacts `json:"contacts,omitempty"`
	// Name of the customer as recorded in the accounting system, typically the company name.
	CustomerName *string `json:"customerName,omitempty"`
	// Default currency the transactional data of the customer is recorded in.
	DefaultCurrency *string `json:"defaultCurrency,omitempty"`
	// Email address the customer can be contacted by.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Identifier for the customer, unique to the company in the accounting platform.
	ID       *string                                   `json:"id,omitempty"`
	Metadata *UpdateCustomerSourceModifiedDateMetadata `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Phone number the customer can be contacted by.
	Phone *string `json:"phone,omitempty"`
	// Company number. In the UK, this is typically the Companies House company registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the customer.
	Status UpdateCustomerSourceModifiedDateStatusEnum `json:"status"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *UpdateCustomerSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Company tax number.
	TaxNumber *string `json:"taxNumber,omitempty"`
}

type UpdateCustomerRequest struct {
	RequestBody      *UpdateCustomerSourceModifiedDate `request:"mediaType=application/json"`
	CompanyID        string                            `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID     string                            `pathParam:"style=simple,explode=false,name=connectionId"`
	CustomerID       string                            `pathParam:"style=simple,explode=false,name=customerId"`
	ForceUpdate      *bool                             `queryParam:"style=form,explode=true,name=forceUpdate"`
	TimeoutInMinutes *int                              `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

type UpdateCustomer200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type UpdateCustomer200ApplicationJSONChangesTypeEnum string

const (
	UpdateCustomer200ApplicationJSONChangesTypeEnumUnknown            UpdateCustomer200ApplicationJSONChangesTypeEnum = "Unknown"
	UpdateCustomer200ApplicationJSONChangesTypeEnumCreated            UpdateCustomer200ApplicationJSONChangesTypeEnum = "Created"
	UpdateCustomer200ApplicationJSONChangesTypeEnumModified           UpdateCustomer200ApplicationJSONChangesTypeEnum = "Modified"
	UpdateCustomer200ApplicationJSONChangesTypeEnumDeleted            UpdateCustomer200ApplicationJSONChangesTypeEnum = "Deleted"
	UpdateCustomer200ApplicationJSONChangesTypeEnumAttachmentUploaded UpdateCustomer200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

func (e *UpdateCustomer200ApplicationJSONChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = UpdateCustomer200ApplicationJSONChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONChangesTypeEnum: %s", s)
	}
}

type UpdateCustomer200ApplicationJSONChanges struct {
	AttachmentID *string                                                        `json:"attachmentId,omitempty"`
	RecordRef    *UpdateCustomer200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *UpdateCustomer200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum - Type of the address.
type UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum string

const (
	UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnumUnknown  UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum = "Unknown"
	UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnumBilling  UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum = "Billing"
	UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnumDelivery UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum = "Delivery"
)

func (e *UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum: %s", s)
	}
}

type UpdateCustomer200ApplicationJSONSourceModifiedDateAddresses struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type UpdateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum `json:"type"`
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum - Type of the address.
type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum string

const (
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnumUnknown  UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum = "Unknown"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnumBilling  UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum = "Billing"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnumDelivery UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum = "Delivery"
)

func (e *UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum: %s", s)
	}
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddress - An object of Address information.
type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddress struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum `json:"type"`
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum - Type of phone number.
type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum string

const (
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumUnknown  UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Unknown"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumPrimary  UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Primary"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumLandline UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Landline"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumMobile   UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Mobile"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumFax      UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Fax"
)

func (e *UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Primary":
		fallthrough
	case "Landline":
		fallthrough
	case "Mobile":
		fallthrough
	case "Fax":
		*e = UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum: %s", s)
	}
}

type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhone struct {
	// Phone number for a customer contact.
	Number *string `json:"number,omitempty"`
	// Type of phone number.
	Type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum `json:"type"`
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum - Status of customer contacts.
//
// Customers can have multiple contacts.
type UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum string

const (
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnumUnknown  UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum = "Unknown"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnumActive   UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum = "Active"
	UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnumArchived UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum = "Archived"
)

func (e *UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum: %s", s)
	}
}

type UpdateCustomer200ApplicationJSONSourceModifiedDateContacts struct {
	// An object of Address information.
	Address *UpdateCustomer200ApplicationJSONSourceModifiedDateContactsAddress `json:"address,omitempty"`
	// Email of a contact for a customer.
	Email *string `json:"email,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Name of a contact for a customer.
	Name *string `json:"name,omitempty"`
	// An array of Phone numbers.
	Phone []UpdateCustomer200ApplicationJSONSourceModifiedDateContactsPhone `json:"phone,omitempty"`
	// Status of customer contacts.
	//
	// Customers can have multiple contacts.
	Status UpdateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum `json:"status"`
}

type UpdateCustomer200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum - Current state of the customer.
type UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum string

const (
	UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnumUnknown  UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum = "Unknown"
	UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnumActive   UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum = "Active"
	UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnumArchived UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum = "Archived"
)

func (e *UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum: %s", s)
	}
}

// UpdateCustomer200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type UpdateCustomer200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// UpdateCustomer200ApplicationJSONSourceModifiedDate - > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
//
// Customers' data links to accounts receivable [invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
type UpdateCustomer200ApplicationJSONSourceModifiedDate struct {
	// An array of Addresses.
	Addresses []UpdateCustomer200ApplicationJSONSourceModifiedDateAddresses `json:"addresses,omitempty"`
	// Name of the main contact for the identified customer.
	ContactName *string `json:"contactName,omitempty"`
	// An array of Contacts.
	Contacts []UpdateCustomer200ApplicationJSONSourceModifiedDateContacts `json:"contacts,omitempty"`
	// Name of the customer as recorded in the accounting system, typically the company name.
	CustomerName *string `json:"customerName,omitempty"`
	// Default currency the transactional data of the customer is recorded in.
	DefaultCurrency *string `json:"defaultCurrency,omitempty"`
	// Email address the customer can be contacted by.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Identifier for the customer, unique to the company in the accounting platform.
	ID       *string                                                     `json:"id,omitempty"`
	Metadata *UpdateCustomer200ApplicationJSONSourceModifiedDateMetadata `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Phone number the customer can be contacted by.
	Phone *string `json:"phone,omitempty"`
	// Company number. In the UK, this is typically the Companies House company registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the customer.
	Status UpdateCustomer200ApplicationJSONSourceModifiedDateStatusEnum `json:"status"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *UpdateCustomer200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Company tax number.
	TaxNumber *string `json:"taxNumber,omitempty"`
}

// UpdateCustomer200ApplicationJSONStatusEnum - The status of the push operation.
type UpdateCustomer200ApplicationJSONStatusEnum string

const (
	UpdateCustomer200ApplicationJSONStatusEnumPending  UpdateCustomer200ApplicationJSONStatusEnum = "Pending"
	UpdateCustomer200ApplicationJSONStatusEnumFailed   UpdateCustomer200ApplicationJSONStatusEnum = "Failed"
	UpdateCustomer200ApplicationJSONStatusEnumSuccess  UpdateCustomer200ApplicationJSONStatusEnum = "Success"
	UpdateCustomer200ApplicationJSONStatusEnumTimedOut UpdateCustomer200ApplicationJSONStatusEnum = "TimedOut"
)

func (e *UpdateCustomer200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = UpdateCustomer200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomer200ApplicationJSONStatusEnum: %s", s)
	}
}

type UpdateCustomer200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// UpdateCustomer200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type UpdateCustomer200ApplicationJSONValidation struct {
	Errors   []UpdateCustomer200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []UpdateCustomer200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// UpdateCustomer200ApplicationJSON - Success
type UpdateCustomer200ApplicationJSON struct {
	Changes []UpdateCustomer200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
	//
	// ## Overview
	//
	// A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
	//
	// Customers' data links to accounts receivable [invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
	//
	Data *UpdateCustomer200ApplicationJSONSourceModifiedDate `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           UpdateCustomer200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                        `json:"statusCode"`
	TimeoutInMinutes *int                                       `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                       `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *UpdateCustomer200ApplicationJSONValidation `json:"validation,omitempty"`
}

type UpdateCustomerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UpdateCustomer200ApplicationJSONObject *UpdateCustomer200ApplicationJSON
}
