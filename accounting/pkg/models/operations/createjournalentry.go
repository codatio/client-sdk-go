// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateJournalEntrySourceModifiedDateJournalLinesAccountRef - Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
type CreateJournalEntrySourceModifiedDateJournalLinesAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// CreateJournalEntrySourceModifiedDateJournalLinesTracking - List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
type CreateJournalEntrySourceModifiedDateJournalLinesTracking struct {
	RecordRefs []string `json:"recordRefs,omitempty"`
}

type CreateJournalEntrySourceModifiedDateJournalLines struct {
	// Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
	AccountRef *CreateJournalEntrySourceModifiedDateJournalLinesAccountRef `json:"accountRef,omitempty"`
	// Currency for the journal line item.
	Currency *string `json:"currency,omitempty"`
	// Description of the journal line item.
	Description *string `json:"description,omitempty"`
	// Amount for the journal line. Debit entries are considered positive, and credit entries are considered negative.
	NetAmount float64 `json:"netAmount"`
	// List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
	Tracking *CreateJournalEntrySourceModifiedDateJournalLinesTracking `json:"tracking,omitempty"`
}

// CreateJournalEntrySourceModifiedDateJournalRef - Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
type CreateJournalEntrySourceModifiedDateJournalRef struct {
	// GUID of the underlying journal.
	ID string `json:"id"`
	// Journal name, 256 characters max.
	Name *string `json:"name,omitempty"`
}

type CreateJournalEntrySourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// CreateJournalEntrySourceModifiedDateRecordRef - Links to the underlying record or data type.
//
// Found on:
//
// - Journal entries
// - Account transactions
// - Invoices
// - Transfers
type CreateJournalEntrySourceModifiedDateRecordRef struct {
	// Name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

// CreateJournalEntrySourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type CreateJournalEntrySourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// CreateJournalEntrySourceModifiedDate - > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/accounting-api#/schemas/Journal) data type
//
// > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// A journal entry report shows the entries made in a company's general ledger, or [accounts](https://api.codat.io/swagger/index.html#/Accounts/get_companies__companyId__data_accounts), when transactions are approved. The journal line items for each journal entry should balance.
//
// A journal entry line item is a single transaction line on the journal entry. For example:
//
// - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
// - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
//
// In Codat a journal entry contains details of:
//
// - The date on which the entry was created and posted.
// - Itemised lines, including amounts and currency.
// - A reference to the associated accounts.
// - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
//
// > **Pushing journal entries **
// > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
type CreateJournalEntrySourceModifiedDate struct {
	// Date on which the journal was created in the accounting platform.
	CreatedOn *string `json:"createdOn,omitempty"`
	// Optional description of the journal entry.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the journal entry for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// An array of journal lines.
	JournalLines []CreateJournalEntrySourceModifiedDateJournalLines `json:"journalLines,omitempty"`
	// Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
	JournalRef *CreateJournalEntrySourceModifiedDateJournalRef `json:"journalRef,omitempty"`
	Metadata   *CreateJournalEntrySourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Date on which the journal entry was posted to the accounting platform, and had an impact on the general ledger. This may be different from the creation date.
	//
	// For example, a user creates a journal entry on Monday and saves it as draft, which has no impact on the general ledger. On Thursday, they return to the entry and post it.
	//
	// The **createdOn** date shows as Monday.
	// The **postedOn** date shows as Thursday.
	// Journal entries can also be backdated, so the **postedOn** date may be earlier than the **createdOn** date.
	PostedOn *string `json:"postedOn,omitempty"`
	// Links to the underlying record or data type.
	//
	// Found on:
	//
	// - Journal entries
	// - Account transactions
	// - Invoices
	// - Transfers
	RecordRef *CreateJournalEntrySourceModifiedDateRecordRef `json:"recordRef,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *CreateJournalEntrySourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Date on which the journal was last updated in the accounting platform.
	UpdatedOn *string `json:"updatedOn,omitempty"`
}

type CreateJournalEntryRequest struct {
	RequestBody      *CreateJournalEntrySourceModifiedDate `request:"mediaType=application/json"`
	CompanyID        string                                `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID     string                                `pathParam:"style=simple,explode=false,name=connectionId"`
	TimeoutInMinutes *int                                  `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

type CreateJournalEntry200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type CreateJournalEntry200ApplicationJSONChangesTypeEnum string

const (
	CreateJournalEntry200ApplicationJSONChangesTypeEnumUnknown            CreateJournalEntry200ApplicationJSONChangesTypeEnum = "Unknown"
	CreateJournalEntry200ApplicationJSONChangesTypeEnumCreated            CreateJournalEntry200ApplicationJSONChangesTypeEnum = "Created"
	CreateJournalEntry200ApplicationJSONChangesTypeEnumModified           CreateJournalEntry200ApplicationJSONChangesTypeEnum = "Modified"
	CreateJournalEntry200ApplicationJSONChangesTypeEnumDeleted            CreateJournalEntry200ApplicationJSONChangesTypeEnum = "Deleted"
	CreateJournalEntry200ApplicationJSONChangesTypeEnumAttachmentUploaded CreateJournalEntry200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

func (e *CreateJournalEntry200ApplicationJSONChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = CreateJournalEntry200ApplicationJSONChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateJournalEntry200ApplicationJSONChangesTypeEnum: %s", s)
	}
}

type CreateJournalEntry200ApplicationJSONChanges struct {
	AttachmentID *string                                                            `json:"attachmentId,omitempty"`
	RecordRef    *CreateJournalEntry200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *CreateJournalEntry200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesAccountRef - Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
type CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesTracking - List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
type CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesTracking struct {
	RecordRefs []string `json:"recordRefs,omitempty"`
}

type CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLines struct {
	// Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
	AccountRef *CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesAccountRef `json:"accountRef,omitempty"`
	// Currency for the journal line item.
	Currency *string `json:"currency,omitempty"`
	// Description of the journal line item.
	Description *string `json:"description,omitempty"`
	// Amount for the journal line. Debit entries are considered positive, and credit entries are considered negative.
	NetAmount float64 `json:"netAmount"`
	// List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
	Tracking *CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesTracking `json:"tracking,omitempty"`
}

// CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalRef - Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
type CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalRef struct {
	// GUID of the underlying journal.
	ID string `json:"id"`
	// Journal name, 256 characters max.
	Name *string `json:"name,omitempty"`
}

type CreateJournalEntry200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// CreateJournalEntry200ApplicationJSONSourceModifiedDateRecordRef - Links to the underlying record or data type.
//
// Found on:
//
// - Journal entries
// - Account transactions
// - Invoices
// - Transfers
type CreateJournalEntry200ApplicationJSONSourceModifiedDateRecordRef struct {
	// Name of the 'dataType'.
	DataType *string `json:"dataType,omitempty"`
	// 'id' of the underlying record or data type.
	ID *string `json:"id,omitempty"`
}

// CreateJournalEntry200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type CreateJournalEntry200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// CreateJournalEntry200ApplicationJSONSourceModifiedDate - > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/accounting-api#/schemas/Journal) data type
//
// > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// A journal entry report shows the entries made in a company's general ledger, or [accounts](https://api.codat.io/swagger/index.html#/Accounts/get_companies__companyId__data_accounts), when transactions are approved. The journal line items for each journal entry should balance.
//
// A journal entry line item is a single transaction line on the journal entry. For example:
//
// - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
// - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
//
// In Codat a journal entry contains details of:
//
// - The date on which the entry was created and posted.
// - Itemised lines, including amounts and currency.
// - A reference to the associated accounts.
// - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
//
// > **Pushing journal entries **
// > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
type CreateJournalEntry200ApplicationJSONSourceModifiedDate struct {
	// Date on which the journal was created in the accounting platform.
	CreatedOn *string `json:"createdOn,omitempty"`
	// Optional description of the journal entry.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the journal entry for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// An array of journal lines.
	JournalLines []CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLines `json:"journalLines,omitempty"`
	// Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
	JournalRef *CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalRef `json:"journalRef,omitempty"`
	Metadata   *CreateJournalEntry200ApplicationJSONSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Date on which the journal entry was posted to the accounting platform, and had an impact on the general ledger. This may be different from the creation date.
	//
	// For example, a user creates a journal entry on Monday and saves it as draft, which has no impact on the general ledger. On Thursday, they return to the entry and post it.
	//
	// The **createdOn** date shows as Monday.
	// The **postedOn** date shows as Thursday.
	// Journal entries can also be backdated, so the **postedOn** date may be earlier than the **createdOn** date.
	PostedOn *string `json:"postedOn,omitempty"`
	// Links to the underlying record or data type.
	//
	// Found on:
	//
	// - Journal entries
	// - Account transactions
	// - Invoices
	// - Transfers
	RecordRef *CreateJournalEntry200ApplicationJSONSourceModifiedDateRecordRef `json:"recordRef,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *CreateJournalEntry200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Date on which the journal was last updated in the accounting platform.
	UpdatedOn *string `json:"updatedOn,omitempty"`
}

// CreateJournalEntry200ApplicationJSONStatusEnum - The status of the push operation.
type CreateJournalEntry200ApplicationJSONStatusEnum string

const (
	CreateJournalEntry200ApplicationJSONStatusEnumPending  CreateJournalEntry200ApplicationJSONStatusEnum = "Pending"
	CreateJournalEntry200ApplicationJSONStatusEnumFailed   CreateJournalEntry200ApplicationJSONStatusEnum = "Failed"
	CreateJournalEntry200ApplicationJSONStatusEnumSuccess  CreateJournalEntry200ApplicationJSONStatusEnum = "Success"
	CreateJournalEntry200ApplicationJSONStatusEnumTimedOut CreateJournalEntry200ApplicationJSONStatusEnum = "TimedOut"
)

func (e *CreateJournalEntry200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = CreateJournalEntry200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateJournalEntry200ApplicationJSONStatusEnum: %s", s)
	}
}

type CreateJournalEntry200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// CreateJournalEntry200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type CreateJournalEntry200ApplicationJSONValidation struct {
	Errors   []CreateJournalEntry200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []CreateJournalEntry200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// CreateJournalEntry200ApplicationJSON - Success
type CreateJournalEntry200ApplicationJSON struct {
	Changes []CreateJournalEntry200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/accounting-api#/schemas/Journal) data type
	//
	// > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
	//
	// ## Overview
	//
	// A journal entry report shows the entries made in a company's general ledger, or [accounts](https://api.codat.io/swagger/index.html#/Accounts/get_companies__companyId__data_accounts), when transactions are approved. The journal line items for each journal entry should balance.
	//
	// A journal entry line item is a single transaction line on the journal entry. For example:
	//
	// - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
	// - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
	//
	// In Codat a journal entry contains details of:
	//
	// - The date on which the entry was created and posted.
	// - Itemised lines, including amounts and currency.
	// - A reference to the associated accounts.
	// - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
	//
	// > **Pushing journal entries **
	// > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
	Data *CreateJournalEntry200ApplicationJSONSourceModifiedDate `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           CreateJournalEntry200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                            `json:"statusCode"`
	TimeoutInMinutes *int                                           `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                           `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *CreateJournalEntry200ApplicationJSONValidation `json:"validation,omitempty"`
}

type CreateJournalEntryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	CreateJournalEntry200ApplicationJSONObject *CreateJournalEntry200ApplicationJSON
}
