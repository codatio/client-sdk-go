// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateCustomerSourceModifiedDateAddressesTypeEnum - Type of the address.
type CreateCustomerSourceModifiedDateAddressesTypeEnum string

const (
	CreateCustomerSourceModifiedDateAddressesTypeEnumUnknown  CreateCustomerSourceModifiedDateAddressesTypeEnum = "Unknown"
	CreateCustomerSourceModifiedDateAddressesTypeEnumBilling  CreateCustomerSourceModifiedDateAddressesTypeEnum = "Billing"
	CreateCustomerSourceModifiedDateAddressesTypeEnumDelivery CreateCustomerSourceModifiedDateAddressesTypeEnum = "Delivery"
)

func (e *CreateCustomerSourceModifiedDateAddressesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = CreateCustomerSourceModifiedDateAddressesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerSourceModifiedDateAddressesTypeEnum: %s", s)
	}
}

type CreateCustomerSourceModifiedDateAddresses struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type CreateCustomerSourceModifiedDateAddressesTypeEnum `json:"type"`
}

// CreateCustomerSourceModifiedDateContactsAddressTypeEnum - Type of the address.
type CreateCustomerSourceModifiedDateContactsAddressTypeEnum string

const (
	CreateCustomerSourceModifiedDateContactsAddressTypeEnumUnknown  CreateCustomerSourceModifiedDateContactsAddressTypeEnum = "Unknown"
	CreateCustomerSourceModifiedDateContactsAddressTypeEnumBilling  CreateCustomerSourceModifiedDateContactsAddressTypeEnum = "Billing"
	CreateCustomerSourceModifiedDateContactsAddressTypeEnumDelivery CreateCustomerSourceModifiedDateContactsAddressTypeEnum = "Delivery"
)

func (e *CreateCustomerSourceModifiedDateContactsAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = CreateCustomerSourceModifiedDateContactsAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerSourceModifiedDateContactsAddressTypeEnum: %s", s)
	}
}

// CreateCustomerSourceModifiedDateContactsAddress - An object of Address information.
type CreateCustomerSourceModifiedDateContactsAddress struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type CreateCustomerSourceModifiedDateContactsAddressTypeEnum `json:"type"`
}

// CreateCustomerSourceModifiedDateContactsPhoneTypeEnum - Type of phone number.
type CreateCustomerSourceModifiedDateContactsPhoneTypeEnum string

const (
	CreateCustomerSourceModifiedDateContactsPhoneTypeEnumUnknown  CreateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Unknown"
	CreateCustomerSourceModifiedDateContactsPhoneTypeEnumPrimary  CreateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Primary"
	CreateCustomerSourceModifiedDateContactsPhoneTypeEnumLandline CreateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Landline"
	CreateCustomerSourceModifiedDateContactsPhoneTypeEnumMobile   CreateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Mobile"
	CreateCustomerSourceModifiedDateContactsPhoneTypeEnumFax      CreateCustomerSourceModifiedDateContactsPhoneTypeEnum = "Fax"
)

func (e *CreateCustomerSourceModifiedDateContactsPhoneTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Primary":
		fallthrough
	case "Landline":
		fallthrough
	case "Mobile":
		fallthrough
	case "Fax":
		*e = CreateCustomerSourceModifiedDateContactsPhoneTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerSourceModifiedDateContactsPhoneTypeEnum: %s", s)
	}
}

type CreateCustomerSourceModifiedDateContactsPhone struct {
	// Phone number for a customer contact.
	Number *string `json:"number,omitempty"`
	// Type of phone number.
	Type CreateCustomerSourceModifiedDateContactsPhoneTypeEnum `json:"type"`
}

// CreateCustomerSourceModifiedDateContactsStatusEnum - Status of customer contacts.
//
// Customers can have multiple contacts.
type CreateCustomerSourceModifiedDateContactsStatusEnum string

const (
	CreateCustomerSourceModifiedDateContactsStatusEnumUnknown  CreateCustomerSourceModifiedDateContactsStatusEnum = "Unknown"
	CreateCustomerSourceModifiedDateContactsStatusEnumActive   CreateCustomerSourceModifiedDateContactsStatusEnum = "Active"
	CreateCustomerSourceModifiedDateContactsStatusEnumArchived CreateCustomerSourceModifiedDateContactsStatusEnum = "Archived"
)

func (e *CreateCustomerSourceModifiedDateContactsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = CreateCustomerSourceModifiedDateContactsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerSourceModifiedDateContactsStatusEnum: %s", s)
	}
}

type CreateCustomerSourceModifiedDateContacts struct {
	// An object of Address information.
	Address *CreateCustomerSourceModifiedDateContactsAddress `json:"address,omitempty"`
	// Email of a contact for a customer.
	Email *string `json:"email,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Name of a contact for a customer.
	Name *string `json:"name,omitempty"`
	// An array of Phone numbers.
	Phone []CreateCustomerSourceModifiedDateContactsPhone `json:"phone,omitempty"`
	// Status of customer contacts.
	//
	// Customers can have multiple contacts.
	Status CreateCustomerSourceModifiedDateContactsStatusEnum `json:"status"`
}

type CreateCustomerSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// CreateCustomerSourceModifiedDateStatusEnum - Current state of the customer.
type CreateCustomerSourceModifiedDateStatusEnum string

const (
	CreateCustomerSourceModifiedDateStatusEnumUnknown  CreateCustomerSourceModifiedDateStatusEnum = "Unknown"
	CreateCustomerSourceModifiedDateStatusEnumActive   CreateCustomerSourceModifiedDateStatusEnum = "Active"
	CreateCustomerSourceModifiedDateStatusEnumArchived CreateCustomerSourceModifiedDateStatusEnum = "Archived"
)

func (e *CreateCustomerSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = CreateCustomerSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerSourceModifiedDateStatusEnum: %s", s)
	}
}

// CreateCustomerSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type CreateCustomerSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// CreateCustomerSourceModifiedDate - > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
//
// Customers' data links to accounts receivable [invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
type CreateCustomerSourceModifiedDate struct {
	// An array of Addresses.
	Addresses []CreateCustomerSourceModifiedDateAddresses `json:"addresses,omitempty"`
	// Name of the main contact for the identified customer.
	ContactName *string `json:"contactName,omitempty"`
	// An array of Contacts.
	Contacts []CreateCustomerSourceModifiedDateContacts `json:"contacts,omitempty"`
	// Name of the customer as recorded in the accounting system, typically the company name.
	CustomerName *string `json:"customerName,omitempty"`
	// Default currency the transactional data of the customer is recorded in.
	DefaultCurrency *string `json:"defaultCurrency,omitempty"`
	// Email address the customer can be contacted by.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Identifier for the customer, unique to the company in the accounting platform.
	ID       *string                                   `json:"id,omitempty"`
	Metadata *CreateCustomerSourceModifiedDateMetadata `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Phone number the customer can be contacted by.
	Phone *string `json:"phone,omitempty"`
	// Company number. In the UK, this is typically the Companies House company registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the customer.
	Status CreateCustomerSourceModifiedDateStatusEnum `json:"status"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *CreateCustomerSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Company tax number.
	TaxNumber *string `json:"taxNumber,omitempty"`
}

type CreateCustomerRequest struct {
	RequestBody      *CreateCustomerSourceModifiedDate `request:"mediaType=application/json"`
	CompanyID        string                            `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID     string                            `pathParam:"style=simple,explode=false,name=connectionId"`
	TimeoutInMinutes *int                              `queryParam:"style=form,explode=true,name=timeoutInMinutes"`
}

type CreateCustomer200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type CreateCustomer200ApplicationJSONChangesTypeEnum string

const (
	CreateCustomer200ApplicationJSONChangesTypeEnumUnknown            CreateCustomer200ApplicationJSONChangesTypeEnum = "Unknown"
	CreateCustomer200ApplicationJSONChangesTypeEnumCreated            CreateCustomer200ApplicationJSONChangesTypeEnum = "Created"
	CreateCustomer200ApplicationJSONChangesTypeEnumModified           CreateCustomer200ApplicationJSONChangesTypeEnum = "Modified"
	CreateCustomer200ApplicationJSONChangesTypeEnumDeleted            CreateCustomer200ApplicationJSONChangesTypeEnum = "Deleted"
	CreateCustomer200ApplicationJSONChangesTypeEnumAttachmentUploaded CreateCustomer200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

func (e *CreateCustomer200ApplicationJSONChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = CreateCustomer200ApplicationJSONChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONChangesTypeEnum: %s", s)
	}
}

type CreateCustomer200ApplicationJSONChanges struct {
	AttachmentID *string                                                        `json:"attachmentId,omitempty"`
	RecordRef    *CreateCustomer200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *CreateCustomer200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum - Type of the address.
type CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum string

const (
	CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnumUnknown  CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum = "Unknown"
	CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnumBilling  CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum = "Billing"
	CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnumDelivery CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum = "Delivery"
)

func (e *CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum: %s", s)
	}
}

type CreateCustomer200ApplicationJSONSourceModifiedDateAddresses struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type CreateCustomer200ApplicationJSONSourceModifiedDateAddressesTypeEnum `json:"type"`
}

// CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum - Type of the address.
type CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum string

const (
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnumUnknown  CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum = "Unknown"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnumBilling  CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum = "Billing"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnumDelivery CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum = "Delivery"
)

func (e *CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Billing":
		fallthrough
	case "Delivery":
		*e = CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum: %s", s)
	}
}

// CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddress - An object of Address information.
type CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddress struct {
	// City of the customer address.
	City *string `json:"city,omitempty"`
	// Country of the customer address.
	Country *string `json:"country,omitempty"`
	// Line 1 of the customer address.
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the customer address.
	Line2 *string `json:"line2,omitempty"`
	// Postal code or zip code.
	PostalCode *string `json:"postalCode,omitempty"`
	// Region of the customer address.
	Region *string `json:"region,omitempty"`
	// Type of the address.
	Type CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddressTypeEnum `json:"type"`
}

// CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum - Type of phone number.
type CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum string

const (
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumUnknown  CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Unknown"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumPrimary  CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Primary"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumLandline CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Landline"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumMobile   CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Mobile"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnumFax      CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum = "Fax"
)

func (e *CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Primary":
		fallthrough
	case "Landline":
		fallthrough
	case "Mobile":
		fallthrough
	case "Fax":
		*e = CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum: %s", s)
	}
}

type CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhone struct {
	// Phone number for a customer contact.
	Number *string `json:"number,omitempty"`
	// Type of phone number.
	Type CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhoneTypeEnum `json:"type"`
}

// CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum - Status of customer contacts.
//
// Customers can have multiple contacts.
type CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum string

const (
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnumUnknown  CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum = "Unknown"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnumActive   CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum = "Active"
	CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnumArchived CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum = "Archived"
)

func (e *CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum: %s", s)
	}
}

type CreateCustomer200ApplicationJSONSourceModifiedDateContacts struct {
	// An object of Address information.
	Address *CreateCustomer200ApplicationJSONSourceModifiedDateContactsAddress `json:"address,omitempty"`
	// Email of a contact for a customer.
	Email *string `json:"email,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > ðŸ“˜ Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Name of a contact for a customer.
	Name *string `json:"name,omitempty"`
	// An array of Phone numbers.
	Phone []CreateCustomer200ApplicationJSONSourceModifiedDateContactsPhone `json:"phone,omitempty"`
	// Status of customer contacts.
	//
	// Customers can have multiple contacts.
	Status CreateCustomer200ApplicationJSONSourceModifiedDateContactsStatusEnum `json:"status"`
}

type CreateCustomer200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum - Current state of the customer.
type CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum string

const (
	CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnumUnknown  CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum = "Unknown"
	CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnumActive   CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum = "Active"
	CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnumArchived CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum = "Archived"
)

func (e *CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Active":
		fallthrough
	case "Archived":
		*e = CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum: %s", s)
	}
}

// CreateCustomer200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type CreateCustomer200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// CreateCustomer200ApplicationJSONSourceModifiedDate - > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
//
// Customers' data links to accounts receivable [invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
type CreateCustomer200ApplicationJSONSourceModifiedDate struct {
	// An array of Addresses.
	Addresses []CreateCustomer200ApplicationJSONSourceModifiedDateAddresses `json:"addresses,omitempty"`
	// Name of the main contact for the identified customer.
	ContactName *string `json:"contactName,omitempty"`
	// An array of Contacts.
	Contacts []CreateCustomer200ApplicationJSONSourceModifiedDateContacts `json:"contacts,omitempty"`
	// Name of the customer as recorded in the accounting system, typically the company name.
	CustomerName *string `json:"customerName,omitempty"`
	// Default currency the transactional data of the customer is recorded in.
	DefaultCurrency *string `json:"defaultCurrency,omitempty"`
	// Email address the customer can be contacted by.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Identifier for the customer, unique to the company in the accounting platform.
	ID       *string                                                     `json:"id,omitempty"`
	Metadata *CreateCustomer200ApplicationJSONSourceModifiedDateMetadata `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Phone number the customer can be contacted by.
	Phone *string `json:"phone,omitempty"`
	// Company number. In the UK, this is typically the Companies House company registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the customer.
	Status CreateCustomer200ApplicationJSONSourceModifiedDateStatusEnum `json:"status"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *CreateCustomer200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Company tax number.
	TaxNumber *string `json:"taxNumber,omitempty"`
}

// CreateCustomer200ApplicationJSONStatusEnum - The status of the push operation.
type CreateCustomer200ApplicationJSONStatusEnum string

const (
	CreateCustomer200ApplicationJSONStatusEnumPending  CreateCustomer200ApplicationJSONStatusEnum = "Pending"
	CreateCustomer200ApplicationJSONStatusEnumFailed   CreateCustomer200ApplicationJSONStatusEnum = "Failed"
	CreateCustomer200ApplicationJSONStatusEnumSuccess  CreateCustomer200ApplicationJSONStatusEnum = "Success"
	CreateCustomer200ApplicationJSONStatusEnumTimedOut CreateCustomer200ApplicationJSONStatusEnum = "TimedOut"
)

func (e *CreateCustomer200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = CreateCustomer200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomer200ApplicationJSONStatusEnum: %s", s)
	}
}

type CreateCustomer200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// CreateCustomer200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type CreateCustomer200ApplicationJSONValidation struct {
	Errors   []CreateCustomer200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []CreateCustomer200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// CreateCustomer200ApplicationJSON - Success
type CreateCustomer200ApplicationJSON struct {
	Changes []CreateCustomer200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
	//
	// ## Overview
	//
	// A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
	//
	// Customers' data links to accounts receivable [invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
	//
	Data *CreateCustomer200ApplicationJSONSourceModifiedDate `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           CreateCustomer200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                        `json:"statusCode"`
	TimeoutInMinutes *int                                       `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                       `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *CreateCustomer200ApplicationJSONValidation `json:"validation,omitempty"`
}

type CreateCustomerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	CreateCustomer200ApplicationJSONObject *CreateCustomer200ApplicationJSON
}
