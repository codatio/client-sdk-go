// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ListBillsRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Page number. [Read more](https://docs.codat.io/using-the-api/paging).
	Page int `queryParam:"style=form,explode=true,name=page"`
	// Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type ListBills200ApplicationJSONLinksHypertextReference struct {
	Href *string `json:"href,omitempty"`
}

type ListBills200ApplicationJSONLinks struct {
	Current  ListBills200ApplicationJSONLinksHypertextReference  `json:"current"`
	Next     *ListBills200ApplicationJSONLinksHypertextReference `json:"next,omitempty"`
	Previous *ListBills200ApplicationJSONLinksHypertextReference `json:"previous,omitempty"`
	Self     ListBills200ApplicationJSONLinksHypertextReference  `json:"self"`
}

// ListBills200ApplicationJSONSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type ListBills200ApplicationJSONSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDateLineItemsItemRef - Reference to the product, service type, or inventory item to which the line item is linked.
type ListBills200ApplicationJSONSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the line item is linked.
type ListBills200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

type ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum string

const (
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumUnknown       ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Unknown"
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumNotApplicable ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "NotApplicable"
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumCustomer      ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Customer"
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnumProject       ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Project"
)

func (e *ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum: %s", s)
	}
}

type ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum string

const (
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumUnknown       ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Unknown"
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumNotApplicable ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "NotApplicable"
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumCustomer      ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Customer"
	ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnumProject       ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Project"
)

func (e *ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum: %s", s)
	}
}

type ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingProjectRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDateLineItemsTracking - Categories, and a project and customer, against which the item is tracked.
type ListBills200ApplicationJSONSourceModifiedDateLineItemsTracking struct {
	CategoryRefs []ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs   `json:"categoryRefs"`
	CustomerRef  *ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingCustomerRef     `json:"customerRef,omitempty"`
	IsBilledTo   ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsBilledToEnum   `json:"isBilledTo"`
	IsRebilledTo ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingIsRebilledToEnum `json:"isRebilledTo"`
	ProjectRef   *ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingProjectRef      `json:"projectRef,omitempty"`
}

type ListBills200ApplicationJSONSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *ListBills200ApplicationJSONSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services received.
	Description *string `json:"description,omitempty"`
	// Numerical value of any discounts applied.
	//
	// Do not use to apply discounts in Oracle NetSuiteâ€”see Oracle NetSuite integration reference.
	DiscountAmount     *float64 `json:"discountAmount,omitempty"`
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	IsDirectCost       *bool    `json:"isDirectCost,omitempty"`
	// Reference to the product, service type, or inventory item to which the line item is linked.
	ItemRef *ListBills200ApplicationJSONSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services received.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *ListBills200ApplicationJSONSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *ListBills200ApplicationJSONSourceModifiedDateLineItemsTracking `json:"tracking,omitempty"`
	// Collection of categories against which this item is tracked.
	TrackingCategoryRefs []ListBills200ApplicationJSONSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	UnitAmount float64 `json:"unitAmount"`
}

type ListBills200ApplicationJSONSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | Â£15.62                     |
	// | **EUR**          | â‚¬20            | 0.885         | Â£17.70                     |
	// | **RUB**          | â‚½20            | 0.011         | Â£0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | Â£20            | 1.277         | $25.54                     |
	// | **EUR**          | â‚¬20            | 1.134         | $22.68                     |
	// | **RUB**          | â‚½20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | Â£15.62                     |
	// | **EUR**          | â‚¬20            | 0.885         | Â£17.70                     |
	// | **RUB**          | â‚½20            | 0.011         | Â£0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | Â£20            | 1.277         | $25.54                     |
	// | **EUR**          | â‚¬20            | 1.134         | $22.68                     |
	// | **RUB**          | â‚½20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type ListBills200ApplicationJSONSourceModifiedDatePaymentAllocations struct {
	Allocation ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    ListBills200ApplicationJSONSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

type ListBills200ApplicationJSONSourceModifiedDatePurchaseOrderRefs struct {
	ID                  *string `json:"id,omitempty"`
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDateStatusEnum - Current state of the bill.
type ListBills200ApplicationJSONSourceModifiedDateStatusEnum string

const (
	ListBills200ApplicationJSONSourceModifiedDateStatusEnumUnknown       ListBills200ApplicationJSONSourceModifiedDateStatusEnum = "Unknown"
	ListBills200ApplicationJSONSourceModifiedDateStatusEnumOpen          ListBills200ApplicationJSONSourceModifiedDateStatusEnum = "Open"
	ListBills200ApplicationJSONSourceModifiedDateStatusEnumPartiallyPaid ListBills200ApplicationJSONSourceModifiedDateStatusEnum = "PartiallyPaid"
	ListBills200ApplicationJSONSourceModifiedDateStatusEnumPaid          ListBills200ApplicationJSONSourceModifiedDateStatusEnum = "Paid"
	ListBills200ApplicationJSONSourceModifiedDateStatusEnumVoid          ListBills200ApplicationJSONSourceModifiedDateStatusEnum = "Void"
	ListBills200ApplicationJSONSourceModifiedDateStatusEnumDraft         ListBills200ApplicationJSONSourceModifiedDateStatusEnum = "Draft"
)

func (e *ListBills200ApplicationJSONSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Open":
		fallthrough
	case "PartiallyPaid":
		fallthrough
	case "Paid":
		fallthrough
	case "Void":
		fallthrough
	case "Draft":
		*e = ListBills200ApplicationJSONSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBills200ApplicationJSONSourceModifiedDateStatusEnum: %s", s)
	}
}

// ListBills200ApplicationJSONSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type ListBills200ApplicationJSONSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// ListBills200ApplicationJSONSourceModifiedDateSupplierRef - Reference to the supplier the bill was received from.
type ListBills200ApplicationJSONSourceModifiedDateSupplierRef struct {
	ID           string  `json:"id"`
	SupplierName *string `json:"supplierName,omitempty"`
}

type ListBills200ApplicationJSONSourceModifiedDateWithholdingTax struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// ListBills200ApplicationJSONSourceModifiedDate - > **Invoices or bills?**
// >
// > In Codat, bills are for accounts payable only. For the accounts receivable equivalent of bills, see [Invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
//
// View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// In Codat, a bill contains details of:
// * When the bill was recorded in the accounting system.
// * How much the bill is for and the currency of the amount.
// * Who the bill was received from â€” the *supplier*.
// * What the bill is for â€” the *line items*.
//
// Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
//
// You can find these types of transactions in our [Direct costs](https://docs.codat.io/accounting-api#/schemas/DirectCost) data model.
type ListBills200ApplicationJSONSourceModifiedDate struct {
	// Amount outstanding on the bill.
	AmountDue *float64 `json:"amountDue,omitempty"`
	// Currency of the bill.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | Â£15.62                     |
	// | **EUR**          | â‚¬20            | 0.885         | Â£17.70                     |
	// | **RUB**          | â‚½20            | 0.011         | Â£0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | Â£20            | 1.277         | $25.54                     |
	// | **EUR**          | â‚¬20            | 1.134         | $22.68                     |
	// | **RUB**          | â‚½20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Date the supplier is due to be paid.
	DueDate *string `json:"dueDate,omitempty"`
	// Identifier for the bill, unique for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Date of the bill as recorded in the accounting platform.
	IssueDate string `json:"issueDate"`
	// Array of BillLineItems.
	LineItems []ListBills200ApplicationJSONSourceModifiedDateLineItems `json:"lineItems,omitempty"`
	Metadata  *ListBills200ApplicationJSONSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Any private, company notes about the bill, such as payment information.
	Note *string `json:"note,omitempty"`
	// An array of payment allocations.
	PaymentAllocations []ListBills200ApplicationJSONSourceModifiedDatePaymentAllocations `json:"paymentAllocations,omitempty"`
	PurchaseOrderRefs  []ListBills200ApplicationJSONSourceModifiedDatePurchaseOrderRefs  `json:"purchaseOrderRefs,omitempty"`
	// User-friendly reference for the bill.
	Reference *string `json:"reference,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the bill.
	Status ListBills200ApplicationJSONSourceModifiedDateStatusEnum `json:"status"`
	// Total amount of the bill, excluding any taxes.
	SubTotal float64 `json:"subTotal"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *ListBills200ApplicationJSONSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Reference to the supplier the bill was received from.
	SupplierRef *ListBills200ApplicationJSONSourceModifiedDateSupplierRef `json:"supplierRef,omitempty"`
	// Amount of tax on the bill.
	TaxAmount float64 `json:"taxAmount"`
	// Amount of the bill, including tax.
	TotalAmount    float64                                                       `json:"totalAmount"`
	WithholdingTax []ListBills200ApplicationJSONSourceModifiedDateWithholdingTax `json:"withholdingTax,omitempty"`
}

// ListBills200ApplicationJSON - Success
type ListBills200ApplicationJSON struct {
	Links        ListBills200ApplicationJSONLinks                `json:"_links"`
	PageNumber   int64                                           `json:"pageNumber"`
	PageSize     int64                                           `json:"pageSize"`
	Results      []ListBills200ApplicationJSONSourceModifiedDate `json:"results,omitempty"`
	TotalResults int64                                           `json:"totalResults"`
}

type ListBillsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ListBills200ApplicationJSONObject *ListBills200ApplicationJSON
}
