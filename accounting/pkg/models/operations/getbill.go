// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetBillRequest struct {
	// Unique identifier for a bill
	BillID    string `pathParam:"style=simple,explode=false,name=billId"`
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
}

// GetBillSourceModifiedDateLineItemsAccountRef - Reference to the account to which the line item is linked.
type GetBillSourceModifiedDateLineItemsAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

// GetBillSourceModifiedDateLineItemsItemRef - Reference to the product, service type, or inventory item to which the line item is linked.
type GetBillSourceModifiedDateLineItemsItemRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// GetBillSourceModifiedDateLineItemsTaxRateRef - Reference to the tax rate to which the line item is linked.
type GetBillSourceModifiedDateLineItemsTaxRateRef struct {
	// Applicable tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// 'id' from the 'taxRates' data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the 'taxRates' data type.
	Name *string `json:"name,omitempty"`
}

// GetBillSourceModifiedDateLineItemsTrackingCategoryRefs - References a category against which the item is tracked.
type GetBillSourceModifiedDateLineItemsTrackingCategoryRefs struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type GetBillSourceModifiedDateLineItemsTrackingCustomerRef struct {
	CompanyName *string `json:"companyName,omitempty"`
	ID          string  `json:"id"`
}

type GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum string

const (
	GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnumUnknown       GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Unknown"
	GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnumNotApplicable GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "NotApplicable"
	GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnumCustomer      GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Customer"
	GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnumProject       GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum = "Project"
)

func (e *GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum: %s", s)
	}
}

type GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum string

const (
	GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumUnknown       GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Unknown"
	GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumNotApplicable GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "NotApplicable"
	GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumCustomer      GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Customer"
	GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnumProject       GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum = "Project"
)

func (e *GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "NotApplicable":
		fallthrough
	case "Customer":
		fallthrough
	case "Project":
		*e = GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum: %s", s)
	}
}

type GetBillSourceModifiedDateLineItemsTrackingProjectRef struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// GetBillSourceModifiedDateLineItemsTracking - Categories, and a project and customer, against which the item is tracked.
type GetBillSourceModifiedDateLineItemsTracking struct {
	CategoryRefs []GetBillSourceModifiedDateLineItemsTrackingCategoryRefs   `json:"categoryRefs"`
	CustomerRef  *GetBillSourceModifiedDateLineItemsTrackingCustomerRef     `json:"customerRef,omitempty"`
	IsBilledTo   GetBillSourceModifiedDateLineItemsTrackingIsBilledToEnum   `json:"isBilledTo"`
	IsRebilledTo GetBillSourceModifiedDateLineItemsTrackingIsRebilledToEnum `json:"isRebilledTo"`
	ProjectRef   *GetBillSourceModifiedDateLineItemsTrackingProjectRef      `json:"projectRef,omitempty"`
}

type GetBillSourceModifiedDateLineItems struct {
	// Reference to the account to which the line item is linked.
	AccountRef *GetBillSourceModifiedDateLineItemsAccountRef `json:"accountRef,omitempty"`
	// Friendly name of the goods or services received.
	Description *string `json:"description,omitempty"`
	// Numerical value of any discounts applied.
	//
	// Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
	DiscountAmount     *float64 `json:"discountAmount,omitempty"`
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`
	IsDirectCost       *bool    `json:"isDirectCost,omitempty"`
	// Reference to the product, service type, or inventory item to which the line item is linked.
	ItemRef *GetBillSourceModifiedDateLineItemsItemRef `json:"itemRef,omitempty"`
	// Number of units of goods or services received.
	Quantity float64 `json:"quantity"`
	// Amount of the line, inclusive of discounts but exclusive of tax.
	SubTotal *float64 `json:"subTotal,omitempty"`
	// Amount of tax for the line.
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Reference to the tax rate to which the line item is linked.
	TaxRateRef *GetBillSourceModifiedDateLineItemsTaxRateRef `json:"taxRateRef,omitempty"`
	// Total amount of the line, including tax.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Categories, and a project and customer, against which the item is tracked.
	Tracking *GetBillSourceModifiedDateLineItemsTracking `json:"tracking,omitempty"`
	// Collection of categories against which this item is tracked.
	TrackingCategoryRefs []GetBillSourceModifiedDateLineItemsTrackingCategoryRefs `json:"trackingCategoryRefs,omitempty"`
	// Price of each unit of goods or services.
	UnitAmount float64 `json:"unitAmount"`
}

type GetBillSourceModifiedDateMetadata struct {
	// Indicates whether the record has been deleted in the third-party system this record originated from.
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

type GetBillSourceModifiedDatePaymentAllocationsAllocation struct {
	// The date the payment was allocated.
	AllocatedOnDate *string `json:"allocatedOnDate,omitempty"`
	// The currency of the transaction.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// The total amount that has been allocated.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

// GetBillSourceModifiedDatePaymentAllocationsPaymentAccountRef - The account that the allocated payment is made from or to.
type GetBillSourceModifiedDatePaymentAllocationsPaymentAccountRef struct {
	// 'id' from the Accounts data type.
	ID *string `json:"id,omitempty"`
	// 'name' from the Accounts data type.
	Name *string `json:"name,omitempty"`
}

type GetBillSourceModifiedDatePaymentAllocationsPayment struct {
	// The account that the allocated payment is made from or to.
	AccountRef *GetBillSourceModifiedDatePaymentAllocationsPaymentAccountRef `json:"accountRef,omitempty"`
	// Currency the payment has been made in.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Identifier of the allocated payment.
	ID *string `json:"id,omitempty"`
	// Notes attached to the allocated payment.
	Note *string `json:"note,omitempty"`
	// The date the payment was paid.
	PaidOnDate *string `json:"paidOnDate,omitempty"`
	// Reference to the allocated payment.
	Reference *string `json:"reference,omitempty"`
	// Total amount that was paid.
	TotalAmount *float64 `json:"totalAmount,omitempty"`
}

type GetBillSourceModifiedDatePaymentAllocations struct {
	Allocation GetBillSourceModifiedDatePaymentAllocationsAllocation `json:"allocation"`
	Payment    GetBillSourceModifiedDatePaymentAllocationsPayment    `json:"payment"`
}

type GetBillSourceModifiedDatePurchaseOrderRefs struct {
	ID                  *string `json:"id,omitempty"`
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
}

// GetBillSourceModifiedDateStatusEnum - Current state of the bill.
type GetBillSourceModifiedDateStatusEnum string

const (
	GetBillSourceModifiedDateStatusEnumUnknown       GetBillSourceModifiedDateStatusEnum = "Unknown"
	GetBillSourceModifiedDateStatusEnumOpen          GetBillSourceModifiedDateStatusEnum = "Open"
	GetBillSourceModifiedDateStatusEnumPartiallyPaid GetBillSourceModifiedDateStatusEnum = "PartiallyPaid"
	GetBillSourceModifiedDateStatusEnumPaid          GetBillSourceModifiedDateStatusEnum = "Paid"
	GetBillSourceModifiedDateStatusEnumVoid          GetBillSourceModifiedDateStatusEnum = "Void"
	GetBillSourceModifiedDateStatusEnumDraft         GetBillSourceModifiedDateStatusEnum = "Draft"
)

func (e *GetBillSourceModifiedDateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Open":
		fallthrough
	case "PartiallyPaid":
		fallthrough
	case "Paid":
		fallthrough
	case "Void":
		fallthrough
	case "Draft":
		*e = GetBillSourceModifiedDateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBillSourceModifiedDateStatusEnum: %s", s)
	}
}

// GetBillSourceModifiedDateSupplementalData - Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
type GetBillSourceModifiedDateSupplementalData struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
}

// GetBillSourceModifiedDateSupplierRef - Reference to the supplier the bill was received from.
type GetBillSourceModifiedDateSupplierRef struct {
	ID           string  `json:"id"`
	SupplierName *string `json:"supplierName,omitempty"`
}

type GetBillSourceModifiedDateWithholdingTax struct {
	Amount float64 `json:"amount"`
	Name   string  `json:"name"`
}

// GetBillSourceModifiedDate - > **Invoices or bills?**
// >
// > In Codat, bills are for accounts payable only. For the accounts receivable equivalent of bills, see [Invoices](https://docs.codat.io/accounting-api#/schemas/Invoice).
//
// View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// In Codat, a bill contains details of:
// * When the bill was recorded in the accounting system.
// * How much the bill is for and the currency of the amount.
// * Who the bill was received from — the *supplier*.
// * What the bill is for — the *line items*.
//
// Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
//
// You can find these types of transactions in our [Direct costs](https://docs.codat.io/accounting-api#/schemas/DirectCost) data model.
type GetBillSourceModifiedDate struct {
	// Amount outstanding on the bill.
	AmountDue *float64 `json:"amountDue,omitempty"`
	// Currency of the bill.
	Currency *string `json:"currency,omitempty"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Date the supplier is due to be paid.
	DueDate *string `json:"dueDate,omitempty"`
	// Identifier for the bill, unique for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// Date of the bill as recorded in the accounting platform.
	IssueDate string `json:"issueDate"`
	// Array of BillLineItems.
	LineItems []GetBillSourceModifiedDateLineItems `json:"lineItems,omitempty"`
	Metadata  *GetBillSourceModifiedDateMetadata   `json:"metadata,omitempty"`
	// The date on which this record was last modified in Codat.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// Any private, company notes about the bill, such as payment information.
	Note *string `json:"note,omitempty"`
	// An array of payment allocations.
	PaymentAllocations []GetBillSourceModifiedDatePaymentAllocations `json:"paymentAllocations,omitempty"`
	PurchaseOrderRefs  []GetBillSourceModifiedDatePurchaseOrderRefs  `json:"purchaseOrderRefs,omitempty"`
	// User-friendly reference for the bill.
	Reference *string `json:"reference,omitempty"`
	// The date on which this record was last modified in the originating system
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Current state of the bill.
	Status GetBillSourceModifiedDateStatusEnum `json:"status"`
	// Total amount of the bill, excluding any taxes.
	SubTotal float64 `json:"subTotal"`
	// Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
	SupplementalData *GetBillSourceModifiedDateSupplementalData `json:"supplementalData,omitempty"`
	// Reference to the supplier the bill was received from.
	SupplierRef *GetBillSourceModifiedDateSupplierRef `json:"supplierRef,omitempty"`
	// Amount of tax on the bill.
	TaxAmount float64 `json:"taxAmount"`
	// Amount of the bill, including tax.
	TotalAmount    float64                                   `json:"totalAmount"`
	WithholdingTax []GetBillSourceModifiedDateWithholdingTax `json:"withholdingTax,omitempty"`
}

type GetBillResponse struct {
	ContentType string
	// Success
	SourceModifiedDate *GetBillSourceModifiedDate
	StatusCode         int
	RawResponse        *http.Response
}
