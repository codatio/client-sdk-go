// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BankTransactionsSourceModifiedDateTransactionTypeEnum - Type of transaction for the bank statement line
type BankTransactionsSourceModifiedDateTransactionTypeEnum string

const (
	BankTransactionsSourceModifiedDateTransactionTypeEnumUnknown     BankTransactionsSourceModifiedDateTransactionTypeEnum = "Unknown"
	BankTransactionsSourceModifiedDateTransactionTypeEnumCredit      BankTransactionsSourceModifiedDateTransactionTypeEnum = "Credit"
	BankTransactionsSourceModifiedDateTransactionTypeEnumDebit       BankTransactionsSourceModifiedDateTransactionTypeEnum = "Debit"
	BankTransactionsSourceModifiedDateTransactionTypeEnumInt         BankTransactionsSourceModifiedDateTransactionTypeEnum = "Int"
	BankTransactionsSourceModifiedDateTransactionTypeEnumDiv         BankTransactionsSourceModifiedDateTransactionTypeEnum = "Div"
	BankTransactionsSourceModifiedDateTransactionTypeEnumFee         BankTransactionsSourceModifiedDateTransactionTypeEnum = "Fee"
	BankTransactionsSourceModifiedDateTransactionTypeEnumSerChg      BankTransactionsSourceModifiedDateTransactionTypeEnum = "SerChg"
	BankTransactionsSourceModifiedDateTransactionTypeEnumDep         BankTransactionsSourceModifiedDateTransactionTypeEnum = "Dep"
	BankTransactionsSourceModifiedDateTransactionTypeEnumAtm         BankTransactionsSourceModifiedDateTransactionTypeEnum = "Atm"
	BankTransactionsSourceModifiedDateTransactionTypeEnumPos         BankTransactionsSourceModifiedDateTransactionTypeEnum = "Pos"
	BankTransactionsSourceModifiedDateTransactionTypeEnumXfer        BankTransactionsSourceModifiedDateTransactionTypeEnum = "Xfer"
	BankTransactionsSourceModifiedDateTransactionTypeEnumCheck       BankTransactionsSourceModifiedDateTransactionTypeEnum = "Check"
	BankTransactionsSourceModifiedDateTransactionTypeEnumPayment     BankTransactionsSourceModifiedDateTransactionTypeEnum = "Payment"
	BankTransactionsSourceModifiedDateTransactionTypeEnumCash        BankTransactionsSourceModifiedDateTransactionTypeEnum = "Cash"
	BankTransactionsSourceModifiedDateTransactionTypeEnumDirectDep   BankTransactionsSourceModifiedDateTransactionTypeEnum = "DirectDep"
	BankTransactionsSourceModifiedDateTransactionTypeEnumDirectDebit BankTransactionsSourceModifiedDateTransactionTypeEnum = "DirectDebit"
	BankTransactionsSourceModifiedDateTransactionTypeEnumRepeatPmt   BankTransactionsSourceModifiedDateTransactionTypeEnum = "RepeatPmt"
	BankTransactionsSourceModifiedDateTransactionTypeEnumOther       BankTransactionsSourceModifiedDateTransactionTypeEnum = "Other"
)

func (e *BankTransactionsSourceModifiedDateTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Credit":
		fallthrough
	case "Debit":
		fallthrough
	case "Int":
		fallthrough
	case "Div":
		fallthrough
	case "Fee":
		fallthrough
	case "SerChg":
		fallthrough
	case "Dep":
		fallthrough
	case "Atm":
		fallthrough
	case "Pos":
		fallthrough
	case "Xfer":
		fallthrough
	case "Check":
		fallthrough
	case "Payment":
		fallthrough
	case "Cash":
		fallthrough
	case "DirectDep":
		fallthrough
	case "DirectDebit":
		fallthrough
	case "RepeatPmt":
		fallthrough
	case "Other":
		*e = BankTransactionsSourceModifiedDateTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BankTransactionsSourceModifiedDateTransactionTypeEnum: %s", s)
	}
}

type BankTransactionsSourceModifiedDate struct {
	Amount       float64 `json:"amount"`
	Balance      float64 `json:"balance"`
	Counterparty *string `json:"counterparty,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Date        string  `json:"date"`
	Description *string `json:"description,omitempty"`
	ID          *string `json:"id,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	Reconciled   bool    `json:"reconciled"`
	Reference    *string `json:"reference,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	SourceModifiedDate *string `json:"sourceModifiedDate,omitempty"`
	// Type of transaction for the bank statement line
	TransactionType BankTransactionsSourceModifiedDateTransactionTypeEnum `json:"transactionType"`
}

// BankTransactions - > **Accessing Bank Accounts through Banking API**
// >
// > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators.
// >
// > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
//
// > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.
//
// ## Overview
//
// Transactional banking data for a specific company and account.
//
// Bank transactions include the:
// * Amount of the transaction.
// * Current account balance.
// * Transaction type, for example, credit, debit, or transfer.
type BankTransactions struct {
	AccountID    *string                              `json:"accountId,omitempty"`
	Transactions []BankTransactionsSourceModifiedDate `json:"transactions,omitempty"`
}
