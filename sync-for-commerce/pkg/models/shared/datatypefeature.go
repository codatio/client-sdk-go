// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataTypeFeatureDataTypes - Available Data types
type DataTypeFeatureDataTypes string

const (
	DataTypeFeatureDataTypesAccountTransactions          DataTypeFeatureDataTypes = "accountTransactions"
	DataTypeFeatureDataTypesBalanceSheet                 DataTypeFeatureDataTypes = "balanceSheet"
	DataTypeFeatureDataTypesBankAccounts                 DataTypeFeatureDataTypes = "bankAccounts"
	DataTypeFeatureDataTypesBankTransactions             DataTypeFeatureDataTypes = "bankTransactions"
	DataTypeFeatureDataTypesBillCreditNotes              DataTypeFeatureDataTypes = "billCreditNotes"
	DataTypeFeatureDataTypesBillPayments                 DataTypeFeatureDataTypes = "billPayments"
	DataTypeFeatureDataTypesBills                        DataTypeFeatureDataTypes = "bills"
	DataTypeFeatureDataTypesCashFlowStatement            DataTypeFeatureDataTypes = "cashFlowStatement"
	DataTypeFeatureDataTypesChartOfAccounts              DataTypeFeatureDataTypes = "chartOfAccounts"
	DataTypeFeatureDataTypesCompany                      DataTypeFeatureDataTypes = "company"
	DataTypeFeatureDataTypesCreditNotes                  DataTypeFeatureDataTypes = "creditNotes"
	DataTypeFeatureDataTypesCustomers                    DataTypeFeatureDataTypes = "customers"
	DataTypeFeatureDataTypesDirectCosts                  DataTypeFeatureDataTypes = "directCosts"
	DataTypeFeatureDataTypesDirectIncomes                DataTypeFeatureDataTypes = "directIncomes"
	DataTypeFeatureDataTypesInvoices                     DataTypeFeatureDataTypes = "invoices"
	DataTypeFeatureDataTypesItems                        DataTypeFeatureDataTypes = "items"
	DataTypeFeatureDataTypesJournalEntries               DataTypeFeatureDataTypes = "journalEntries"
	DataTypeFeatureDataTypesJournals                     DataTypeFeatureDataTypes = "journals"
	DataTypeFeatureDataTypesPaymentMethods               DataTypeFeatureDataTypes = "paymentMethods"
	DataTypeFeatureDataTypesPayments                     DataTypeFeatureDataTypes = "payments"
	DataTypeFeatureDataTypesProfitAndLoss                DataTypeFeatureDataTypes = "profitAndLoss"
	DataTypeFeatureDataTypesPurchaseOrders               DataTypeFeatureDataTypes = "purchaseOrders"
	DataTypeFeatureDataTypesSalesOrders                  DataTypeFeatureDataTypes = "salesOrders"
	DataTypeFeatureDataTypesSuppliers                    DataTypeFeatureDataTypes = "suppliers"
	DataTypeFeatureDataTypesTaxRates                     DataTypeFeatureDataTypes = "taxRates"
	DataTypeFeatureDataTypesTrackingCategories           DataTypeFeatureDataTypes = "trackingCategories"
	DataTypeFeatureDataTypesTransfers                    DataTypeFeatureDataTypes = "transfers"
	DataTypeFeatureDataTypesBankingAccountBalances       DataTypeFeatureDataTypes = "banking-accountBalances"
	DataTypeFeatureDataTypesBankingAccounts              DataTypeFeatureDataTypes = "banking-accounts"
	DataTypeFeatureDataTypesBankingTransactionCategories DataTypeFeatureDataTypes = "banking-transactionCategories"
	DataTypeFeatureDataTypesBankingTransactions          DataTypeFeatureDataTypes = "banking-transactions"
	DataTypeFeatureDataTypesCommerceCompanyInfo          DataTypeFeatureDataTypes = "commerce-companyInfo"
	DataTypeFeatureDataTypesCommerceCustomers            DataTypeFeatureDataTypes = "commerce-customers"
	DataTypeFeatureDataTypesCommerceDisputes             DataTypeFeatureDataTypes = "commerce-disputes"
	DataTypeFeatureDataTypesCommerceLocations            DataTypeFeatureDataTypes = "commerce-locations"
	DataTypeFeatureDataTypesCommerceOrders               DataTypeFeatureDataTypes = "commerce-orders"
	DataTypeFeatureDataTypesCommercePaymentMethods       DataTypeFeatureDataTypes = "commerce-paymentMethods"
	DataTypeFeatureDataTypesCommercePayments             DataTypeFeatureDataTypes = "commerce-payments"
	DataTypeFeatureDataTypesCommerceProductCategories    DataTypeFeatureDataTypes = "commerce-productCategories"
	DataTypeFeatureDataTypesCommerceProducts             DataTypeFeatureDataTypes = "commerce-products"
	DataTypeFeatureDataTypesCommerceTaxComponents        DataTypeFeatureDataTypes = "commerce-taxComponents"
	DataTypeFeatureDataTypesCommerceTransactions         DataTypeFeatureDataTypes = "commerce-transactions"
)

func (e DataTypeFeatureDataTypes) ToPointer() *DataTypeFeatureDataTypes {
	return &e
}

func (e *DataTypeFeatureDataTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accountTransactions":
		fallthrough
	case "balanceSheet":
		fallthrough
	case "bankAccounts":
		fallthrough
	case "bankTransactions":
		fallthrough
	case "billCreditNotes":
		fallthrough
	case "billPayments":
		fallthrough
	case "bills":
		fallthrough
	case "cashFlowStatement":
		fallthrough
	case "chartOfAccounts":
		fallthrough
	case "company":
		fallthrough
	case "creditNotes":
		fallthrough
	case "customers":
		fallthrough
	case "directCosts":
		fallthrough
	case "directIncomes":
		fallthrough
	case "invoices":
		fallthrough
	case "items":
		fallthrough
	case "journalEntries":
		fallthrough
	case "journals":
		fallthrough
	case "paymentMethods":
		fallthrough
	case "payments":
		fallthrough
	case "profitAndLoss":
		fallthrough
	case "purchaseOrders":
		fallthrough
	case "salesOrders":
		fallthrough
	case "suppliers":
		fallthrough
	case "taxRates":
		fallthrough
	case "trackingCategories":
		fallthrough
	case "transfers":
		fallthrough
	case "banking-accountBalances":
		fallthrough
	case "banking-accounts":
		fallthrough
	case "banking-transactionCategories":
		fallthrough
	case "banking-transactions":
		fallthrough
	case "commerce-companyInfo":
		fallthrough
	case "commerce-customers":
		fallthrough
	case "commerce-disputes":
		fallthrough
	case "commerce-locations":
		fallthrough
	case "commerce-orders":
		fallthrough
	case "commerce-paymentMethods":
		fallthrough
	case "commerce-payments":
		fallthrough
	case "commerce-productCategories":
		fallthrough
	case "commerce-products":
		fallthrough
	case "commerce-taxComponents":
		fallthrough
	case "commerce-transactions":
		*e = DataTypeFeatureDataTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataTypeFeatureDataTypes: %v", v)
	}
}

// DataTypeFeature - Describes support for a given datatype and associated operations
type DataTypeFeature struct {
	// Available Data types
	DataType          *DataTypeFeatureDataTypes `json:"dataType,omitempty"`
	SupportedFeatures []SupportedFeature        `json:"supportedFeatures"`
}

func (o *DataTypeFeature) GetDataType() *DataTypeFeatureDataTypes {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *DataTypeFeature) GetSupportedFeatures() []SupportedFeature {
	if o == nil {
		return []SupportedFeature{}
	}
	return o.SupportedFeatures
}
