// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type GetCompaniesCompanyIDPushPushOperationKeyRequest struct {
	CompanyID string `pathParam:"style=simple,explode=false,name=companyId"`
	// Push operation key.
	PushOperationKey string `pathParam:"style=simple,explode=false,name=pushOperationKey"`
}

type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesPushOperationRecordRef struct {
	DataType *string `json:"dataType,omitempty"`
	ID       *string `json:"id,omitempty"`
}

type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum string

const (
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnumUnknown            GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum = "Unknown"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnumCreated            GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum = "Created"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnumModified           GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum = "Modified"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnumDeleted            GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum = "Deleted"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnumAttachmentUploaded GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum = "AttachmentUploaded"
)

type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChanges struct {
	AttachmentID *string                                                                                   `json:"attachmentId,omitempty"`
	RecordRef    *GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesPushOperationRecordRef `json:"recordRef,omitempty"`
	Type         *GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChangesTypeEnum               `json:"type,omitempty"`
}

// GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum - The status of the push operation.
type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum string

const (
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnumPending  GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum = "Pending"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnumFailed   GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum = "Failed"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnumSuccess  GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum = "Success"
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnumTimedOut GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum = "TimedOut"
)

type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONValidationValidationItem struct {
	ItemID        *string `json:"itemId,omitempty"`
	Message       *string `json:"message,omitempty"`
	ValidatorName *string `json:"validatorName,omitempty"`
}

// GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONValidation struct {
	Errors   []GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONValidationValidationItem `json:"errors,omitempty"`
	Warnings []GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONValidationValidationItem `json:"warnings,omitempty"`
}

// GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSON - OK
type GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSON struct {
	Changes []GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// The datetime when the push was completed, null if Pending.
	CompletedOnUtc *time.Time `json:"completedOnUtc,omitempty"`
	// Object submitted in push operation.
	Data map[string]interface{} `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// The type of data being pushed, eg invoices, customers.
	DataType     *string `json:"dataType,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// The datetime when the push was requested.
	RequestedOnUtc time.Time `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONStatusEnum `json:"status"`
	StatusCode       int                                                                   `json:"statusCode"`
	TimeoutInMinutes *int                                                                  `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                                                                  `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONValidation `json:"validation,omitempty"`
}

type GetCompaniesCompanyIDPushPushOperationKeyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSONObject *GetCompaniesCompanyIDPushPushOperationKey200ApplicationJSON
}
