// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PushOperationChangesTypeEnum string

const (
	PushOperationChangesTypeEnumUnknown            PushOperationChangesTypeEnum = "Unknown"
	PushOperationChangesTypeEnumCreated            PushOperationChangesTypeEnum = "Created"
	PushOperationChangesTypeEnumModified           PushOperationChangesTypeEnum = "Modified"
	PushOperationChangesTypeEnumDeleted            PushOperationChangesTypeEnum = "Deleted"
	PushOperationChangesTypeEnumAttachmentUploaded PushOperationChangesTypeEnum = "AttachmentUploaded"
)

func (e *PushOperationChangesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Created":
		fallthrough
	case "Modified":
		fallthrough
	case "Deleted":
		fallthrough
	case "AttachmentUploaded":
		*e = PushOperationChangesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PushOperationChangesTypeEnum: %s", s)
	}
}

type PushOperationChanges struct {
	AttachmentID *string                       `json:"attachmentId,omitempty"`
	RecordRef    *PushOperationRecordRef       `json:"recordRef,omitempty"`
	Type         *PushOperationChangesTypeEnum `json:"type,omitempty"`
}

// PushOperationStatusEnum - The status of the push operation.
type PushOperationStatusEnum string

const (
	PushOperationStatusEnumPending  PushOperationStatusEnum = "Pending"
	PushOperationStatusEnumFailed   PushOperationStatusEnum = "Failed"
	PushOperationStatusEnumSuccess  PushOperationStatusEnum = "Success"
	PushOperationStatusEnumTimedOut PushOperationStatusEnum = "TimedOut"
)

func (e *PushOperationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Failed":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		*e = PushOperationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PushOperationStatusEnum: %s", s)
	}
}

// PushOperationValidation - A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
type PushOperationValidation struct {
	Errors   []ValidationItem `json:"errors,omitempty"`
	Warnings []ValidationItem `json:"warnings,omitempty"`
}

// PushOperation - OK
type PushOperation struct {
	Changes []PushOperationChanges `json:"changes,omitempty"`
	// Unique identifier for your SMB in Codat.
	CompanyID string `json:"companyId"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	CompletedOnUtc *string `json:"completedOnUtc,omitempty"`
	// Object submitted in push operation.
	Data map[string]interface{} `json:"data,omitempty"`
	// Unique identifier for a company's data connection.
	DataConnectionKey string `json:"dataConnectionKey"`
	// Available Data types
	DataType     *DataTypeEnum `json:"dataType,omitempty"`
	ErrorMessage *string       `json:"errorMessage,omitempty"`
	// A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
	PushOperationKey string `json:"pushOperationKey"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	RequestedOnUtc string `json:"requestedOnUtc"`
	// The status of the push operation.
	Status           PushOperationStatusEnum `json:"status"`
	StatusCode       int                     `json:"statusCode"`
	TimeoutInMinutes *int                    `json:"timeoutInMinutes,omitempty"`
	TimeoutInSeconds *int                    `json:"timeoutInSeconds,omitempty"`
	// A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
	Validation *PushOperationValidation `json:"validation,omitempty"`
}
