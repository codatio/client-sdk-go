// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataConnectionSourceTypeEnum - The type of platform of the connection.
type DataConnectionSourceTypeEnum string

const (
	DataConnectionSourceTypeEnumAccounting DataConnectionSourceTypeEnum = "Accounting"
	DataConnectionSourceTypeEnumBanking    DataConnectionSourceTypeEnum = "Banking"
	DataConnectionSourceTypeEnumCommerce   DataConnectionSourceTypeEnum = "Commerce"
	DataConnectionSourceTypeEnumOther      DataConnectionSourceTypeEnum = "Other"
	DataConnectionSourceTypeEnumUnknown    DataConnectionSourceTypeEnum = "Unknown"
)

func (e DataConnectionSourceTypeEnum) ToPointer() *DataConnectionSourceTypeEnum {
	return &e
}

func (e *DataConnectionSourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Accounting":
		fallthrough
	case "Banking":
		fallthrough
	case "Commerce":
		fallthrough
	case "Other":
		fallthrough
	case "Unknown":
		*e = DataConnectionSourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataConnectionSourceTypeEnum: %v", v)
	}
}

// DataConnection - A connection represents the link between a `company` and a source of data.
type DataConnection struct {
	AdditionalProperties interface{}       `json:"additionalProperties,omitempty"`
	ConnectionInfo       map[string]string `json:"connectionInfo,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Created              string                `json:"created"`
	DataConnectionErrors []DataConnectionError `json:"dataConnectionErrors,omitempty"`
	// Unique identifier for a company's data connection.
	ID string `json:"id"`
	// A Codat ID representing the integration.
	IntegrationID string `json:"integrationId"`
	// A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.
	IntegrationKey string `json:"integrationKey"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	LastSync     *string `json:"lastSync,omitempty"`
	LinkURL      string  `json:"linkUrl"`
	PlatformName string  `json:"platformName"`
	// A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
	SourceID string `json:"sourceId"`
	// The type of platform of the connection.
	SourceType DataConnectionSourceTypeEnum `json:"sourceType"`
	// The current authorization status of the data connection.
	Status DataConnectionStatusEnum `json:"status"`
}
