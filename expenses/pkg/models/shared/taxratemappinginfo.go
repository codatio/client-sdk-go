// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TaxRateMappingInfoValidTransactionTypesEnum string

const (
	TaxRateMappingInfoValidTransactionTypesEnumPayment       TaxRateMappingInfoValidTransactionTypesEnum = "Payment"
	TaxRateMappingInfoValidTransactionTypesEnumRefund        TaxRateMappingInfoValidTransactionTypesEnum = "Refund"
	TaxRateMappingInfoValidTransactionTypesEnumReward        TaxRateMappingInfoValidTransactionTypesEnum = "Reward"
	TaxRateMappingInfoValidTransactionTypesEnumChargeback    TaxRateMappingInfoValidTransactionTypesEnum = "Chargeback"
	TaxRateMappingInfoValidTransactionTypesEnumTransferIn    TaxRateMappingInfoValidTransactionTypesEnum = "TransferIn"
	TaxRateMappingInfoValidTransactionTypesEnumTransferOut   TaxRateMappingInfoValidTransactionTypesEnum = "TransferOut"
	TaxRateMappingInfoValidTransactionTypesEnumAdjustmentIn  TaxRateMappingInfoValidTransactionTypesEnum = "AdjustmentIn"
	TaxRateMappingInfoValidTransactionTypesEnumAdjustmentOut TaxRateMappingInfoValidTransactionTypesEnum = "AdjustmentOut"
)

func (e TaxRateMappingInfoValidTransactionTypesEnum) ToPointer() *TaxRateMappingInfoValidTransactionTypesEnum {
	return &e
}

func (e *TaxRateMappingInfoValidTransactionTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Payment":
		fallthrough
	case "Refund":
		fallthrough
	case "Reward":
		fallthrough
	case "Chargeback":
		fallthrough
	case "TransferIn":
		fallthrough
	case "TransferOut":
		fallthrough
	case "AdjustmentIn":
		fallthrough
	case "AdjustmentOut":
		*e = TaxRateMappingInfoValidTransactionTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxRateMappingInfoValidTransactionTypesEnum: %s", s)
	}
}

type TaxRateMappingInfo struct {
	// Code for the tax rate from the accounting platform.
	Code *string `json:"code,omitempty"`
	// Effective tax rate.
	EffectiveTaxRate *float64 `json:"effectiveTaxRate,omitempty"`
	// Unique identifier of tax rate.
	ID *string `json:"id,omitempty"`
	// Name of the tax rate in the accounting platform.
	Name *string `json:"name,omitempty"`
	// Total (not compounded) sum of the components of a tax rate.
	TotalTaxRate *float64 `json:"totalTaxRate,omitempty"`
	// Supported transaction types for the account.
	ValidTransactionTypes []TaxRateMappingInfoValidTransactionTypesEnum `json:"validTransactionTypes,omitempty"`
}
