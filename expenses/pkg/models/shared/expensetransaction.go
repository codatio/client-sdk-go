// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExpenseTransactionTypeEnum - The type of transaction.
type ExpenseTransactionTypeEnum string

const (
	ExpenseTransactionTypeEnumPayment       ExpenseTransactionTypeEnum = "Payment"
	ExpenseTransactionTypeEnumRefund        ExpenseTransactionTypeEnum = "Refund"
	ExpenseTransactionTypeEnumReward        ExpenseTransactionTypeEnum = "Reward"
	ExpenseTransactionTypeEnumChargeback    ExpenseTransactionTypeEnum = "Chargeback"
	ExpenseTransactionTypeEnumTransferIn    ExpenseTransactionTypeEnum = "TransferIn"
	ExpenseTransactionTypeEnumTransferOut   ExpenseTransactionTypeEnum = "TransferOut"
	ExpenseTransactionTypeEnumAdjustmentIn  ExpenseTransactionTypeEnum = "AdjustmentIn"
	ExpenseTransactionTypeEnumAdjustmentOut ExpenseTransactionTypeEnum = "AdjustmentOut"
)

func (e *ExpenseTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Payment":
		fallthrough
	case "Refund":
		fallthrough
	case "Reward":
		fallthrough
	case "Chargeback":
		fallthrough
	case "TransferIn":
		fallthrough
	case "TransferOut":
		fallthrough
	case "AdjustmentIn":
		fallthrough
	case "AdjustmentOut":
		*e = ExpenseTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseTransactionTypeEnum: %s", s)
	}
}

type ExpenseTransaction struct {
	// Currency the transaction was recorded in.
	Currency string `json:"currency"`
	// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
	//
	// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
	//
	// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
	//
	// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
	//
	// ## Examples with base currency of GBP
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **USD**          | $20            | 0.781         | £15.62                     |
	// | **EUR**          | €20            | 0.885         | £17.70                     |
	// | **RUB**          | ₽20            | 0.011         | £0.22                      |
	//
	// ## Examples with base currency of USD
	//
	// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
	// | :--------------- | :------------- | :------------ | :------------------------- |
	// | **GBP**          | £20            | 1.277         | $25.54                     |
	// | **EUR**          | €20            | 1.134         | $22.68                     |
	// | **RUB**          | ₽20            | 0.015         | $0.30                      |
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	// Your unique idenfier for the transaction.
	ID string `json:"id"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	IssueDate string `json:"issueDate"`
	// Array of transaction lines.
	Lines []ExpenseTransactionLines `json:"lines,omitempty"`
	// Name of the merchant where the purchase took place
	MerchantName *string `json:"merchantName,omitempty"`
	// Any private, company notes about the transaction.
	Notes *string `json:"notes,omitempty"`
	// The type of transaction.
	Type ExpenseTransactionTypeEnum `json:"type"`
}
