// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccountMappingInfoAccountTypeEnum - Type of the account.
type AccountMappingInfoAccountTypeEnum string

const (
	AccountMappingInfoAccountTypeEnumAsset     AccountMappingInfoAccountTypeEnum = "Asset"
	AccountMappingInfoAccountTypeEnumLiability AccountMappingInfoAccountTypeEnum = "Liability"
	AccountMappingInfoAccountTypeEnumIncome    AccountMappingInfoAccountTypeEnum = "Income"
	AccountMappingInfoAccountTypeEnumExpense   AccountMappingInfoAccountTypeEnum = "Expense"
	AccountMappingInfoAccountTypeEnumEquity    AccountMappingInfoAccountTypeEnum = "Equity"
)

func (e AccountMappingInfoAccountTypeEnum) ToPointer() *AccountMappingInfoAccountTypeEnum {
	return &e
}

func (e *AccountMappingInfoAccountTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Asset":
		fallthrough
	case "Liability":
		fallthrough
	case "Income":
		fallthrough
	case "Expense":
		fallthrough
	case "Equity":
		*e = AccountMappingInfoAccountTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountMappingInfoAccountTypeEnum: %v", v)
	}
}

type AccountMappingInfoValidTransactionTypesEnum string

const (
	AccountMappingInfoValidTransactionTypesEnumPayment       AccountMappingInfoValidTransactionTypesEnum = "Payment"
	AccountMappingInfoValidTransactionTypesEnumRefund        AccountMappingInfoValidTransactionTypesEnum = "Refund"
	AccountMappingInfoValidTransactionTypesEnumReward        AccountMappingInfoValidTransactionTypesEnum = "Reward"
	AccountMappingInfoValidTransactionTypesEnumChargeback    AccountMappingInfoValidTransactionTypesEnum = "Chargeback"
	AccountMappingInfoValidTransactionTypesEnumTransferIn    AccountMappingInfoValidTransactionTypesEnum = "TransferIn"
	AccountMappingInfoValidTransactionTypesEnumTransferOut   AccountMappingInfoValidTransactionTypesEnum = "TransferOut"
	AccountMappingInfoValidTransactionTypesEnumAdjustmentIn  AccountMappingInfoValidTransactionTypesEnum = "AdjustmentIn"
	AccountMappingInfoValidTransactionTypesEnumAdjustmentOut AccountMappingInfoValidTransactionTypesEnum = "AdjustmentOut"
)

func (e AccountMappingInfoValidTransactionTypesEnum) ToPointer() *AccountMappingInfoValidTransactionTypesEnum {
	return &e
}

func (e *AccountMappingInfoValidTransactionTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Payment":
		fallthrough
	case "Refund":
		fallthrough
	case "Reward":
		fallthrough
	case "Chargeback":
		fallthrough
	case "TransferIn":
		fallthrough
	case "TransferOut":
		fallthrough
	case "AdjustmentIn":
		fallthrough
	case "AdjustmentOut":
		*e = AccountMappingInfoValidTransactionTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountMappingInfoValidTransactionTypesEnum: %v", v)
	}
}

type AccountMappingInfo struct {
	// Type of the account.
	AccountType *AccountMappingInfoAccountTypeEnum `json:"accountType,omitempty"`
	// Currency of the account.
	Currency *string `json:"currency,omitempty"`
	// Unique identifier of account.
	ID *string `json:"id,omitempty"`
	// Name of the account as it appears in the companies accounting software.
	Name *string `json:"name,omitempty"`
	// Supported transaction types for the account.
	ValidTransactionTypes []AccountMappingInfoValidTransactionTypesEnum `json:"validTransactionTypes,omitempty"`
}
