// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/codatio/client-sdk-go/bank-feeds/v3/pkg/utils"
)

// BankFeedMapping - A bank feed connection between a source account and a target account, including potential target accounts.
type BankFeedMapping struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	FeedStartDate *string `json:"feedStartDate,omitempty"`
	// Unique ID for the source account.
	SourceAccountID *string `json:"sourceAccountId,omitempty"`
	// Name for the source account.
	SourceAccountName *string `json:"sourceAccountName,omitempty"`
	// Account number for the source account.
	SourceAccountNumber *string `json:"sourceAccountNumber,omitempty"`
	// Balance for the source account.
	SourceBalance *string `json:"sourceBalance,omitempty"`
	// The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
	//
	// ## Unknown currencies
	//
	// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
	//
	// There are only a very small number of edge cases where this currency code is returned by the Codat system.
	SourceCurrency *string `json:"sourceCurrency,omitempty"`
	// The status.
	Status *string `json:"status,omitempty"`
	// Unique ID for the target account in the accounting platform.
	TargetAccountID *string `json:"targetAccountId,omitempty"`
	// Name for the target account in the accounting platform.
	TargetAccountName *string `json:"targetAccountName,omitempty"`
	// An array of potential target accounts.
	TargetAccountOptions []TargetAccountOption `json:"targetAccountOptions,omitempty"`
}

func (b BankFeedMapping) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankFeedMapping) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankFeedMapping) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *BankFeedMapping) GetFeedStartDate() *string {
	if o == nil {
		return nil
	}
	return o.FeedStartDate
}

func (o *BankFeedMapping) GetSourceAccountID() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountID
}

func (o *BankFeedMapping) GetSourceAccountName() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountName
}

func (o *BankFeedMapping) GetSourceAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountNumber
}

func (o *BankFeedMapping) GetSourceBalance() *string {
	if o == nil {
		return nil
	}
	return o.SourceBalance
}

func (o *BankFeedMapping) GetSourceCurrency() *string {
	if o == nil {
		return nil
	}
	return o.SourceCurrency
}

func (o *BankFeedMapping) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BankFeedMapping) GetTargetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountID
}

func (o *BankFeedMapping) GetTargetAccountName() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountName
}

func (o *BankFeedMapping) GetTargetAccountOptions() []TargetAccountOption {
	if o == nil {
		return nil
	}
	return o.TargetAccountOptions
}
