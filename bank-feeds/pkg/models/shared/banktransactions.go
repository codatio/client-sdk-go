// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/codatio/client-sdk-go/bank-feeds/v3/pkg/utils"
	"github.com/ericlagergren/decimal"
)

// BankTransactionsBankTransactionType - Type of transaction for the bank statement line.
type BankTransactionsBankTransactionType string

const (
	BankTransactionsBankTransactionTypeUnknown     BankTransactionsBankTransactionType = "Unknown"
	BankTransactionsBankTransactionTypeCredit      BankTransactionsBankTransactionType = "Credit"
	BankTransactionsBankTransactionTypeDebit       BankTransactionsBankTransactionType = "Debit"
	BankTransactionsBankTransactionTypeInt         BankTransactionsBankTransactionType = "Int"
	BankTransactionsBankTransactionTypeDiv         BankTransactionsBankTransactionType = "Div"
	BankTransactionsBankTransactionTypeFee         BankTransactionsBankTransactionType = "Fee"
	BankTransactionsBankTransactionTypeSerChg      BankTransactionsBankTransactionType = "SerChg"
	BankTransactionsBankTransactionTypeDep         BankTransactionsBankTransactionType = "Dep"
	BankTransactionsBankTransactionTypeAtm         BankTransactionsBankTransactionType = "Atm"
	BankTransactionsBankTransactionTypePos         BankTransactionsBankTransactionType = "Pos"
	BankTransactionsBankTransactionTypeXfer        BankTransactionsBankTransactionType = "Xfer"
	BankTransactionsBankTransactionTypeCheck       BankTransactionsBankTransactionType = "Check"
	BankTransactionsBankTransactionTypePayment     BankTransactionsBankTransactionType = "Payment"
	BankTransactionsBankTransactionTypeCash        BankTransactionsBankTransactionType = "Cash"
	BankTransactionsBankTransactionTypeDirectDep   BankTransactionsBankTransactionType = "DirectDep"
	BankTransactionsBankTransactionTypeDirectDebit BankTransactionsBankTransactionType = "DirectDebit"
	BankTransactionsBankTransactionTypeRepeatPmt   BankTransactionsBankTransactionType = "RepeatPmt"
	BankTransactionsBankTransactionTypeOther       BankTransactionsBankTransactionType = "Other"
)

func (e BankTransactionsBankTransactionType) ToPointer() *BankTransactionsBankTransactionType {
	return &e
}

func (e *BankTransactionsBankTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unknown":
		fallthrough
	case "Credit":
		fallthrough
	case "Debit":
		fallthrough
	case "Int":
		fallthrough
	case "Div":
		fallthrough
	case "Fee":
		fallthrough
	case "SerChg":
		fallthrough
	case "Dep":
		fallthrough
	case "Atm":
		fallthrough
	case "Pos":
		fallthrough
	case "Xfer":
		fallthrough
	case "Check":
		fallthrough
	case "Payment":
		fallthrough
	case "Cash":
		fallthrough
	case "DirectDep":
		fallthrough
	case "DirectDebit":
		fallthrough
	case "RepeatPmt":
		fallthrough
	case "Other":
		*e = BankTransactionsBankTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BankTransactionsBankTransactionType: %v", v)
	}
}

type BankTransactions struct {
	// The amount transacted in the bank transaction.
	Amount *decimal.Big `decimal:"number" json:"amount,omitempty"`
	// The remaining balance in the account with ID `accountId`.
	Balance *decimal.Big `decimal:"number" json:"balance,omitempty"`
	// The giving or receiving party such as a person or organization.
	Counterparty *string `json:"counterparty,omitempty"`
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	Date *string `json:"date,omitempty"`
	// Description of the bank transaction.
	Description *string `json:"description,omitempty"`
	// Identifier for the bank account transaction, unique for the company in the accounting platform.
	ID *string `json:"id,omitempty"`
	// `True` if the bank transaction has been [reconciled](https://www.xero.com/uk/guides/what-is-bank-reconciliation/) in the accounting platform.
	Reconciled *bool `json:"reconciled,omitempty"`
	// An optional reference to the bank transaction.
	Reference *string `json:"reference,omitempty"`
	// Type of transaction for the bank statement line.
	TransactionType *BankTransactionsBankTransactionType `json:"transactionType,omitempty"`
}

func (b BankTransactions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankTransactions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankTransactions) GetAmount() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *BankTransactions) GetBalance() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *BankTransactions) GetCounterparty() *string {
	if o == nil {
		return nil
	}
	return o.Counterparty
}

func (o *BankTransactions) GetDate() *string {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *BankTransactions) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *BankTransactions) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *BankTransactions) GetReconciled() *bool {
	if o == nil {
		return nil
	}
	return o.Reconciled
}

func (o *BankTransactions) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *BankTransactions) GetTransactionType() *BankTransactionsBankTransactionType {
	if o == nil {
		return nil
	}
	return o.TransactionType
}
