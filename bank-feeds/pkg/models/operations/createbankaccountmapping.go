// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/codatio/client-sdk-go/bank-feeds/v3/pkg/models/shared"
	"net/http"
)

// CreateBankAccountMappingBankFeedAccountMapping - A bank feed connection between a source account and a target account.
type CreateBankAccountMappingBankFeedAccountMapping struct {
	// In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
	//
	// ```
	// 2020-10-08T22:40:50Z
	// 2021-01-01T00:00:00
	// ```
	//
	//
	//
	// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
	//
	// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
	// - Unqualified local time: `2021-11-15T01:00:00`
	// - UTC time offsets: `2021-11-15T01:00:00-05:00`
	//
	// > Time zones
	// >
	// > Not all dates from Codat will contain information about time zones.
	// > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
	FeedStartDate *string `json:"feedStartDate,omitempty"`
	// Unique ID for the source account
	SourceAccountID *string `json:"sourceAccountId,omitempty"`
	// Unique ID for the target account
	TargetAccountID *string `json:"targetAccountId,omitempty"`
}

func (o *CreateBankAccountMappingBankFeedAccountMapping) GetFeedStartDate() *string {
	if o == nil {
		return nil
	}
	return o.FeedStartDate
}

func (o *CreateBankAccountMappingBankFeedAccountMapping) GetSourceAccountID() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountID
}

func (o *CreateBankAccountMappingBankFeedAccountMapping) GetTargetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountID
}

type CreateBankAccountMappingRequest struct {
	RequestBody  *CreateBankAccountMappingBankFeedAccountMapping `request:"mediaType=application/json"`
	CompanyID    string                                          `pathParam:"style=simple,explode=false,name=companyId"`
	ConnectionID string                                          `pathParam:"style=simple,explode=false,name=connectionId"`
}

func (o *CreateBankAccountMappingRequest) GetRequestBody() *CreateBankAccountMappingBankFeedAccountMapping {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateBankAccountMappingRequest) GetCompanyID() string {
	if o == nil {
		return ""
	}
	return o.CompanyID
}

func (o *CreateBankAccountMappingRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

type CreateBankAccountMappingResponse struct {
	// Success
	BankFeedAccountMappingResponse *shared.BankFeedAccountMappingResponse
	ContentType                    string
	// The request made is not valid.
	ErrorMessage *shared.ErrorMessage
	StatusCode   int
	RawResponse  *http.Response
}

func (o *CreateBankAccountMappingResponse) GetBankFeedAccountMappingResponse() *shared.BankFeedAccountMappingResponse {
	if o == nil {
		return nil
	}
	return o.BankFeedAccountMappingResponse
}

func (o *CreateBankAccountMappingResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateBankAccountMappingResponse) GetErrorMessage() *shared.ErrorMessage {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateBankAccountMappingResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateBankAccountMappingResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
